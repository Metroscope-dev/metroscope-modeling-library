model CoolingTowerPoppe_test
  input Real waterInletTemp(start = 28) "deg_C";
  input MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate waterInletFlow(
    start = 39) "m3/s";
  input Real waterInletPress(start = 1) "bar";
  input Real AirInletTemp(start = 10) "deg_C";
  input Real airInletPress(start = 1) "bar";
  input MetroscopeModelingLibrary.Utilities.Units.Fraction cold_source_relative_humidity
    (start = 0.4) "1";
  input Real WaterOutletTemp(start = 20) "deg_C";
  parameter Real Lfi = 15 "m";
  parameter Real Afr = 3000 "m2";
  parameter Real Cf = 1;
  constant Real CoolingTower.gr(unit = "m/s2") = 9.80665;
  parameter Integer CoolingTower.N_step = 10;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_in_0 = CoolingTower.water_inlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_out_0 = CoolingTower.water_inlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_inlet_flow.DP_0 = CoolingTower.water_inlet_flow.P_out_0-
    CoolingTower.water_inlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_in_0 = CoolingTower.water_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_out_0 = CoolingTower.water_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_in_0 = CoolingTower.water_outlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_out_0 = CoolingTower.water_outlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_outlet_flow.DP_0 = CoolingTower.water_outlet_flow.P_out_0
    -CoolingTower.water_outlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_in_0 = CoolingTower.water_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_out_0 = CoolingTower.water_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_in_0 = CoolingTower.air_inlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_out_0 = CoolingTower.air_inlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_inlet_flow.DP_0 = CoolingTower.air_inlet_flow.P_out_0-
    CoolingTower.air_inlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_in_0 = CoolingTower.air_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_out_0 = CoolingTower.air_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_0 = 500000.0;
  parameter Real CoolingTower.air_inlet.relative_humidity_0(min = 0.0, max = 1.0)
     = 0.1;
  parameter Real CoolingTower.air_outlet.relative_humidity_0(min = 0.0, max = 
    1.0) = 0.1;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_in_0 = CoolingTower.air_outlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_out_0 = CoolingTower.air_outlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_outlet_flow.DP_0 = CoolingTower.air_outlet_flow.P_out_0-
    CoolingTower.air_outlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_in_0 = CoolingTower.air_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_out_0 = CoolingTower.air_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_0 = 500000.0;
  parameter Real cold_source.relative_humidity_0(min = 0.0, max = 1.0) = 0.1;
  parameter Real cold_sink.relative_humidity_0(min = 0.0, max = 1.0) = 0.1;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.h_0 = 500000.0;
  parameter Boolean waterInletPress_sensor.faulty_flow_rate = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletPress_sensor.flow_model.T_in_0 = waterInletPress_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletPress_sensor.flow_model.T_out_0 = waterInletPress_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletPress_sensor.flow_model.DP_0 = waterInletPress_sensor.flow_model.P_out_0
    -waterInletPress_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.flow_model.h_in_0 = waterInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.flow_model.h_out_0 = waterInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletPress_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.h_0 = 500000.0;
  parameter Boolean AirInletTemp_sensor.faulty_flow_rate = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.flow_model.T_in_0 = AirInletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.flow_model.T_out_0 = AirInletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInletTemp_sensor.flow_model.DP_0 = AirInletTemp_sensor.flow_model.P_out_0
    -AirInletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.flow_model.h_in_0 = AirInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.flow_model.h_out_0 = AirInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.T_0 = 300;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.h_0 = 500000.0;
  parameter Boolean waterInletTemp_sensor.faulty_flow_rate = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.flow_model.T_in_0 = waterInletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.flow_model.T_out_0 = waterInletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletTemp_sensor.flow_model.DP_0 = waterInletTemp_sensor.flow_model.P_out_0
    -waterInletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.flow_model.h_in_0 = waterInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.flow_model.h_out_0 = waterInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.T_0 = 300;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.h_0 = 500000.0;
  parameter Boolean WaterOutletTemp_sensor.faulty_flow_rate = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.flow_model.T_in_0 = WaterOutletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.flow_model.T_out_0 = WaterOutletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    WaterOutletTemp_sensor.flow_model.DP_0 = WaterOutletTemp_sensor.flow_model.P_out_0
    -WaterOutletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.flow_model.h_in_0 = WaterOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.flow_model.h_out_0 = WaterOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.T_0 = 300;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.h_0 = 500000.0;
  parameter Boolean waterFlow_sensor.faulty_flow_rate = waterFlow_sensor.faulty;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterFlow_sensor.flow_model.T_in_0 = waterFlow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterFlow_sensor.flow_model.T_out_0 = waterFlow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterFlow_sensor.flow_model.DP_0 = waterFlow_sensor.flow_model.P_out_0-
    waterFlow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.flow_model.h_in_0 = waterFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.flow_model.h_out_0 = waterFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterFlow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    waterFlow_sensor.Qv_0 = 0.1;
  parameter Boolean waterFlow_sensor.faulty = false;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.h_0 = 500000.0;
  parameter Boolean AirOutletTemp_sensor.faulty_flow_rate = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_in_0 = AirOutletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_out_0 = AirOutletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirOutletTemp_sensor.flow_model.DP_0 = AirOutletTemp_sensor.flow_model.P_out_0
    -AirOutletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_in_0 = AirOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_out_0 = AirOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.T_0 = 300;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.h_0 = 500000.0;
  parameter Boolean airInletFlow_sensor.faulty_flow_rate = airInletFlow_sensor.faulty;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletFlow_sensor.flow_model.T_in_0 = airInletFlow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletFlow_sensor.flow_model.T_out_0 = airInletFlow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletFlow_sensor.flow_model.DP_0 = airInletFlow_sensor.flow_model.P_out_0
    -airInletFlow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.flow_model.h_in_0 = airInletFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.flow_model.h_out_0 = airInletFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletFlow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    airInletFlow_sensor.Qv_0 = 0.1;
  parameter Boolean airInletFlow_sensor.faulty = false;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.h_0 = 500000.0;
  parameter Boolean airInletPress_sensor.faulty_flow_rate = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletPress_sensor.flow_model.T_in_0 = airInletPress_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletPress_sensor.flow_model.T_out_0 = airInletPress_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletPress_sensor.flow_model.DP_0 = airInletPress_sensor.flow_model.P_out_0
    -airInletPress_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.flow_model.h_in_0 = airInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.flow_model.h_out_0 = airInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletPress_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.h_0 = 500000.0;
  parameter Boolean airOutletPress_sensor.faulty_flow_rate = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airOutletPress_sensor.flow_model.T_in_0 = airOutletPress_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airOutletPress_sensor.flow_model.T_out_0 = airOutletPress_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airOutletPress_sensor.flow_model.DP_0 = airOutletPress_sensor.flow_model.P_out_0
    -airOutletPress_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.flow_model.h_in_0 = airOutletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.flow_model.h_out_0 = airOutletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airOutletPress_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.flow_model.h_0 = 500000.0;

  output Real hd(start = 1);
  output Real V_inlet(start = 13.251477) "m/s";
  output Real airInletFlow(start = 52552.133) "m3/s";
  output Real airOutletPress(start = 1) "bar";
  output Real AirOutletTemp(start = 35) "deg_C";
  output MetroscopeModelingLibrary.Utilities.Units.Fraction cold_sink_relative_humidity
    (start = 1) "1";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    hot_source.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    hot_source.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    hot_source.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    hot_source.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    hot_source.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature hot_source.T_out;
  Modelica.Media.Interfaces.Types.FixedPhase hot_source.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy hot_source.state_out.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density hot_source.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature hot_source.state_out.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure hot_source.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    hot_source.C_out.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure hot_source.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy hot_source.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction hot_source.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy hot_sink.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction hot_sink.Xi_in[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure hot_sink.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate hot_sink.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    hot_sink.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature hot_sink.T_in;
  Modelica.Media.Interfaces.Types.FixedPhase hot_sink.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy hot_sink.state_in.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density hot_sink.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature hot_sink.state_in.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure hot_sink.state_in.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate hot_sink.C_in.Q
    (nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure hot_sink.C_in.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy hot_sink.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction hot_sink.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.hd;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    CoolingTower.Cf;
  MetroscopeModelingLibrary.Utilities.Units.Velocity CoolingTower.V_inlet;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputArea CoolingTower.Afr;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.Lfi;
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_inlet;
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_outlet;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_out;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.w_in;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.w_out;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_initial;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_final;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_in;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_out;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_in;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_out;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.deltaT;
  MetroscopeModelingLibrary.Utilities.Units.HeatCapacity CoolingTower.deltacp;
  Real CoolingTower.w[CoolingTower.N_step];
  Real CoolingTower.M[CoolingTower.N_step];
  Real CoolingTower.i[CoolingTower.N_step];
  Real CoolingTower.Tw[CoolingTower.N_step];
  Real CoolingTower.Ta[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.HeatCapacity CoolingTower.cp[
    CoolingTower.N_step];
  Real CoolingTower.Pin[CoolingTower.N_step];
  Real CoolingTower.Lef[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Qw[
    CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Qa[
    CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_connector.Q(start = 500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_connector.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet_connector.Q(start = -500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_connector.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_connector.Q(start = 500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_connector.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet_connector.Q(start = -500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_connector.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h_in
    (start = CoolingTower.water_inlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h_out
    (start = CoolingTower.water_inlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.Q(start = CoolingTower.water_inlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_in
    (start = CoolingTower.water_inlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_out
    (start = CoolingTower.water_inlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_inlet_flow.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_in
    (start = CoolingTower.water_inlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_out
    (start = CoolingTower.water_inlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho
    (start = CoolingTower.water_inlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet_flow.T_in
    (start = CoolingTower.water_inlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet_flow.T_out
    (start = CoolingTower.water_inlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet_flow.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet_flow.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet_flow.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet_flow.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet_flow.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet_flow.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet_flow.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet_flow.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet_flow.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet_flow.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_inlet_flow.DP(start = CoolingTower.water_inlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.water_inlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.water_inlet_flow.DH(start = CoolingTower.water_inlet_flow.h_out_0
    -CoolingTower.water_inlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.water_inlet_flow.DT(start = CoolingTower.water_inlet_flow.T_out_0
    -CoolingTower.water_inlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.C_in.Q(start = CoolingTower.water_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.C_in.P
    (start = CoolingTower.water_inlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_flow.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_inlet_flow.C_out.Q(start =  -CoolingTower.water_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.C_out.P
    (start = CoolingTower.water_inlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.C_out.h_outflow
    (start = CoolingTower.water_inlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_flow.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h
    (start = CoolingTower.water_inlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    CoolingTower.water_inlet_flow.DP_input(start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h_in
    (start = CoolingTower.water_outlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h_out
    (start = CoolingTower.water_outlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.Q(start = CoolingTower.water_outlet_flow.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_in
    (start = CoolingTower.water_outlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_out
    (start = CoolingTower.water_outlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_outlet_flow.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_in
    (start = CoolingTower.water_outlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_out
    (start = CoolingTower.water_outlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho
    (start = CoolingTower.water_outlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T_in
    (start = CoolingTower.water_outlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T_out
    (start = CoolingTower.water_outlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet_flow.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet_flow.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet_flow.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet_flow.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet_flow.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet_flow.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet_flow.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet_flow.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet_flow.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet_flow.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_outlet_flow.DP(start = CoolingTower.water_outlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.water_outlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.water_outlet_flow.DH(start = CoolingTower.water_outlet_flow.h_out_0
    -CoolingTower.water_outlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.water_outlet_flow.DT(start = CoolingTower.water_outlet_flow.T_out_0
    -CoolingTower.water_outlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.C_in.Q(start = CoolingTower.water_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.C_in.P
    (start = CoolingTower.water_outlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_flow.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet_flow.C_out.Q(start =  -CoolingTower.water_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.C_out.P
    (start = CoolingTower.water_outlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.C_out.h_outflow
    (start = CoolingTower.water_outlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_flow.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h
    (start = CoolingTower.water_outlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P
    (start = CoolingTower.water_outlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T
    (start = CoolingTower.water_outlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.water_outlet.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.water_outlet.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.water_outlet.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_outlet.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet.T_out;
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet.C_out.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_inlet.Xi_in
    [0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.water_inlet.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet.T_in;
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet.C_in.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h_in
    (start = CoolingTower.air_inlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h_out
    (start = CoolingTower.air_inlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.Q(start = CoolingTower.air_inlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_in
    (start = CoolingTower.air_inlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_out
    (start = CoolingTower.air_inlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_inlet_flow.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_in
    (start = CoolingTower.air_inlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_out
    (start = CoolingTower.air_inlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho
    (start = CoolingTower.air_inlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T_in
    (start = CoolingTower.air_inlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T_out
    (start = CoolingTower.air_inlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet_flow.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet_flow.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet_flow.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet_flow.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_inlet_flow.DP(start = CoolingTower.air_inlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.air_inlet_flow.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.air_inlet_flow.DH(start = CoolingTower.air_inlet_flow.h_out_0-
    CoolingTower.air_inlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.air_inlet_flow.DT(start = CoolingTower.air_inlet_flow.T_out_0-
    CoolingTower.air_inlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.C_in.Q(start = CoolingTower.air_inlet_flow.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.C_in.P
    (start = CoolingTower.air_inlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_inlet_flow.C_out.Q(start =  -CoolingTower.air_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.C_out.P
    (start = CoolingTower.air_inlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.C_out.h_outflow
    (start = CoolingTower.air_inlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h
    (start = CoolingTower.air_inlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P
    (start = CoolingTower.air_inlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T
    (start = CoolingTower.air_inlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_inlet.Xi_in
    [1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.air_inlet.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet.T_in;
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet.state_in.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet.C_in.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet.C_in.Xi_outflow
    [1];
  Real CoolingTower.air_inlet.relative_humidity(start = CoolingTower.air_inlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.air_outlet.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.air_outlet.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.air_outlet.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_outlet.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet.T_out;
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet.C_out.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet.C_out.Xi_outflow
    [1];
  Real CoolingTower.air_outlet.relative_humidity(start = CoolingTower.air_outlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h_in
    (start = CoolingTower.air_outlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h_out
    (start = CoolingTower.air_outlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.Q(start = CoolingTower.air_outlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_in
    (start = CoolingTower.air_outlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_out
    (start = CoolingTower.air_outlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_outlet_flow.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_in
    (start = CoolingTower.air_outlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_out
    (start = CoolingTower.air_outlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho
    (start = CoolingTower.air_outlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T_in
    (start = CoolingTower.air_outlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T_out
    (start = CoolingTower.air_outlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet_flow.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet_flow.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet_flow.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet_flow.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_outlet_flow.DP(start = CoolingTower.air_outlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.air_outlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.air_outlet_flow.DH(start = CoolingTower.air_outlet_flow.h_out_0
    -CoolingTower.air_outlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.air_outlet_flow.DT(start = CoolingTower.air_outlet_flow.T_out_0
    -CoolingTower.air_outlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.C_in.Q(start = CoolingTower.air_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.C_in.P
    (start = CoolingTower.air_outlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet_flow.C_out.Q(start =  -CoolingTower.air_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.C_out.P
    (start = CoolingTower.air_outlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.C_out.h_outflow
    (start = CoolingTower.air_outlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h
    (start = CoolingTower.air_outlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P
    (start = CoolingTower.air_outlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T
    (start = CoolingTower.air_outlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    cold_source.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    cold_source.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    cold_source.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    cold_source.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    cold_source.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature cold_source.T_out;
  Modelica.Media.Interfaces.Types.AbsolutePressure cold_source.state_out.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature cold_source.state_out.T(min = 
    190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction cold_source.state_out.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    cold_source.C_out.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure cold_source.C_out.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cold_source.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction cold_source.C_out.Xi_outflow[1];
  Real cold_source.relative_humidity(start = cold_source.relative_humidity_0, 
    min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cold_sink.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction cold_sink.Xi_in[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure cold_sink.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate cold_sink.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    cold_sink.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature cold_sink.T_in;
  Modelica.Media.Interfaces.Types.AbsolutePressure cold_sink.state_in.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature cold_sink.state_in.T(min = 190.0, 
    max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction cold_sink.state_in.X[2](start = {
    0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    cold_sink.C_in.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure cold_sink.C_in.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cold_sink.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction cold_sink.C_in.Xi_outflow[1];
  Real cold_sink.relative_humidity(start = cold_sink.relative_humidity_0, min = 
    0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.Q(start = waterInletPress_sensor.Q_0, nominal = 100.0)
     "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletPress_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.P(
    start = waterInletPress_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.h
    (start = waterInletPress_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletPress_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletPress_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletPress_sensor.state.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletPress_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletPress_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate waterInletPress_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.C_in.Q(start = waterInletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.C_in.P
    (start = waterInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletPress_sensor.C_out.Q(start =  -waterInletPress_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.C_out.P
    (start = waterInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.h_in
    (start = waterInletPress_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.h_out
    (start = waterInletPress_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.flow_model.Q(start = waterInletPress_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_in
    (start = waterInletPress_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_out
    (start = waterInletPress_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletPress_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho_in
    (start = waterInletPress_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho_out
    (start = waterInletPress_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho
    (start = waterInletPress_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletPress_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    waterInletPress_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletPress_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletPress_sensor.flow_model.T_in
    (start = waterInletPress_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletPress_sensor.flow_model.T_out
    (start = waterInletPress_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletPress_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletPress_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletPress_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletPress_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletPress_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletPress_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletPress_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletPress_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletPress_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletPress_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletPress_sensor.flow_model.DP(start = waterInletPress_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power waterInletPress_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    waterInletPress_sensor.flow_model.DH(start = waterInletPress_sensor.flow_model.h_out_0
    -waterInletPress_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    waterInletPress_sensor.flow_model.DT(start = waterInletPress_sensor.flow_model.T_out_0
    -waterInletPress_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.flow_model.C_in.Q(start = waterInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.C_in.P
    (start = waterInletPress_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletPress_sensor.flow_model.C_out.Q(start =  -waterInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.C_out.P
    (start = waterInletPress_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.C_out.h_outflow
    (start = waterInletPress_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.h
    (start = waterInletPress_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P
    (start = waterInletPress_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletPress_sensor.flow_model.T
    (start = waterInletPress_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real waterInletPress_sensor.P_barG(start = waterInletPress_sensor.P_0*1E-05-1,
     nominal = 100000.0);
  Real waterInletPress_sensor.P_psiG(start = waterInletPress_sensor.P_0*
    0.000145038-14.50377377, nominal = 14.5038);
  Real waterInletPress_sensor.P_MPaG(start = waterInletPress_sensor.P_0*1E-06-
    0.1, nominal = 0.09999999999999999);
  Real waterInletPress_sensor.P_kPaG(start = waterInletPress_sensor.P_0*0.001-100,
     nominal = 100.0);
  Real waterInletPress_sensor.P_barA(start = waterInletPress_sensor.P_0*1E-05, 
    nominal = 1.0, unit = "bar");
  Real waterInletPress_sensor.P_psiA(start = waterInletPress_sensor.P_0*
    0.000145038, nominal = 14.5038);
  Real waterInletPress_sensor.P_MPaA(start = waterInletPress_sensor.P_0*1E-06, 
    nominal = 0.09999999999999999);
  Real waterInletPress_sensor.P_kPaA(start = waterInletPress_sensor.P_0*0.001, 
    nominal = 100.0);
  Real waterInletPress_sensor.P_inHg(start = waterInletPress_sensor.P_0*
    0.0002953006, nominal = 29.530060000000002);
  Real waterInletPress_sensor.P_mbar(start = waterInletPress_sensor.P_0*0.01, 
    nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.Q(start = AirInletTemp_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInletTemp_sensor.Xi[1]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.P(
    start = AirInletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.h
    (start = AirInletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInletTemp_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInletTemp_sensor.state.T(min = 
    190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirInletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.C_in.Q(start = AirInletTemp_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.C_in.P(
    start = AirInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInletTemp_sensor.C_out.Q(start =  -AirInletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.C_out.P
    (start = AirInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.h_in
    (start = AirInletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.h_out
    (start = AirInletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.flow_model.Q(start = AirInletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_in
    (start = AirInletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_out
    (start = AirInletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInletTemp_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho_in
    (start = AirInletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho_out
    (start = AirInletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho
    (start = AirInletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirInletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.flow_model.T_in
    (start = AirInletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.flow_model.T_out
    (start = AirInletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInletTemp_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInletTemp_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInletTemp_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInletTemp_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInletTemp_sensor.flow_model.DP(start = AirInletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirInletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirInletTemp_sensor.flow_model.DH(start = AirInletTemp_sensor.flow_model.h_out_0
    -AirInletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirInletTemp_sensor.flow_model.DT(start = AirInletTemp_sensor.flow_model.T_out_0
    -AirInletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.flow_model.C_in.Q(start = AirInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.C_in.P
    (start = AirInletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInletTemp_sensor.flow_model.C_out.Q(start =  -AirInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.C_out.P
    (start = AirInletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.C_out.h_outflow
    (start = AirInletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.h
    (start = AirInletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P
    (start = AirInletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.flow_model.T
    (start = AirInletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.T(
    start = AirInletTemp_sensor.T_0);
  Real AirInletTemp_sensor.T_degC(start = AirInletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real AirInletTemp_sensor.T_degF(start = (AirInletTemp_sensor.T_0+273.15)*1.8+32,
     nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.Q(start = waterInletTemp_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletTemp_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.P(
    start = waterInletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.h
    (start = waterInletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletTemp_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletTemp_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletTemp_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletTemp_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletTemp_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate waterInletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.C_in.Q(start = waterInletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.C_in.P
    (start = waterInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletTemp_sensor.C_out.Q(start =  -waterInletTemp_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.C_out.P
    (start = waterInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.h_in
    (start = waterInletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.h_out
    (start = waterInletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.flow_model.Q(start = waterInletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_in
    (start = waterInletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_out
    (start = waterInletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletTemp_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho_in
    (start = waterInletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho_out
    (start = waterInletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho
    (start = waterInletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    waterInletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.flow_model.T_in
    (start = waterInletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.flow_model.T_out
    (start = waterInletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletTemp_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletTemp_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletTemp_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletTemp_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletTemp_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletTemp_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletTemp_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletTemp_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletTemp_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletTemp_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletTemp_sensor.flow_model.DP(start = waterInletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power waterInletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    waterInletTemp_sensor.flow_model.DH(start = waterInletTemp_sensor.flow_model.h_out_0
    -waterInletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    waterInletTemp_sensor.flow_model.DT(start = waterInletTemp_sensor.flow_model.T_out_0
    -waterInletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.flow_model.C_in.Q(start = waterInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.C_in.P
    (start = waterInletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletTemp_sensor.flow_model.C_out.Q(start =  -waterInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.C_out.P
    (start = waterInletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.C_out.h_outflow
    (start = waterInletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.h
    (start = waterInletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P
    (start = waterInletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.flow_model.T
    (start = waterInletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.T(
    start = waterInletTemp_sensor.T_0);
  Real waterInletTemp_sensor.T_degC(start = waterInletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real waterInletTemp_sensor.T_degF(start = (waterInletTemp_sensor.T_0+273.15)*
    1.8+32, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.Q(start = WaterOutletTemp_sensor.Q_0, nominal = 100.0)
     "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction WaterOutletTemp_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.P(
    start = WaterOutletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.h
    (start = WaterOutletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase WaterOutletTemp_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy WaterOutletTemp_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density WaterOutletTemp_sensor.state.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature WaterOutletTemp_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure WaterOutletTemp_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate WaterOutletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.C_in.Q(start = WaterOutletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.C_in.P
    (start = WaterOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    WaterOutletTemp_sensor.C_out.Q(start =  -WaterOutletTemp_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.C_out.P
    (start = WaterOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.h_in
    (start = WaterOutletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.h_out
    (start = WaterOutletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.flow_model.Q(start = WaterOutletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_in
    (start = WaterOutletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_out
    (start = WaterOutletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction WaterOutletTemp_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho_in
    (start = WaterOutletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho_out
    (start = WaterOutletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho
    (start = WaterOutletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    WaterOutletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    WaterOutletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    WaterOutletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.flow_model.T_in
    (start = WaterOutletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.flow_model.T_out
    (start = WaterOutletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase WaterOutletTemp_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density WaterOutletTemp_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature WaterOutletTemp_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure WaterOutletTemp_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase WaterOutletTemp_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density WaterOutletTemp_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature WaterOutletTemp_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure WaterOutletTemp_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    WaterOutletTemp_sensor.flow_model.DP(start = WaterOutletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power WaterOutletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    WaterOutletTemp_sensor.flow_model.DH(start = WaterOutletTemp_sensor.flow_model.h_out_0
    -WaterOutletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    WaterOutletTemp_sensor.flow_model.DT(start = WaterOutletTemp_sensor.flow_model.T_out_0
    -WaterOutletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.flow_model.C_in.Q(start = WaterOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.C_in.P
    (start = WaterOutletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    WaterOutletTemp_sensor.flow_model.C_out.Q(start =  -WaterOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.C_out.P
    (start = WaterOutletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.C_out.h_outflow
    (start = WaterOutletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.h
    (start = WaterOutletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P
    (start = WaterOutletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.flow_model.T
    (start = WaterOutletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.T
    (start = WaterOutletTemp_sensor.T_0);
  Real WaterOutletTemp_sensor.T_degC(start = WaterOutletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real WaterOutletTemp_sensor.T_degF(start = (WaterOutletTemp_sensor.T_0+273.15)
    *1.8+32, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.Q(start = waterFlow_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterFlow_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.P(start = 
    waterFlow_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.h(
    start = waterFlow_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase waterFlow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterFlow_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterFlow_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterFlow_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterFlow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate waterFlow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.C_in.Q(start = waterFlow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.C_in.P(
    start = waterFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterFlow_sensor.C_out.Q(start =  -waterFlow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.C_out.P(
    start = waterFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.h_in
    (start = waterFlow_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.h_out
    (start = waterFlow_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.flow_model.Q(start = waterFlow_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_in
    (start = waterFlow_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_out
    (start = waterFlow_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterFlow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho_in
    (start = waterFlow_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho_out
    (start = waterFlow_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho
    (start = waterFlow_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterFlow_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    waterFlow_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterFlow_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterFlow_sensor.flow_model.T_in
    (start = waterFlow_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterFlow_sensor.flow_model.T_out
    (start = waterFlow_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase waterFlow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterFlow_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterFlow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterFlow_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterFlow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase waterFlow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterFlow_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterFlow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterFlow_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterFlow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterFlow_sensor.flow_model.DP(start = waterFlow_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power waterFlow_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    waterFlow_sensor.flow_model.DH(start = waterFlow_sensor.flow_model.h_out_0-
    waterFlow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    waterFlow_sensor.flow_model.DT(start = waterFlow_sensor.flow_model.T_out_0-
    waterFlow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.flow_model.C_in.Q(start = waterFlow_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.C_in.P
    (start = waterFlow_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterFlow_sensor.flow_model.C_out.Q(start =  -waterFlow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.C_out.P
    (start = waterFlow_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.C_out.h_outflow
    (start = waterFlow_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.h
    (start = waterFlow_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P
    (start = waterFlow_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterFlow_sensor.flow_model.T
    (start = waterFlow_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate waterFlow_sensor.Qv(
    start = waterFlow_sensor.Qv_0);
  Real waterFlow_sensor.Q_lm(start = waterFlow_sensor.Qv_0*60000, nominal = 
    6000.0);
  Real waterFlow_sensor.Q_th(start = waterFlow_sensor.Q_0*3.6, nominal = 360.0);
  Real waterFlow_sensor.Q_lbs(start = waterFlow_sensor.Q_0*0.453592428, 
    nominal = 45.3592428);
  Real waterFlow_sensor.Q_Mlbh(start = waterFlow_sensor.Q_0*0.0079366414387, 
    nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.Q(start = AirOutletTemp_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirOutletTemp_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.P(
    start = AirOutletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.h
    (start = AirOutletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirOutletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.C_in.Q(start = AirOutletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.C_in.P
    (start = AirOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirOutletTemp_sensor.C_out.Q(start =  -AirOutletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.C_out.P
    (start = AirOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h_in
    (start = AirOutletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h_out
    (start = AirOutletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.Q(start = AirOutletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_in
    (start = AirOutletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_out
    (start = AirOutletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirOutletTemp_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_in
    (start = AirOutletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_out
    (start = AirOutletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho
    (start = AirOutletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T_in
    (start = AirOutletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T_out
    (start = AirOutletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirOutletTemp_sensor.flow_model.DP(start = AirOutletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirOutletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirOutletTemp_sensor.flow_model.DH(start = AirOutletTemp_sensor.flow_model.h_out_0
    -AirOutletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirOutletTemp_sensor.flow_model.DT(start = AirOutletTemp_sensor.flow_model.T_out_0
    -AirOutletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.C_in.Q(start = AirOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.C_in.P
    (start = AirOutletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirOutletTemp_sensor.flow_model.C_out.Q(start =  -AirOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.C_out.P
    (start = AirOutletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.C_out.h_outflow
    (start = AirOutletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h
    (start = AirOutletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P
    (start = AirOutletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T
    (start = AirOutletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.T(
    start = AirOutletTemp_sensor.T_0);
  Real AirOutletTemp_sensor.T_degC(start = AirOutletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real AirOutletTemp_sensor.T_degF(start = (AirOutletTemp_sensor.T_0+273.15)*1.8
    +32, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.Q(start = airInletFlow_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletFlow_sensor.Xi[1]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.P(
    start = airInletFlow_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.h
    (start = airInletFlow_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletFlow_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletFlow_sensor.state.T(min = 
    190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate airInletFlow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.C_in.Q(start = airInletFlow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.C_in.P(
    start = airInletFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletFlow_sensor.C_out.Q(start =  -airInletFlow_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.C_out.P
    (start = airInletFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.h_in
    (start = airInletFlow_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.h_out
    (start = airInletFlow_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.flow_model.Q(start = airInletFlow_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_in
    (start = airInletFlow_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_out
    (start = airInletFlow_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletFlow_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho_in
    (start = airInletFlow_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho_out
    (start = airInletFlow_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho
    (start = airInletFlow_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletFlow_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    airInletFlow_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletFlow_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletFlow_sensor.flow_model.T_in
    (start = airInletFlow_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletFlow_sensor.flow_model.T_out
    (start = airInletFlow_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletFlow_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletFlow_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletFlow_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletFlow_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletFlow_sensor.flow_model.DP(start = airInletFlow_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power airInletFlow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    airInletFlow_sensor.flow_model.DH(start = airInletFlow_sensor.flow_model.h_out_0
    -airInletFlow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    airInletFlow_sensor.flow_model.DT(start = airInletFlow_sensor.flow_model.T_out_0
    -airInletFlow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.flow_model.C_in.Q(start = airInletFlow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.C_in.P
    (start = airInletFlow_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletFlow_sensor.flow_model.C_out.Q(start =  -airInletFlow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.C_out.P
    (start = airInletFlow_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.C_out.h_outflow
    (start = airInletFlow_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.h
    (start = airInletFlow_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P
    (start = airInletFlow_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletFlow_sensor.flow_model.T
    (start = airInletFlow_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate airInletFlow_sensor.Qv
    (start = airInletFlow_sensor.Qv_0);
  Real airInletFlow_sensor.Q_lm(start = airInletFlow_sensor.Qv_0*60000, 
    nominal = 6000.0);
  Real airInletFlow_sensor.Q_th(start = airInletFlow_sensor.Q_0*3.6, nominal = 
    360.0);
  Real airInletFlow_sensor.Q_lbs(start = airInletFlow_sensor.Q_0*0.453592428, 
    nominal = 45.3592428);
  Real airInletFlow_sensor.Q_Mlbh(start = airInletFlow_sensor.Q_0*
    0.0079366414387, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.Q(start = airInletPress_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletPress_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.P(
    start = airInletPress_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.h
    (start = airInletPress_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletPress_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletPress_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate airInletPress_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.C_in.Q(start = airInletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.C_in.P
    (start = airInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletPress_sensor.C_out.Q(start =  -airInletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.C_out.P
    (start = airInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.h_in
    (start = airInletPress_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.h_out
    (start = airInletPress_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.flow_model.Q(start = airInletPress_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_in
    (start = airInletPress_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_out
    (start = airInletPress_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletPress_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho_in
    (start = airInletPress_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho_out
    (start = airInletPress_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho
    (start = airInletPress_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletPress_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    airInletPress_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletPress_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletPress_sensor.flow_model.T_in
    (start = airInletPress_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletPress_sensor.flow_model.T_out
    (start = airInletPress_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletPress_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletPress_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletPress_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletPress_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletPress_sensor.flow_model.DP(start = airInletPress_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power airInletPress_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    airInletPress_sensor.flow_model.DH(start = airInletPress_sensor.flow_model.h_out_0
    -airInletPress_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    airInletPress_sensor.flow_model.DT(start = airInletPress_sensor.flow_model.T_out_0
    -airInletPress_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.flow_model.C_in.Q(start = airInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.C_in.P
    (start = airInletPress_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletPress_sensor.flow_model.C_out.Q(start =  -airInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.C_out.P
    (start = airInletPress_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.C_out.h_outflow
    (start = airInletPress_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.h
    (start = airInletPress_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P
    (start = airInletPress_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletPress_sensor.flow_model.T
    (start = airInletPress_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real airInletPress_sensor.P_barG(start = airInletPress_sensor.P_0*1E-05-1, 
    nominal = 100000.0);
  Real airInletPress_sensor.P_psiG(start = airInletPress_sensor.P_0*0.000145038-
    14.50377377, nominal = 14.5038);
  Real airInletPress_sensor.P_MPaG(start = airInletPress_sensor.P_0*1E-06-0.1, 
    nominal = 0.09999999999999999);
  Real airInletPress_sensor.P_kPaG(start = airInletPress_sensor.P_0*0.001-100, 
    nominal = 100.0);
  Real airInletPress_sensor.P_barA(start = airInletPress_sensor.P_0*1E-05, 
    nominal = 1.0, unit = "bar");
  Real airInletPress_sensor.P_psiA(start = airInletPress_sensor.P_0*0.000145038,
     nominal = 14.5038);
  Real airInletPress_sensor.P_MPaA(start = airInletPress_sensor.P_0*1E-06, 
    nominal = 0.09999999999999999);
  Real airInletPress_sensor.P_kPaA(start = airInletPress_sensor.P_0*0.001, 
    nominal = 100.0);
  Real airInletPress_sensor.P_inHg(start = airInletPress_sensor.P_0*0.0002953006,
     nominal = 29.530060000000002);
  Real airInletPress_sensor.P_mbar(start = airInletPress_sensor.P_0*0.01, 
    nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.Q(start = airOutletPress_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airOutletPress_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.P(
    start = airOutletPress_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.h
    (start = airOutletPress_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure airOutletPress_sensor.state.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airOutletPress_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate airOutletPress_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.C_in.Q(start = airOutletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.C_in.P
    (start = airOutletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airOutletPress_sensor.C_out.Q(start =  -airOutletPress_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.C_out.P
    (start = airOutletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.h_in
    (start = airOutletPress_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.h_out
    (start = airOutletPress_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.flow_model.Q(start = airOutletPress_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_in
    (start = airOutletPress_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_out
    (start = airOutletPress_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airOutletPress_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho_in
    (start = airOutletPress_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho_out
    (start = airOutletPress_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho
    (start = airOutletPress_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airOutletPress_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    airOutletPress_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airOutletPress_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airOutletPress_sensor.flow_model.T_in
    (start = airOutletPress_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airOutletPress_sensor.flow_model.T_out
    (start = airOutletPress_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure airOutletPress_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airOutletPress_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure airOutletPress_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airOutletPress_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airOutletPress_sensor.flow_model.DP(start = airOutletPress_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power airOutletPress_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    airOutletPress_sensor.flow_model.DH(start = airOutletPress_sensor.flow_model.h_out_0
    -airOutletPress_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    airOutletPress_sensor.flow_model.DT(start = airOutletPress_sensor.flow_model.T_out_0
    -airOutletPress_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.flow_model.C_in.Q(start = airOutletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.C_in.P
    (start = airOutletPress_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airOutletPress_sensor.flow_model.C_out.Q(start =  -airOutletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.C_out.P
    (start = airOutletPress_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.C_out.h_outflow
    (start = airOutletPress_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.h
    (start = airOutletPress_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P
    (start = airOutletPress_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airOutletPress_sensor.flow_model.T
    (start = airOutletPress_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real airOutletPress_sensor.P_barG(start = airOutletPress_sensor.P_0*1E-05-1, 
    nominal = 100000.0);
  Real airOutletPress_sensor.P_psiG(start = airOutletPress_sensor.P_0*
    0.000145038-14.50377377, nominal = 14.5038);
  Real airOutletPress_sensor.P_MPaG(start = airOutletPress_sensor.P_0*1E-06-0.1,
     nominal = 0.09999999999999999);
  Real airOutletPress_sensor.P_kPaG(start = airOutletPress_sensor.P_0*0.001-100,
     nominal = 100.0);
  Real airOutletPress_sensor.P_barA(start = airOutletPress_sensor.P_0*1E-05, 
    nominal = 1.0, unit = "bar");
  Real airOutletPress_sensor.P_psiA(start = airOutletPress_sensor.P_0*
    0.000145038, nominal = 14.5038);
  Real airOutletPress_sensor.P_MPaA(start = airOutletPress_sensor.P_0*1E-06, 
    nominal = 0.09999999999999999);
  Real airOutletPress_sensor.P_kPaA(start = airOutletPress_sensor.P_0*0.001, 
    nominal = 100.0);
  Real airOutletPress_sensor.P_inHg(start = airOutletPress_sensor.P_0*
    0.0002953006, nominal = 29.530060000000002);
  Real airOutletPress_sensor.P_mbar(start = airOutletPress_sensor.P_0*0.01, 
    nominal = 1000.0, unit = "mbar");

// Equations and algorithms

  // Component hot_source
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      hot_source.C_out.P = hot_source.P_out;
      hot_source.C_out.Q = hot_source.Q_out;
      hot_source.C_out.h_outflow = hot_source.h_out;
      hot_source.C_out.Xi_outflow = hot_source.Xi_out;
      hot_source.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (hot_source.P_out, hot_source.h_out, hot_source.Xi_out, 0, 0);
      hot_source.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        hot_source.state_out);
      hot_source.Qv_out = hot_source.Q_out/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        hot_source.state_out);
    // end of extends 

  // Component hot_sink
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      hot_sink.C_in.P = hot_sink.P_in;
      hot_sink.C_in.Q = hot_sink.Q_in;
      inStream(hot_sink.C_in.h_outflow) = hot_sink.h_in;
      inStream(hot_sink.C_in.Xi_outflow) = hot_sink.Xi_in;
      hot_sink.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (hot_sink.P_in, hot_sink.h_in, hot_sink.Xi_in, 0, 0);
      hot_sink.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        hot_sink.state_in);
      hot_sink.Qv_in = hot_sink.Q_in/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        hot_sink.state_in);
      hot_sink.C_in.h_outflow = 0;
      hot_sink.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component CoolingTower.water_inlet_flow
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.water_inlet_flow.h_in = inStream(CoolingTower.water_inlet_flow.C_in.h_outflow);
      CoolingTower.water_inlet_flow.h_out = CoolingTower.water_inlet_flow.C_out.h_outflow;
      CoolingTower.water_inlet_flow.Q = CoolingTower.water_inlet_flow.C_in.Q;
      CoolingTower.water_inlet_flow.P_in = CoolingTower.water_inlet_flow.C_in.P;
      CoolingTower.water_inlet_flow.P_out = CoolingTower.water_inlet_flow.C_out.P;
      CoolingTower.water_inlet_flow.Xi = inStream(CoolingTower.water_inlet_flow.C_in.Xi_outflow);
      CoolingTower.water_inlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.water_inlet_flow.C_in.Xi_outflow = zeros(0);
      CoolingTower.water_inlet_flow.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet_flow.P_in, CoolingTower.water_inlet_flow.h_in,
         CoolingTower.water_inlet_flow.Xi, 0, 0);
      CoolingTower.water_inlet_flow.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet_flow.P_out, CoolingTower.water_inlet_flow.h_out,
         CoolingTower.water_inlet_flow.Xi, 0, 0);
      CoolingTower.water_inlet_flow.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet_flow.state_in);
      CoolingTower.water_inlet_flow.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet_flow.state_out);
      CoolingTower.water_inlet_flow.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_inlet_flow.state_in);
      CoolingTower.water_inlet_flow.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_inlet_flow.state_out);
      CoolingTower.water_inlet_flow.rho = (CoolingTower.water_inlet_flow.rho_in+
        CoolingTower.water_inlet_flow.rho_out)/2;
      CoolingTower.water_inlet_flow.Qv_in = CoolingTower.water_inlet_flow.Q/
        CoolingTower.water_inlet_flow.rho_in;
      CoolingTower.water_inlet_flow.Qv_out =  -CoolingTower.water_inlet_flow.Q/
        CoolingTower.water_inlet_flow.rho_out;
      CoolingTower.water_inlet_flow.Qv = (CoolingTower.water_inlet_flow.Qv_in-
        CoolingTower.water_inlet_flow.Qv_out)/2;
      CoolingTower.water_inlet_flow.P_out-CoolingTower.water_inlet_flow.P_in = 
        CoolingTower.water_inlet_flow.DP;
      CoolingTower.water_inlet_flow.Q*(CoolingTower.water_inlet_flow.h_out-
        CoolingTower.water_inlet_flow.h_in) = CoolingTower.water_inlet_flow.W;
      CoolingTower.water_inlet_flow.h_out-CoolingTower.water_inlet_flow.h_in = 
        CoolingTower.water_inlet_flow.DH;
      CoolingTower.water_inlet_flow.T_out-CoolingTower.water_inlet_flow.T_in = 
        CoolingTower.water_inlet_flow.DT;
      CoolingTower.water_inlet_flow.C_in.Q+CoolingTower.water_inlet_flow.C_out.Q
         = 0;
      CoolingTower.water_inlet_flow.C_out.Xi_outflow = inStream(CoolingTower.water_inlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.water_inlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      CoolingTower.water_inlet_flow.h = CoolingTower.water_inlet_flow.h_in;
      CoolingTower.water_inlet_flow.DH = 0;
    // end of extends 
  equation
    CoolingTower.water_inlet_flow.DP = CoolingTower.water_inlet_flow.DP_input;

  // Component CoolingTower.water_outlet_flow
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.water_outlet_flow.h_in = inStream(CoolingTower.water_outlet_flow.C_in.h_outflow);
      CoolingTower.water_outlet_flow.h_out = CoolingTower.water_outlet_flow.C_out.h_outflow;
      CoolingTower.water_outlet_flow.Q = CoolingTower.water_outlet_flow.C_in.Q;
      CoolingTower.water_outlet_flow.P_in = CoolingTower.water_outlet_flow.C_in.P;
      CoolingTower.water_outlet_flow.P_out = CoolingTower.water_outlet_flow.C_out.P;
      CoolingTower.water_outlet_flow.Xi = inStream(CoolingTower.water_outlet_flow.C_in.Xi_outflow);
      CoolingTower.water_outlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.water_outlet_flow.C_in.Xi_outflow = zeros(0);
      CoolingTower.water_outlet_flow.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet_flow.P_in, CoolingTower.water_outlet_flow.h_in,
         CoolingTower.water_outlet_flow.Xi, 0, 0);
      CoolingTower.water_outlet_flow.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet_flow.P_out, CoolingTower.water_outlet_flow.h_out,
         CoolingTower.water_outlet_flow.Xi, 0, 0);
      CoolingTower.water_outlet_flow.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet_flow.state_in);
      CoolingTower.water_outlet_flow.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet_flow.state_out);
      CoolingTower.water_outlet_flow.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_outlet_flow.state_in);
      CoolingTower.water_outlet_flow.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_outlet_flow.state_out);
      CoolingTower.water_outlet_flow.rho = (CoolingTower.water_outlet_flow.rho_in
        +CoolingTower.water_outlet_flow.rho_out)/2;
      CoolingTower.water_outlet_flow.Qv_in = CoolingTower.water_outlet_flow.Q/
        CoolingTower.water_outlet_flow.rho_in;
      CoolingTower.water_outlet_flow.Qv_out =  -CoolingTower.water_outlet_flow.Q
        /CoolingTower.water_outlet_flow.rho_out;
      CoolingTower.water_outlet_flow.Qv = (CoolingTower.water_outlet_flow.Qv_in-
        CoolingTower.water_outlet_flow.Qv_out)/2;
      CoolingTower.water_outlet_flow.P_out-CoolingTower.water_outlet_flow.P_in
         = CoolingTower.water_outlet_flow.DP;
      CoolingTower.water_outlet_flow.Q*(CoolingTower.water_outlet_flow.h_out-
        CoolingTower.water_outlet_flow.h_in) = CoolingTower.water_outlet_flow.W;
      CoolingTower.water_outlet_flow.h_out-CoolingTower.water_outlet_flow.h_in
         = CoolingTower.water_outlet_flow.DH;
      CoolingTower.water_outlet_flow.T_out-CoolingTower.water_outlet_flow.T_in
         = CoolingTower.water_outlet_flow.DT;
      CoolingTower.water_outlet_flow.C_in.Q+CoolingTower.water_outlet_flow.C_out.Q
         = 0;
      CoolingTower.water_outlet_flow.C_out.Xi_outflow = inStream(
        CoolingTower.water_outlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.water_outlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.water_outlet_flow.P = CoolingTower.water_outlet_flow.P_in;
      CoolingTower.water_outlet_flow.h = CoolingTower.water_outlet_flow.h_in;
      CoolingTower.water_outlet_flow.T = CoolingTower.water_outlet_flow.T_in;
      CoolingTower.water_outlet_flow.DP = 0;
      CoolingTower.water_outlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower.water_outlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.water_outlet.C_out.P = CoolingTower.water_outlet.P_out;
      CoolingTower.water_outlet.C_out.Q = CoolingTower.water_outlet.Q_out;
      CoolingTower.water_outlet.C_out.h_outflow = CoolingTower.water_outlet.h_out;
      CoolingTower.water_outlet.C_out.Xi_outflow = CoolingTower.water_outlet.Xi_out;
      CoolingTower.water_outlet.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet.P_out, CoolingTower.water_outlet.h_out, 
        CoolingTower.water_outlet.Xi_out, 0, 0);
      CoolingTower.water_outlet.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet.state_out);
      CoolingTower.water_outlet.Qv_out = CoolingTower.water_outlet.Q_out/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.water_outlet.state_out);
    // end of extends 

  // Component CoolingTower.water_inlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.water_inlet.C_in.P = CoolingTower.water_inlet.P_in;
      CoolingTower.water_inlet.C_in.Q = CoolingTower.water_inlet.Q_in;
      inStream(CoolingTower.water_inlet.C_in.h_outflow) = CoolingTower.water_inlet.h_in;
      inStream(CoolingTower.water_inlet.C_in.Xi_outflow) = CoolingTower.water_inlet.Xi_in;
      CoolingTower.water_inlet.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet.P_in, CoolingTower.water_inlet.h_in, 
        CoolingTower.water_inlet.Xi_in, 0, 0);
      CoolingTower.water_inlet.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet.state_in);
      CoolingTower.water_inlet.Qv_in = CoolingTower.water_inlet.Q_in/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.water_inlet.state_in);
      CoolingTower.water_inlet.C_in.h_outflow = 0;
      CoolingTower.water_inlet.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component CoolingTower.air_inlet_flow
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.air_inlet_flow.h_in = inStream(CoolingTower.air_inlet_flow.C_in.h_outflow);
      CoolingTower.air_inlet_flow.h_out = CoolingTower.air_inlet_flow.C_out.h_outflow;
      CoolingTower.air_inlet_flow.Q = CoolingTower.air_inlet_flow.C_in.Q;
      CoolingTower.air_inlet_flow.P_in = CoolingTower.air_inlet_flow.C_in.P;
      CoolingTower.air_inlet_flow.P_out = CoolingTower.air_inlet_flow.C_out.P;
      CoolingTower.air_inlet_flow.Xi = inStream(CoolingTower.air_inlet_flow.C_in.Xi_outflow);
      CoolingTower.air_inlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.air_inlet_flow.C_in.Xi_outflow = zeros(1);
      CoolingTower.air_inlet_flow.state_in = setState_phX_Unique7(
        CoolingTower.air_inlet_flow.P_in, CoolingTower.air_inlet_flow.h_in, 
        CoolingTower.air_inlet_flow.Xi);
      CoolingTower.air_inlet_flow.state_out = setState_phX_Unique7(
        CoolingTower.air_inlet_flow.P_out, CoolingTower.air_inlet_flow.h_out, 
        CoolingTower.air_inlet_flow.Xi);
      CoolingTower.air_inlet_flow.T_in = temperature_Unique25(
        CoolingTower.air_inlet_flow.state_in);
      CoolingTower.air_inlet_flow.T_out = temperature_Unique25(
        CoolingTower.air_inlet_flow.state_out);
      CoolingTower.air_inlet_flow.rho_in = density_Unique26(
        CoolingTower.air_inlet_flow.state_in);
      CoolingTower.air_inlet_flow.rho_out = density_Unique26(
        CoolingTower.air_inlet_flow.state_out);
      CoolingTower.air_inlet_flow.rho = (CoolingTower.air_inlet_flow.rho_in+
        CoolingTower.air_inlet_flow.rho_out)/2;
      CoolingTower.air_inlet_flow.Qv_in = CoolingTower.air_inlet_flow.Q/
        CoolingTower.air_inlet_flow.rho_in;
      CoolingTower.air_inlet_flow.Qv_out =  -CoolingTower.air_inlet_flow.Q/
        CoolingTower.air_inlet_flow.rho_out;
      CoolingTower.air_inlet_flow.Qv = (CoolingTower.air_inlet_flow.Qv_in-
        CoolingTower.air_inlet_flow.Qv_out)/2;
      CoolingTower.air_inlet_flow.P_out-CoolingTower.air_inlet_flow.P_in = 
        CoolingTower.air_inlet_flow.DP;
      CoolingTower.air_inlet_flow.Q*(CoolingTower.air_inlet_flow.h_out-
        CoolingTower.air_inlet_flow.h_in) = CoolingTower.air_inlet_flow.W;
      CoolingTower.air_inlet_flow.h_out-CoolingTower.air_inlet_flow.h_in = 
        CoolingTower.air_inlet_flow.DH;
      CoolingTower.air_inlet_flow.T_out-CoolingTower.air_inlet_flow.T_in = 
        CoolingTower.air_inlet_flow.DT;
      CoolingTower.air_inlet_flow.C_in.Q+CoolingTower.air_inlet_flow.C_out.Q = 0;
      CoolingTower.air_inlet_flow.C_out.Xi_outflow = inStream(CoolingTower.air_inlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.air_inlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.air_inlet_flow.P = CoolingTower.air_inlet_flow.P_in;
      CoolingTower.air_inlet_flow.h = CoolingTower.air_inlet_flow.h_in;
      CoolingTower.air_inlet_flow.T = CoolingTower.air_inlet_flow.T_in;
      CoolingTower.air_inlet_flow.DP = 0;
      CoolingTower.air_inlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower.air_inlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.air_inlet.C_in.P = CoolingTower.air_inlet.P_in;
      CoolingTower.air_inlet.C_in.Q = CoolingTower.air_inlet.Q_in;
      inStream(CoolingTower.air_inlet.C_in.h_outflow) = CoolingTower.air_inlet.h_in;
      inStream(CoolingTower.air_inlet.C_in.Xi_outflow) = CoolingTower.air_inlet.Xi_in;
      CoolingTower.air_inlet.state_in = setState_phX_Unique7(CoolingTower.air_inlet.P_in,
         CoolingTower.air_inlet.h_in, CoolingTower.air_inlet.Xi_in);
      CoolingTower.air_inlet.T_in = temperature_Unique25(
        CoolingTower.air_inlet.state_in);
      CoolingTower.air_inlet.Qv_in = CoolingTower.air_inlet.Q_in/
        density_Unique26(
        CoolingTower.air_inlet.state_in);
      CoolingTower.air_inlet.C_in.h_outflow = 0;
      CoolingTower.air_inlet.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    CoolingTower.air_inlet.Xi_in[1] = massFraction_pTphi_Unique28(
      CoolingTower.air_inlet.P_in, CoolingTower.air_inlet.T_in, CoolingTower.air_inlet.relative_humidity);

  // Component CoolingTower.air_outlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.air_outlet.C_out.P = CoolingTower.air_outlet.P_out;
      CoolingTower.air_outlet.C_out.Q = CoolingTower.air_outlet.Q_out;
      CoolingTower.air_outlet.C_out.h_outflow = CoolingTower.air_outlet.h_out;
      CoolingTower.air_outlet.C_out.Xi_outflow = CoolingTower.air_outlet.Xi_out;
      CoolingTower.air_outlet.state_out = setState_phX_Unique7(CoolingTower.air_outlet.P_out,
         CoolingTower.air_outlet.h_out, CoolingTower.air_outlet.Xi_out);
      CoolingTower.air_outlet.T_out = temperature_Unique25(
        CoolingTower.air_outlet.state_out);
      CoolingTower.air_outlet.Qv_out = CoolingTower.air_outlet.Q_out/
        density_Unique26(
        CoolingTower.air_outlet.state_out);
    // end of extends 
  equation
    CoolingTower.air_outlet.Xi_out[1] = massFraction_pTphi_Unique28(
      CoolingTower.air_outlet.P_out, CoolingTower.air_outlet.T_out, 
      CoolingTower.air_outlet.relative_humidity);

  // Component CoolingTower.air_outlet_flow
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.air_outlet_flow.h_in = inStream(CoolingTower.air_outlet_flow.C_in.h_outflow);
      CoolingTower.air_outlet_flow.h_out = CoolingTower.air_outlet_flow.C_out.h_outflow;
      CoolingTower.air_outlet_flow.Q = CoolingTower.air_outlet_flow.C_in.Q;
      CoolingTower.air_outlet_flow.P_in = CoolingTower.air_outlet_flow.C_in.P;
      CoolingTower.air_outlet_flow.P_out = CoolingTower.air_outlet_flow.C_out.P;
      CoolingTower.air_outlet_flow.Xi = inStream(CoolingTower.air_outlet_flow.C_in.Xi_outflow);
      CoolingTower.air_outlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.air_outlet_flow.C_in.Xi_outflow = zeros(1);
      CoolingTower.air_outlet_flow.state_in = setState_phX_Unique7(
        CoolingTower.air_outlet_flow.P_in, CoolingTower.air_outlet_flow.h_in, 
        CoolingTower.air_outlet_flow.Xi);
      CoolingTower.air_outlet_flow.state_out = setState_phX_Unique7(
        CoolingTower.air_outlet_flow.P_out, CoolingTower.air_outlet_flow.h_out, 
        CoolingTower.air_outlet_flow.Xi);
      CoolingTower.air_outlet_flow.T_in = temperature_Unique25(
        CoolingTower.air_outlet_flow.state_in);
      CoolingTower.air_outlet_flow.T_out = temperature_Unique25(
        CoolingTower.air_outlet_flow.state_out);
      CoolingTower.air_outlet_flow.rho_in = density_Unique26(
        CoolingTower.air_outlet_flow.state_in);
      CoolingTower.air_outlet_flow.rho_out = density_Unique26(
        CoolingTower.air_outlet_flow.state_out);
      CoolingTower.air_outlet_flow.rho = (CoolingTower.air_outlet_flow.rho_in+
        CoolingTower.air_outlet_flow.rho_out)/2;
      CoolingTower.air_outlet_flow.Qv_in = CoolingTower.air_outlet_flow.Q/
        CoolingTower.air_outlet_flow.rho_in;
      CoolingTower.air_outlet_flow.Qv_out =  -CoolingTower.air_outlet_flow.Q/
        CoolingTower.air_outlet_flow.rho_out;
      CoolingTower.air_outlet_flow.Qv = (CoolingTower.air_outlet_flow.Qv_in-
        CoolingTower.air_outlet_flow.Qv_out)/2;
      CoolingTower.air_outlet_flow.P_out-CoolingTower.air_outlet_flow.P_in = 
        CoolingTower.air_outlet_flow.DP;
      CoolingTower.air_outlet_flow.Q*(CoolingTower.air_outlet_flow.h_out-
        CoolingTower.air_outlet_flow.h_in) = CoolingTower.air_outlet_flow.W;
      CoolingTower.air_outlet_flow.h_out-CoolingTower.air_outlet_flow.h_in = 
        CoolingTower.air_outlet_flow.DH;
      CoolingTower.air_outlet_flow.T_out-CoolingTower.air_outlet_flow.T_in = 
        CoolingTower.air_outlet_flow.DT;
      CoolingTower.air_outlet_flow.C_in.Q+CoolingTower.air_outlet_flow.C_out.Q
         = 0;
      CoolingTower.air_outlet_flow.C_out.Xi_outflow = inStream(CoolingTower.air_outlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.air_outlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.air_outlet_flow.P = CoolingTower.air_outlet_flow.P_in;
      CoolingTower.air_outlet_flow.h = CoolingTower.air_outlet_flow.h_in;
      CoolingTower.air_outlet_flow.T = CoolingTower.air_outlet_flow.T_in;
      CoolingTower.air_outlet_flow.DP = 0;
      CoolingTower.air_outlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower
  // class MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppeTrial
  equation
    CoolingTower.air_inlet_flow.P_out = CoolingTower.Pin[1];
    CoolingTower.air_inlet_flow.Q = CoolingTower.Q_cold_in;
    CoolingTower.air_inlet_connector.h_outflow = CoolingTower.i_initial;
    CoolingTower.air_inlet.T_in = CoolingTower.T_cold_in;
    CoolingTower.w_in = CoolingTower.air_inlet.relative_humidity*
      xsaturation_Unique37(
      CoolingTower.air_inlet_flow.state_in);
    CoolingTower.air_outlet_flow.P_in = CoolingTower.Pin[1];
    CoolingTower.air_outlet_flow.Q = CoolingTower.Q_cold_out;
    CoolingTower.air_outlet_connector.h_outflow = CoolingTower.i_final;
    CoolingTower.air_outlet.T_out = CoolingTower.T_cold_out;
    CoolingTower.w_out = CoolingTower.air_outlet.relative_humidity*
      xsaturation_Unique37(
      CoolingTower.air_outlet_flow.state_out);
    CoolingTower.water_inlet_flow.P_out = CoolingTower.Pin[1];
    CoolingTower.water_inlet_flow.Q = CoolingTower.Q_hot_in;
    CoolingTower.water_inlet_flow.T_in = CoolingTower.T_hot_in;
    CoolingTower.cp[1] = Modelica.Media.Water.WaterIF97_ph.specificHeatCapacityCp_Unique38
      (
      CoolingTower.water_inlet_flow.state_in);
    CoolingTower.water_outlet_flow.P_out = CoolingTower.Pin[1];
    CoolingTower.water_outlet_flow.Q = CoolingTower.Q_hot_out;
    CoolingTower.water_outlet_flow.T_in = CoolingTower.T_hot_out;
    CoolingTower.deltaT = (CoolingTower.T_hot_in-CoolingTower.T_hot_out)/(
      CoolingTower.N_step-1);
    CoolingTower.deltacp = (CoolingTower.cp[CoolingTower.N_step]-CoolingTower.cp
      [1])/(CoolingTower.N_step-1);
    for n in (1:CoolingTower.N_step) loop
      CoolingTower.Tw[n] = CoolingTower.T_hot_in+(CoolingTower.T_hot_out-
        CoolingTower.T_hot_in)*(n-1)/(CoolingTower.N_step-1);
      CoolingTower.Ta[n] = CoolingTower.T_cold_in+(CoolingTower.T_cold_out-
        CoolingTower.T_cold_in)*(n-1)/(CoolingTower.N_step-1);
    end for;
    for n in (1:CoolingTower.N_step-1) loop
      CoolingTower.w[n+1] = CoolingTower.w[n]+CoolingTower.deltaT*
        MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppeTrial.f
        (CoolingTower.Tw[n], CoolingTower.w[n], CoolingTower.i[n], 
        CoolingTower.cp[n], CoolingTower.Qw[n], CoolingTower.Qa[n], 
        CoolingTower.Pin[n], CoolingTower.Lef[n]);
      CoolingTower.i[n+1] = CoolingTower.i[n]+CoolingTower.deltaT*
        MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppeTrial.g
        (CoolingTower.Tw[n], CoolingTower.w[n], CoolingTower.i[n], 
        CoolingTower.cp[n], CoolingTower.Qw[n], CoolingTower.Qa[n], 
        CoolingTower.Pin[n], CoolingTower.Lef[n]);
      CoolingTower.M[n+1] = CoolingTower.M[n]+CoolingTower.deltaT*
        MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppeTrial.h
        (CoolingTower.Tw[n], CoolingTower.w[n], CoolingTower.i[n], 
        CoolingTower.cp[n], CoolingTower.Pin[n], CoolingTower.Lef[n]);
      CoolingTower.Qw[n+1] = CoolingTower.Qw[n]-CoolingTower.Qa[n]*(
        CoolingTower.w[n+1]-CoolingTower.w[n]);
      CoolingTower.Qa[n+1] = CoolingTower.Qa[n]*(1+CoolingTower.w[n+1]);
      CoolingTower.Lef[n+1] = 0.9077990913*((xsaturation_pT_Unique39(
        CoolingTower.Pin[n+1], CoolingTower.Ta[n+1])+0.622)/(CoolingTower.w[n+1]
        +0.622)-1)/log((xsaturation_pT_Unique39(CoolingTower.Pin[n+1], 
        CoolingTower.Ta[n+1])+0.622)/(CoolingTower.w[n+1]+0.622));
      CoolingTower.cp[n+1] = CoolingTower.cp[n]+CoolingTower.deltacp*
        CoolingTower.N_step;
      CoolingTower.Pin[n+1] = CoolingTower.Pin[n];
    end for;
    CoolingTower.w[1] = CoolingTower.w_in;
    CoolingTower.w[CoolingTower.N_step] = CoolingTower.w_out;
    CoolingTower.i[1] = CoolingTower.i_initial;
    CoolingTower.i[CoolingTower.N_step] = CoolingTower.i_final;
    CoolingTower.M[1] = CoolingTower.hd*CoolingTower.Afr/CoolingTower.Qw[1];
    CoolingTower.M[CoolingTower.N_step] = CoolingTower.hd*CoolingTower.Afr/
      CoolingTower.Qw[CoolingTower.N_step];
    CoolingTower.Qw[1] = CoolingTower.Q_hot_in;
    CoolingTower.Qw[CoolingTower.N_step] = CoolingTower.Q_hot_out;
    CoolingTower.Qa[1] = CoolingTower.Q_cold_in;
    CoolingTower.Qa[CoolingTower.N_step] = CoolingTower.Q_cold_out;
    CoolingTower.Lef[1] = 0.9077990913*((xsaturation_pT_Unique39(
      CoolingTower.Pin[1], CoolingTower.Ta[1])+0.622)/(CoolingTower.w[1]+0.622)-1)
      /log((xsaturation_pT_Unique39(CoolingTower.Pin[1], CoolingTower.Ta[1])+
      0.622)/(CoolingTower.w[1]+0.622));
    CoolingTower.rho_air_inlet = CoolingTower.air_inlet_flow.rho_in;
    CoolingTower.rho_air_outlet = CoolingTower.air_outlet_flow.rho_out;
    0.25*(CoolingTower.rho_air_inlet+CoolingTower.rho_air_outlet)*
      CoolingTower.Cf*abs(CoolingTower.V_inlet)*CoolingTower.V_inlet = (
      CoolingTower.rho_air_inlet-CoolingTower.rho_air_outlet)*CoolingTower.gr*
      CoolingTower.Lfi;
    CoolingTower.Q_cold_in = CoolingTower.V_inlet*CoolingTower.Afr*
      CoolingTower.rho_air_inlet*(1-CoolingTower.air_inlet.Xi_in[1]);
    CoolingTower.air_inlet_flow.C_out.P = CoolingTower.air_inlet.C_in.P;
    CoolingTower.air_inlet.C_in.Q+CoolingTower.air_inlet_flow.C_out.Q = 0.0;
    CoolingTower.air_inlet_flow.C_in.P = CoolingTower.air_inlet_connector.P;
    CoolingTower.air_inlet_connector.Q-CoolingTower.air_inlet_flow.C_in.Q = 0.0;
    CoolingTower.air_outlet_flow.C_in.P = CoolingTower.air_outlet.C_out.P;
    CoolingTower.air_outlet.C_out.Q+CoolingTower.air_outlet_flow.C_in.Q = 0.0;
    CoolingTower.air_outlet_flow.C_out.P = CoolingTower.air_outlet_connector.P;
    CoolingTower.air_outlet_connector.Q-CoolingTower.air_outlet_flow.C_out.Q = 
      0.0;
    CoolingTower.water_inlet_flow.C_out.P = CoolingTower.water_inlet.C_in.P;
    CoolingTower.water_inlet.C_in.Q+CoolingTower.water_inlet_flow.C_out.Q = 0.0;
    CoolingTower.water_inlet_flow.C_in.P = CoolingTower.water_inlet_connector.P;
    CoolingTower.water_inlet_connector.Q-CoolingTower.water_inlet_flow.C_in.Q = 
      0.0;
    CoolingTower.water_outlet_flow.C_in.P = CoolingTower.water_outlet.C_out.P;
    CoolingTower.water_outlet.C_out.Q+CoolingTower.water_outlet_flow.C_in.Q = 
      0.0;
    CoolingTower.water_outlet_flow.C_out.P = CoolingTower.water_outlet_connector.P;
    CoolingTower.water_outlet_connector.Q-CoolingTower.water_outlet_flow.C_out.Q
       = 0.0;

  // Component cold_source
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      cold_source.C_out.P = cold_source.P_out;
      cold_source.C_out.Q = cold_source.Q_out;
      cold_source.C_out.h_outflow = cold_source.h_out;
      cold_source.C_out.Xi_outflow = cold_source.Xi_out;
      cold_source.state_out = setState_phX_Unique7(cold_source.P_out, 
        cold_source.h_out, cold_source.Xi_out);
      cold_source.T_out = temperature_Unique25(
        cold_source.state_out);
      cold_source.Qv_out = cold_source.Q_out/density_Unique26(
        cold_source.state_out);
    // end of extends 
  equation
    cold_source.Xi_out[1] = massFraction_pTphi_Unique28(cold_source.P_out, 
      cold_source.T_out, cold_source.relative_humidity);

  // Component cold_sink
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      cold_sink.C_in.P = cold_sink.P_in;
      cold_sink.C_in.Q = cold_sink.Q_in;
      inStream(cold_sink.C_in.h_outflow) = cold_sink.h_in;
      inStream(cold_sink.C_in.Xi_outflow) = cold_sink.Xi_in;
      cold_sink.state_in = setState_phX_Unique7(cold_sink.P_in, cold_sink.h_in, 
        cold_sink.Xi_in);
      cold_sink.T_in = temperature_Unique25(
        cold_sink.state_in);
      cold_sink.Qv_in = cold_sink.Q_in/density_Unique26(
        cold_sink.state_in);
      cold_sink.C_in.h_outflow = 0;
      cold_sink.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    cold_sink.Xi_in[1] = massFraction_pTphi_Unique28(cold_sink.P_in, 
      cold_sink.T_in, cold_sink.relative_humidity);

  // Component waterInletPress_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      waterInletPress_sensor.flow_model.h_in = inStream(waterInletPress_sensor.flow_model.C_in.h_outflow);
      waterInletPress_sensor.flow_model.h_out = waterInletPress_sensor.flow_model.C_out.h_outflow;
      waterInletPress_sensor.flow_model.Q = waterInletPress_sensor.flow_model.C_in.Q;
      waterInletPress_sensor.flow_model.P_in = waterInletPress_sensor.flow_model.C_in.P;
      waterInletPress_sensor.flow_model.P_out = waterInletPress_sensor.flow_model.C_out.P;
      waterInletPress_sensor.flow_model.Xi = inStream(waterInletPress_sensor.flow_model.C_in.Xi_outflow);
      waterInletPress_sensor.flow_model.C_in.h_outflow = 1000000.0;
      waterInletPress_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      waterInletPress_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletPress_sensor.flow_model.P_in, waterInletPress_sensor.flow_model.h_in,
         waterInletPress_sensor.flow_model.Xi, 0, 0);
      waterInletPress_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletPress_sensor.flow_model.P_out, waterInletPress_sensor.flow_model.h_out,
         waterInletPress_sensor.flow_model.Xi, 0, 0);
      waterInletPress_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletPress_sensor.flow_model.state_in);
      waterInletPress_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletPress_sensor.flow_model.state_out);
      waterInletPress_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletPress_sensor.flow_model.state_in);
      waterInletPress_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletPress_sensor.flow_model.state_out);
      waterInletPress_sensor.flow_model.rho = (waterInletPress_sensor.flow_model.rho_in
        +waterInletPress_sensor.flow_model.rho_out)/2;
      waterInletPress_sensor.flow_model.Qv_in = waterInletPress_sensor.flow_model.Q
        /waterInletPress_sensor.flow_model.rho_in;
      waterInletPress_sensor.flow_model.Qv_out =  -waterInletPress_sensor.flow_model.Q
        /waterInletPress_sensor.flow_model.rho_out;
      waterInletPress_sensor.flow_model.Qv = (waterInletPress_sensor.flow_model.Qv_in
        -waterInletPress_sensor.flow_model.Qv_out)/2;
      waterInletPress_sensor.flow_model.P_out-waterInletPress_sensor.flow_model.P_in
         = waterInletPress_sensor.flow_model.DP;
      waterInletPress_sensor.flow_model.Q*(waterInletPress_sensor.flow_model.h_out
        -waterInletPress_sensor.flow_model.h_in) = waterInletPress_sensor.flow_model.W;
      waterInletPress_sensor.flow_model.h_out-waterInletPress_sensor.flow_model.h_in
         = waterInletPress_sensor.flow_model.DH;
      waterInletPress_sensor.flow_model.T_out-waterInletPress_sensor.flow_model.T_in
         = waterInletPress_sensor.flow_model.DT;
      waterInletPress_sensor.flow_model.C_in.Q+waterInletPress_sensor.flow_model.C_out.Q
         = 0;
      waterInletPress_sensor.flow_model.C_out.Xi_outflow = inStream(
        waterInletPress_sensor.flow_model.C_in.Xi_outflow);
      assert(waterInletPress_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      waterInletPress_sensor.flow_model.P = waterInletPress_sensor.flow_model.P_in;
      waterInletPress_sensor.flow_model.h = waterInletPress_sensor.flow_model.h_in;
      waterInletPress_sensor.flow_model.T = waterInletPress_sensor.flow_model.T_in;
      waterInletPress_sensor.flow_model.DP = 0;
      waterInletPress_sensor.flow_model.DH = 0;
    // end of extends 

  // Component waterInletPress_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not waterInletPress_sensor.faulty_flow_rate) then 
        waterInletPress_sensor.mass_flow_rate_bias = 0;
      end if;
      waterInletPress_sensor.P = waterInletPress_sensor.C_in.P;
      waterInletPress_sensor.Q = waterInletPress_sensor.C_in.Q+waterInletPress_sensor.mass_flow_rate_bias;
      waterInletPress_sensor.Xi = inStream(waterInletPress_sensor.C_in.Xi_outflow);
      waterInletPress_sensor.h = inStream(waterInletPress_sensor.C_in.h_outflow);
      waterInletPress_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletPress_sensor.P, waterInletPress_sensor.h, waterInletPress_sensor.Xi,
         0, 0);
      assert(waterInletPress_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      waterInletPress_sensor.P_barA = waterInletPress_sensor.P*1E-05;
      waterInletPress_sensor.P_psiA = waterInletPress_sensor.P*0.000145038;
      waterInletPress_sensor.P_MPaA = waterInletPress_sensor.P*1E-06;
      waterInletPress_sensor.P_kPaA = waterInletPress_sensor.P*0.001;
      waterInletPress_sensor.P_barG = waterInletPress_sensor.P_barA-1;
      waterInletPress_sensor.P_psiG = waterInletPress_sensor.P_psiA-14.50377377;
      waterInletPress_sensor.P_MPaG = waterInletPress_sensor.P_MPaA-0.1;
      waterInletPress_sensor.P_kPaG = waterInletPress_sensor.P_kPaA-100;
      waterInletPress_sensor.P_mbar = waterInletPress_sensor.P*0.01;
      waterInletPress_sensor.P_inHg = waterInletPress_sensor.P*0.0002953006;
    // end of extends 
  equation
    waterInletPress_sensor.flow_model.C_in.P = waterInletPress_sensor.C_in.P;
    waterInletPress_sensor.C_in.Q-waterInletPress_sensor.flow_model.C_in.Q = 0.0;
    waterInletPress_sensor.flow_model.C_out.P = waterInletPress_sensor.C_out.P;
    waterInletPress_sensor.C_out.Q-waterInletPress_sensor.flow_model.C_out.Q = 
      0.0;

  // Component AirInletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirInletTemp_sensor.flow_model.h_in = inStream(AirInletTemp_sensor.flow_model.C_in.h_outflow);
      AirInletTemp_sensor.flow_model.h_out = AirInletTemp_sensor.flow_model.C_out.h_outflow;
      AirInletTemp_sensor.flow_model.Q = AirInletTemp_sensor.flow_model.C_in.Q;
      AirInletTemp_sensor.flow_model.P_in = AirInletTemp_sensor.flow_model.C_in.P;
      AirInletTemp_sensor.flow_model.P_out = AirInletTemp_sensor.flow_model.C_out.P;
      AirInletTemp_sensor.flow_model.Xi = inStream(AirInletTemp_sensor.flow_model.C_in.Xi_outflow);
      AirInletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirInletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirInletTemp_sensor.flow_model.state_in = setState_phX_Unique7(
        AirInletTemp_sensor.flow_model.P_in, AirInletTemp_sensor.flow_model.h_in,
         AirInletTemp_sensor.flow_model.Xi);
      AirInletTemp_sensor.flow_model.state_out = setState_phX_Unique7(
        AirInletTemp_sensor.flow_model.P_out, AirInletTemp_sensor.flow_model.h_out,
         AirInletTemp_sensor.flow_model.Xi);
      AirInletTemp_sensor.flow_model.T_in = temperature_Unique25(
        AirInletTemp_sensor.flow_model.state_in);
      AirInletTemp_sensor.flow_model.T_out = temperature_Unique25(
        AirInletTemp_sensor.flow_model.state_out);
      AirInletTemp_sensor.flow_model.rho_in = density_Unique26(
        AirInletTemp_sensor.flow_model.state_in);
      AirInletTemp_sensor.flow_model.rho_out = density_Unique26(
        AirInletTemp_sensor.flow_model.state_out);
      AirInletTemp_sensor.flow_model.rho = (AirInletTemp_sensor.flow_model.rho_in
        +AirInletTemp_sensor.flow_model.rho_out)/2;
      AirInletTemp_sensor.flow_model.Qv_in = AirInletTemp_sensor.flow_model.Q/
        AirInletTemp_sensor.flow_model.rho_in;
      AirInletTemp_sensor.flow_model.Qv_out =  -AirInletTemp_sensor.flow_model.Q
        /AirInletTemp_sensor.flow_model.rho_out;
      AirInletTemp_sensor.flow_model.Qv = (AirInletTemp_sensor.flow_model.Qv_in-
        AirInletTemp_sensor.flow_model.Qv_out)/2;
      AirInletTemp_sensor.flow_model.P_out-AirInletTemp_sensor.flow_model.P_in
         = AirInletTemp_sensor.flow_model.DP;
      AirInletTemp_sensor.flow_model.Q*(AirInletTemp_sensor.flow_model.h_out-
        AirInletTemp_sensor.flow_model.h_in) = AirInletTemp_sensor.flow_model.W;
      AirInletTemp_sensor.flow_model.h_out-AirInletTemp_sensor.flow_model.h_in
         = AirInletTemp_sensor.flow_model.DH;
      AirInletTemp_sensor.flow_model.T_out-AirInletTemp_sensor.flow_model.T_in
         = AirInletTemp_sensor.flow_model.DT;
      AirInletTemp_sensor.flow_model.C_in.Q+AirInletTemp_sensor.flow_model.C_out.Q
         = 0;
      AirInletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirInletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(AirInletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirInletTemp_sensor.flow_model.P = AirInletTemp_sensor.flow_model.P_in;
      AirInletTemp_sensor.flow_model.h = AirInletTemp_sensor.flow_model.h_in;
      AirInletTemp_sensor.flow_model.T = AirInletTemp_sensor.flow_model.T_in;
      AirInletTemp_sensor.flow_model.DP = 0;
      AirInletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirInletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirInletTemp_sensor.faulty_flow_rate) then 
        AirInletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      AirInletTemp_sensor.P = AirInletTemp_sensor.C_in.P;
      AirInletTemp_sensor.Q = AirInletTemp_sensor.C_in.Q+AirInletTemp_sensor.mass_flow_rate_bias;
      AirInletTemp_sensor.Xi = inStream(AirInletTemp_sensor.C_in.Xi_outflow);
      AirInletTemp_sensor.h = inStream(AirInletTemp_sensor.C_in.h_outflow);
      AirInletTemp_sensor.state = setState_phX_Unique7(AirInletTemp_sensor.P, 
        AirInletTemp_sensor.h, AirInletTemp_sensor.Xi);
      assert(AirInletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      AirInletTemp_sensor.T = AirInletTemp_sensor.flow_model.T;
      AirInletTemp_sensor.T_degC+273.15 = AirInletTemp_sensor.T;
      AirInletTemp_sensor.T_degF = AirInletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    AirInletTemp_sensor.flow_model.C_in.P = AirInletTemp_sensor.C_in.P;
    AirInletTemp_sensor.C_in.Q-AirInletTemp_sensor.flow_model.C_in.Q = 0.0;
    AirInletTemp_sensor.flow_model.C_out.P = AirInletTemp_sensor.C_out.P;
    AirInletTemp_sensor.C_out.Q-AirInletTemp_sensor.flow_model.C_out.Q = 0.0;

  // Component waterInletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      waterInletTemp_sensor.flow_model.h_in = inStream(waterInletTemp_sensor.flow_model.C_in.h_outflow);
      waterInletTemp_sensor.flow_model.h_out = waterInletTemp_sensor.flow_model.C_out.h_outflow;
      waterInletTemp_sensor.flow_model.Q = waterInletTemp_sensor.flow_model.C_in.Q;
      waterInletTemp_sensor.flow_model.P_in = waterInletTemp_sensor.flow_model.C_in.P;
      waterInletTemp_sensor.flow_model.P_out = waterInletTemp_sensor.flow_model.C_out.P;
      waterInletTemp_sensor.flow_model.Xi = inStream(waterInletTemp_sensor.flow_model.C_in.Xi_outflow);
      waterInletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      waterInletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      waterInletTemp_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletTemp_sensor.flow_model.P_in, waterInletTemp_sensor.flow_model.h_in,
         waterInletTemp_sensor.flow_model.Xi, 0, 0);
      waterInletTemp_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletTemp_sensor.flow_model.P_out, waterInletTemp_sensor.flow_model.h_out,
         waterInletTemp_sensor.flow_model.Xi, 0, 0);
      waterInletTemp_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletTemp_sensor.flow_model.state_in);
      waterInletTemp_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletTemp_sensor.flow_model.state_out);
      waterInletTemp_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletTemp_sensor.flow_model.state_in);
      waterInletTemp_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletTemp_sensor.flow_model.state_out);
      waterInletTemp_sensor.flow_model.rho = (waterInletTemp_sensor.flow_model.rho_in
        +waterInletTemp_sensor.flow_model.rho_out)/2;
      waterInletTemp_sensor.flow_model.Qv_in = waterInletTemp_sensor.flow_model.Q
        /waterInletTemp_sensor.flow_model.rho_in;
      waterInletTemp_sensor.flow_model.Qv_out =  -waterInletTemp_sensor.flow_model.Q
        /waterInletTemp_sensor.flow_model.rho_out;
      waterInletTemp_sensor.flow_model.Qv = (waterInletTemp_sensor.flow_model.Qv_in
        -waterInletTemp_sensor.flow_model.Qv_out)/2;
      waterInletTemp_sensor.flow_model.P_out-waterInletTemp_sensor.flow_model.P_in
         = waterInletTemp_sensor.flow_model.DP;
      waterInletTemp_sensor.flow_model.Q*(waterInletTemp_sensor.flow_model.h_out
        -waterInletTemp_sensor.flow_model.h_in) = waterInletTemp_sensor.flow_model.W;
      waterInletTemp_sensor.flow_model.h_out-waterInletTemp_sensor.flow_model.h_in
         = waterInletTemp_sensor.flow_model.DH;
      waterInletTemp_sensor.flow_model.T_out-waterInletTemp_sensor.flow_model.T_in
         = waterInletTemp_sensor.flow_model.DT;
      waterInletTemp_sensor.flow_model.C_in.Q+waterInletTemp_sensor.flow_model.C_out.Q
         = 0;
      waterInletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        waterInletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(waterInletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      waterInletTemp_sensor.flow_model.P = waterInletTemp_sensor.flow_model.P_in;
      waterInletTemp_sensor.flow_model.h = waterInletTemp_sensor.flow_model.h_in;
      waterInletTemp_sensor.flow_model.T = waterInletTemp_sensor.flow_model.T_in;
      waterInletTemp_sensor.flow_model.DP = 0;
      waterInletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component waterInletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not waterInletTemp_sensor.faulty_flow_rate) then 
        waterInletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      waterInletTemp_sensor.P = waterInletTemp_sensor.C_in.P;
      waterInletTemp_sensor.Q = waterInletTemp_sensor.C_in.Q+waterInletTemp_sensor.mass_flow_rate_bias;
      waterInletTemp_sensor.Xi = inStream(waterInletTemp_sensor.C_in.Xi_outflow);
      waterInletTemp_sensor.h = inStream(waterInletTemp_sensor.C_in.h_outflow);
      waterInletTemp_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletTemp_sensor.P, waterInletTemp_sensor.h, waterInletTemp_sensor.Xi,
         0, 0);
      assert(waterInletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      waterInletTemp_sensor.T = waterInletTemp_sensor.flow_model.T;
      waterInletTemp_sensor.T_degC+273.15 = waterInletTemp_sensor.T;
      waterInletTemp_sensor.T_degF = waterInletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    waterInletTemp_sensor.flow_model.C_in.P = waterInletTemp_sensor.C_in.P;
    waterInletTemp_sensor.C_in.Q-waterInletTemp_sensor.flow_model.C_in.Q = 0.0;
    waterInletTemp_sensor.flow_model.C_out.P = waterInletTemp_sensor.C_out.P;
    waterInletTemp_sensor.C_out.Q-waterInletTemp_sensor.flow_model.C_out.Q = 0.0;

  // Component WaterOutletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      WaterOutletTemp_sensor.flow_model.h_in = inStream(WaterOutletTemp_sensor.flow_model.C_in.h_outflow);
      WaterOutletTemp_sensor.flow_model.h_out = WaterOutletTemp_sensor.flow_model.C_out.h_outflow;
      WaterOutletTemp_sensor.flow_model.Q = WaterOutletTemp_sensor.flow_model.C_in.Q;
      WaterOutletTemp_sensor.flow_model.P_in = WaterOutletTemp_sensor.flow_model.C_in.P;
      WaterOutletTemp_sensor.flow_model.P_out = WaterOutletTemp_sensor.flow_model.C_out.P;
      WaterOutletTemp_sensor.flow_model.Xi = inStream(WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      WaterOutletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      WaterOutletTemp_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (WaterOutletTemp_sensor.flow_model.P_in, WaterOutletTemp_sensor.flow_model.h_in,
         WaterOutletTemp_sensor.flow_model.Xi, 0, 0);
      WaterOutletTemp_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (WaterOutletTemp_sensor.flow_model.P_out, WaterOutletTemp_sensor.flow_model.h_out,
         WaterOutletTemp_sensor.flow_model.Xi, 0, 0);
      WaterOutletTemp_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        WaterOutletTemp_sensor.flow_model.state_in);
      WaterOutletTemp_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        WaterOutletTemp_sensor.flow_model.state_out);
      WaterOutletTemp_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        WaterOutletTemp_sensor.flow_model.state_in);
      WaterOutletTemp_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        WaterOutletTemp_sensor.flow_model.state_out);
      WaterOutletTemp_sensor.flow_model.rho = (WaterOutletTemp_sensor.flow_model.rho_in
        +WaterOutletTemp_sensor.flow_model.rho_out)/2;
      WaterOutletTemp_sensor.flow_model.Qv_in = WaterOutletTemp_sensor.flow_model.Q
        /WaterOutletTemp_sensor.flow_model.rho_in;
      WaterOutletTemp_sensor.flow_model.Qv_out =  -WaterOutletTemp_sensor.flow_model.Q
        /WaterOutletTemp_sensor.flow_model.rho_out;
      WaterOutletTemp_sensor.flow_model.Qv = (WaterOutletTemp_sensor.flow_model.Qv_in
        -WaterOutletTemp_sensor.flow_model.Qv_out)/2;
      WaterOutletTemp_sensor.flow_model.P_out-WaterOutletTemp_sensor.flow_model.P_in
         = WaterOutletTemp_sensor.flow_model.DP;
      WaterOutletTemp_sensor.flow_model.Q*(WaterOutletTemp_sensor.flow_model.h_out
        -WaterOutletTemp_sensor.flow_model.h_in) = WaterOutletTemp_sensor.flow_model.W;
      WaterOutletTemp_sensor.flow_model.h_out-WaterOutletTemp_sensor.flow_model.h_in
         = WaterOutletTemp_sensor.flow_model.DH;
      WaterOutletTemp_sensor.flow_model.T_out-WaterOutletTemp_sensor.flow_model.T_in
         = WaterOutletTemp_sensor.flow_model.DT;
      WaterOutletTemp_sensor.flow_model.C_in.Q+WaterOutletTemp_sensor.flow_model.C_out.Q
         = 0;
      WaterOutletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(WaterOutletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      WaterOutletTemp_sensor.flow_model.P = WaterOutletTemp_sensor.flow_model.P_in;
      WaterOutletTemp_sensor.flow_model.h = WaterOutletTemp_sensor.flow_model.h_in;
      WaterOutletTemp_sensor.flow_model.T = WaterOutletTemp_sensor.flow_model.T_in;
      WaterOutletTemp_sensor.flow_model.DP = 0;
      WaterOutletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component WaterOutletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not WaterOutletTemp_sensor.faulty_flow_rate) then 
        WaterOutletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      WaterOutletTemp_sensor.P = WaterOutletTemp_sensor.C_in.P;
      WaterOutletTemp_sensor.Q = WaterOutletTemp_sensor.C_in.Q+WaterOutletTemp_sensor.mass_flow_rate_bias;
      WaterOutletTemp_sensor.Xi = inStream(WaterOutletTemp_sensor.C_in.Xi_outflow);
      WaterOutletTemp_sensor.h = inStream(WaterOutletTemp_sensor.C_in.h_outflow);
      WaterOutletTemp_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (WaterOutletTemp_sensor.P, WaterOutletTemp_sensor.h, WaterOutletTemp_sensor.Xi,
         0, 0);
      assert(WaterOutletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      WaterOutletTemp_sensor.T = WaterOutletTemp_sensor.flow_model.T;
      WaterOutletTemp_sensor.T_degC+273.15 = WaterOutletTemp_sensor.T;
      WaterOutletTemp_sensor.T_degF = WaterOutletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    WaterOutletTemp_sensor.flow_model.C_in.P = WaterOutletTemp_sensor.C_in.P;
    WaterOutletTemp_sensor.C_in.Q-WaterOutletTemp_sensor.flow_model.C_in.Q = 0.0;
    WaterOutletTemp_sensor.flow_model.C_out.P = WaterOutletTemp_sensor.C_out.P;
    WaterOutletTemp_sensor.C_out.Q-WaterOutletTemp_sensor.flow_model.C_out.Q = 
      0.0;

  // Component waterFlow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      waterFlow_sensor.flow_model.h_in = inStream(waterFlow_sensor.flow_model.C_in.h_outflow);
      waterFlow_sensor.flow_model.h_out = waterFlow_sensor.flow_model.C_out.h_outflow;
      waterFlow_sensor.flow_model.Q = waterFlow_sensor.flow_model.C_in.Q;
      waterFlow_sensor.flow_model.P_in = waterFlow_sensor.flow_model.C_in.P;
      waterFlow_sensor.flow_model.P_out = waterFlow_sensor.flow_model.C_out.P;
      waterFlow_sensor.flow_model.Xi = inStream(waterFlow_sensor.flow_model.C_in.Xi_outflow);
      waterFlow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      waterFlow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      waterFlow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterFlow_sensor.flow_model.P_in, waterFlow_sensor.flow_model.h_in, 
        waterFlow_sensor.flow_model.Xi, 0, 0);
      waterFlow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterFlow_sensor.flow_model.P_out, waterFlow_sensor.flow_model.h_out, 
        waterFlow_sensor.flow_model.Xi, 0, 0);
      waterFlow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterFlow_sensor.flow_model.state_in);
      waterFlow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterFlow_sensor.flow_model.state_out);
      waterFlow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterFlow_sensor.flow_model.state_in);
      waterFlow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterFlow_sensor.flow_model.state_out);
      waterFlow_sensor.flow_model.rho = (waterFlow_sensor.flow_model.rho_in+
        waterFlow_sensor.flow_model.rho_out)/2;
      waterFlow_sensor.flow_model.Qv_in = waterFlow_sensor.flow_model.Q/
        waterFlow_sensor.flow_model.rho_in;
      waterFlow_sensor.flow_model.Qv_out =  -waterFlow_sensor.flow_model.Q/
        waterFlow_sensor.flow_model.rho_out;
      waterFlow_sensor.flow_model.Qv = (waterFlow_sensor.flow_model.Qv_in-
        waterFlow_sensor.flow_model.Qv_out)/2;
      waterFlow_sensor.flow_model.P_out-waterFlow_sensor.flow_model.P_in = 
        waterFlow_sensor.flow_model.DP;
      waterFlow_sensor.flow_model.Q*(waterFlow_sensor.flow_model.h_out-
        waterFlow_sensor.flow_model.h_in) = waterFlow_sensor.flow_model.W;
      waterFlow_sensor.flow_model.h_out-waterFlow_sensor.flow_model.h_in = 
        waterFlow_sensor.flow_model.DH;
      waterFlow_sensor.flow_model.T_out-waterFlow_sensor.flow_model.T_in = 
        waterFlow_sensor.flow_model.DT;
      waterFlow_sensor.flow_model.C_in.Q+waterFlow_sensor.flow_model.C_out.Q = 0;
      waterFlow_sensor.flow_model.C_out.Xi_outflow = inStream(waterFlow_sensor.flow_model.C_in.Xi_outflow);
      assert(waterFlow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      waterFlow_sensor.flow_model.P = waterFlow_sensor.flow_model.P_in;
      waterFlow_sensor.flow_model.h = waterFlow_sensor.flow_model.h_in;
      waterFlow_sensor.flow_model.T = waterFlow_sensor.flow_model.T_in;
      waterFlow_sensor.flow_model.DP = 0;
      waterFlow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component waterFlow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not waterFlow_sensor.faulty_flow_rate) then 
        waterFlow_sensor.mass_flow_rate_bias = 0;
      end if;
      waterFlow_sensor.P = waterFlow_sensor.C_in.P;
      waterFlow_sensor.Q = waterFlow_sensor.C_in.Q+waterFlow_sensor.mass_flow_rate_bias;
      waterFlow_sensor.Xi = inStream(waterFlow_sensor.C_in.Xi_outflow);
      waterFlow_sensor.h = inStream(waterFlow_sensor.C_in.h_outflow);
      waterFlow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterFlow_sensor.P, waterFlow_sensor.h, waterFlow_sensor.Xi, 0, 0);
      assert(waterFlow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      waterFlow_sensor.Qv = waterFlow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterFlow_sensor.state);
      waterFlow_sensor.Q_lm = waterFlow_sensor.Qv*60000;
      waterFlow_sensor.Q_th = waterFlow_sensor.Q*3.6;
      waterFlow_sensor.Q_lbs = waterFlow_sensor.Q*0.453592428;
      waterFlow_sensor.Q_Mlbh = waterFlow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    waterFlow_sensor.flow_model.C_in.P = waterFlow_sensor.C_in.P;
    waterFlow_sensor.C_in.Q-waterFlow_sensor.flow_model.C_in.Q = 0.0;
    waterFlow_sensor.flow_model.C_out.P = waterFlow_sensor.C_out.P;
    waterFlow_sensor.C_out.Q-waterFlow_sensor.flow_model.C_out.Q = 0.0;

  // Component AirOutletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirOutletTemp_sensor.flow_model.h_in = inStream(AirOutletTemp_sensor.flow_model.C_in.h_outflow);
      AirOutletTemp_sensor.flow_model.h_out = AirOutletTemp_sensor.flow_model.C_out.h_outflow;
      AirOutletTemp_sensor.flow_model.Q = AirOutletTemp_sensor.flow_model.C_in.Q;
      AirOutletTemp_sensor.flow_model.P_in = AirOutletTemp_sensor.flow_model.C_in.P;
      AirOutletTemp_sensor.flow_model.P_out = AirOutletTemp_sensor.flow_model.C_out.P;
      AirOutletTemp_sensor.flow_model.Xi = inStream(AirOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      AirOutletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirOutletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirOutletTemp_sensor.flow_model.state_in = setState_phX_Unique7(
        AirOutletTemp_sensor.flow_model.P_in, AirOutletTemp_sensor.flow_model.h_in,
         AirOutletTemp_sensor.flow_model.Xi);
      AirOutletTemp_sensor.flow_model.state_out = setState_phX_Unique7(
        AirOutletTemp_sensor.flow_model.P_out, AirOutletTemp_sensor.flow_model.h_out,
         AirOutletTemp_sensor.flow_model.Xi);
      AirOutletTemp_sensor.flow_model.T_in = temperature_Unique25(
        AirOutletTemp_sensor.flow_model.state_in);
      AirOutletTemp_sensor.flow_model.T_out = temperature_Unique25(
        AirOutletTemp_sensor.flow_model.state_out);
      AirOutletTemp_sensor.flow_model.rho_in = density_Unique26(
        AirOutletTemp_sensor.flow_model.state_in);
      AirOutletTemp_sensor.flow_model.rho_out = density_Unique26(
        AirOutletTemp_sensor.flow_model.state_out);
      AirOutletTemp_sensor.flow_model.rho = (AirOutletTemp_sensor.flow_model.rho_in
        +AirOutletTemp_sensor.flow_model.rho_out)/2;
      AirOutletTemp_sensor.flow_model.Qv_in = AirOutletTemp_sensor.flow_model.Q/
        AirOutletTemp_sensor.flow_model.rho_in;
      AirOutletTemp_sensor.flow_model.Qv_out =  -AirOutletTemp_sensor.flow_model.Q
        /AirOutletTemp_sensor.flow_model.rho_out;
      AirOutletTemp_sensor.flow_model.Qv = (AirOutletTemp_sensor.flow_model.Qv_in
        -AirOutletTemp_sensor.flow_model.Qv_out)/2;
      AirOutletTemp_sensor.flow_model.P_out-AirOutletTemp_sensor.flow_model.P_in
         = AirOutletTemp_sensor.flow_model.DP;
      AirOutletTemp_sensor.flow_model.Q*(AirOutletTemp_sensor.flow_model.h_out-
        AirOutletTemp_sensor.flow_model.h_in) = AirOutletTemp_sensor.flow_model.W;
      AirOutletTemp_sensor.flow_model.h_out-AirOutletTemp_sensor.flow_model.h_in
         = AirOutletTemp_sensor.flow_model.DH;
      AirOutletTemp_sensor.flow_model.T_out-AirOutletTemp_sensor.flow_model.T_in
         = AirOutletTemp_sensor.flow_model.DT;
      AirOutletTemp_sensor.flow_model.C_in.Q+AirOutletTemp_sensor.flow_model.C_out.Q
         = 0;
      AirOutletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(AirOutletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirOutletTemp_sensor.flow_model.P = AirOutletTemp_sensor.flow_model.P_in;
      AirOutletTemp_sensor.flow_model.h = AirOutletTemp_sensor.flow_model.h_in;
      AirOutletTemp_sensor.flow_model.T = AirOutletTemp_sensor.flow_model.T_in;
      AirOutletTemp_sensor.flow_model.DP = 0;
      AirOutletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirOutletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirOutletTemp_sensor.faulty_flow_rate) then 
        AirOutletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      AirOutletTemp_sensor.P = AirOutletTemp_sensor.C_in.P;
      AirOutletTemp_sensor.Q = AirOutletTemp_sensor.C_in.Q+AirOutletTemp_sensor.mass_flow_rate_bias;
      AirOutletTemp_sensor.Xi = inStream(AirOutletTemp_sensor.C_in.Xi_outflow);
      AirOutletTemp_sensor.h = inStream(AirOutletTemp_sensor.C_in.h_outflow);
      AirOutletTemp_sensor.state = setState_phX_Unique7(AirOutletTemp_sensor.P, 
        AirOutletTemp_sensor.h, AirOutletTemp_sensor.Xi);
      assert(AirOutletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      AirOutletTemp_sensor.T = AirOutletTemp_sensor.flow_model.T;
      AirOutletTemp_sensor.T_degC+273.15 = AirOutletTemp_sensor.T;
      AirOutletTemp_sensor.T_degF = AirOutletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    AirOutletTemp_sensor.flow_model.C_in.P = AirOutletTemp_sensor.C_in.P;
    AirOutletTemp_sensor.C_in.Q-AirOutletTemp_sensor.flow_model.C_in.Q = 0.0;
    AirOutletTemp_sensor.flow_model.C_out.P = AirOutletTemp_sensor.C_out.P;
    AirOutletTemp_sensor.C_out.Q-AirOutletTemp_sensor.flow_model.C_out.Q = 0.0;

  // Component airInletFlow_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      airInletFlow_sensor.flow_model.h_in = inStream(airInletFlow_sensor.flow_model.C_in.h_outflow);
      airInletFlow_sensor.flow_model.h_out = airInletFlow_sensor.flow_model.C_out.h_outflow;
      airInletFlow_sensor.flow_model.Q = airInletFlow_sensor.flow_model.C_in.Q;
      airInletFlow_sensor.flow_model.P_in = airInletFlow_sensor.flow_model.C_in.P;
      airInletFlow_sensor.flow_model.P_out = airInletFlow_sensor.flow_model.C_out.P;
      airInletFlow_sensor.flow_model.Xi = inStream(airInletFlow_sensor.flow_model.C_in.Xi_outflow);
      airInletFlow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      airInletFlow_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      airInletFlow_sensor.flow_model.state_in = setState_phX_Unique7(
        airInletFlow_sensor.flow_model.P_in, airInletFlow_sensor.flow_model.h_in,
         airInletFlow_sensor.flow_model.Xi);
      airInletFlow_sensor.flow_model.state_out = setState_phX_Unique7(
        airInletFlow_sensor.flow_model.P_out, airInletFlow_sensor.flow_model.h_out,
         airInletFlow_sensor.flow_model.Xi);
      airInletFlow_sensor.flow_model.T_in = temperature_Unique25(
        airInletFlow_sensor.flow_model.state_in);
      airInletFlow_sensor.flow_model.T_out = temperature_Unique25(
        airInletFlow_sensor.flow_model.state_out);
      airInletFlow_sensor.flow_model.rho_in = density_Unique26(
        airInletFlow_sensor.flow_model.state_in);
      airInletFlow_sensor.flow_model.rho_out = density_Unique26(
        airInletFlow_sensor.flow_model.state_out);
      airInletFlow_sensor.flow_model.rho = (airInletFlow_sensor.flow_model.rho_in
        +airInletFlow_sensor.flow_model.rho_out)/2;
      airInletFlow_sensor.flow_model.Qv_in = airInletFlow_sensor.flow_model.Q/
        airInletFlow_sensor.flow_model.rho_in;
      airInletFlow_sensor.flow_model.Qv_out =  -airInletFlow_sensor.flow_model.Q
        /airInletFlow_sensor.flow_model.rho_out;
      airInletFlow_sensor.flow_model.Qv = (airInletFlow_sensor.flow_model.Qv_in-
        airInletFlow_sensor.flow_model.Qv_out)/2;
      airInletFlow_sensor.flow_model.P_out-airInletFlow_sensor.flow_model.P_in
         = airInletFlow_sensor.flow_model.DP;
      airInletFlow_sensor.flow_model.Q*(airInletFlow_sensor.flow_model.h_out-
        airInletFlow_sensor.flow_model.h_in) = airInletFlow_sensor.flow_model.W;
      airInletFlow_sensor.flow_model.h_out-airInletFlow_sensor.flow_model.h_in
         = airInletFlow_sensor.flow_model.DH;
      airInletFlow_sensor.flow_model.T_out-airInletFlow_sensor.flow_model.T_in
         = airInletFlow_sensor.flow_model.DT;
      airInletFlow_sensor.flow_model.C_in.Q+airInletFlow_sensor.flow_model.C_out.Q
         = 0;
      airInletFlow_sensor.flow_model.C_out.Xi_outflow = inStream(
        airInletFlow_sensor.flow_model.C_in.Xi_outflow);
      assert(airInletFlow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      airInletFlow_sensor.flow_model.P = airInletFlow_sensor.flow_model.P_in;
      airInletFlow_sensor.flow_model.h = airInletFlow_sensor.flow_model.h_in;
      airInletFlow_sensor.flow_model.T = airInletFlow_sensor.flow_model.T_in;
      airInletFlow_sensor.flow_model.DP = 0;
      airInletFlow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component airInletFlow_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not airInletFlow_sensor.faulty_flow_rate) then 
        airInletFlow_sensor.mass_flow_rate_bias = 0;
      end if;
      airInletFlow_sensor.P = airInletFlow_sensor.C_in.P;
      airInletFlow_sensor.Q = airInletFlow_sensor.C_in.Q+airInletFlow_sensor.mass_flow_rate_bias;
      airInletFlow_sensor.Xi = inStream(airInletFlow_sensor.C_in.Xi_outflow);
      airInletFlow_sensor.h = inStream(airInletFlow_sensor.C_in.h_outflow);
      airInletFlow_sensor.state = setState_phX_Unique7(airInletFlow_sensor.P, 
        airInletFlow_sensor.h, airInletFlow_sensor.Xi);
      assert(airInletFlow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      airInletFlow_sensor.Qv = airInletFlow_sensor.Q/density_Unique26(
        airInletFlow_sensor.state);
      airInletFlow_sensor.Q_lm = airInletFlow_sensor.Qv*60000;
      airInletFlow_sensor.Q_th = airInletFlow_sensor.Q*3.6;
      airInletFlow_sensor.Q_lbs = airInletFlow_sensor.Q*0.453592428;
      airInletFlow_sensor.Q_Mlbh = airInletFlow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    airInletFlow_sensor.flow_model.C_in.P = airInletFlow_sensor.C_in.P;
    airInletFlow_sensor.C_in.Q-airInletFlow_sensor.flow_model.C_in.Q = 0.0;
    airInletFlow_sensor.flow_model.C_out.P = airInletFlow_sensor.C_out.P;
    airInletFlow_sensor.C_out.Q-airInletFlow_sensor.flow_model.C_out.Q = 0.0;

  // Component airInletPress_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      airInletPress_sensor.flow_model.h_in = inStream(airInletPress_sensor.flow_model.C_in.h_outflow);
      airInletPress_sensor.flow_model.h_out = airInletPress_sensor.flow_model.C_out.h_outflow;
      airInletPress_sensor.flow_model.Q = airInletPress_sensor.flow_model.C_in.Q;
      airInletPress_sensor.flow_model.P_in = airInletPress_sensor.flow_model.C_in.P;
      airInletPress_sensor.flow_model.P_out = airInletPress_sensor.flow_model.C_out.P;
      airInletPress_sensor.flow_model.Xi = inStream(airInletPress_sensor.flow_model.C_in.Xi_outflow);
      airInletPress_sensor.flow_model.C_in.h_outflow = 1000000.0;
      airInletPress_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      airInletPress_sensor.flow_model.state_in = setState_phX_Unique7(
        airInletPress_sensor.flow_model.P_in, airInletPress_sensor.flow_model.h_in,
         airInletPress_sensor.flow_model.Xi);
      airInletPress_sensor.flow_model.state_out = setState_phX_Unique7(
        airInletPress_sensor.flow_model.P_out, airInletPress_sensor.flow_model.h_out,
         airInletPress_sensor.flow_model.Xi);
      airInletPress_sensor.flow_model.T_in = temperature_Unique25(
        airInletPress_sensor.flow_model.state_in);
      airInletPress_sensor.flow_model.T_out = temperature_Unique25(
        airInletPress_sensor.flow_model.state_out);
      airInletPress_sensor.flow_model.rho_in = density_Unique26(
        airInletPress_sensor.flow_model.state_in);
      airInletPress_sensor.flow_model.rho_out = density_Unique26(
        airInletPress_sensor.flow_model.state_out);
      airInletPress_sensor.flow_model.rho = (airInletPress_sensor.flow_model.rho_in
        +airInletPress_sensor.flow_model.rho_out)/2;
      airInletPress_sensor.flow_model.Qv_in = airInletPress_sensor.flow_model.Q/
        airInletPress_sensor.flow_model.rho_in;
      airInletPress_sensor.flow_model.Qv_out =  -airInletPress_sensor.flow_model.Q
        /airInletPress_sensor.flow_model.rho_out;
      airInletPress_sensor.flow_model.Qv = (airInletPress_sensor.flow_model.Qv_in
        -airInletPress_sensor.flow_model.Qv_out)/2;
      airInletPress_sensor.flow_model.P_out-airInletPress_sensor.flow_model.P_in
         = airInletPress_sensor.flow_model.DP;
      airInletPress_sensor.flow_model.Q*(airInletPress_sensor.flow_model.h_out-
        airInletPress_sensor.flow_model.h_in) = airInletPress_sensor.flow_model.W;
      airInletPress_sensor.flow_model.h_out-airInletPress_sensor.flow_model.h_in
         = airInletPress_sensor.flow_model.DH;
      airInletPress_sensor.flow_model.T_out-airInletPress_sensor.flow_model.T_in
         = airInletPress_sensor.flow_model.DT;
      airInletPress_sensor.flow_model.C_in.Q+airInletPress_sensor.flow_model.C_out.Q
         = 0;
      airInletPress_sensor.flow_model.C_out.Xi_outflow = inStream(
        airInletPress_sensor.flow_model.C_in.Xi_outflow);
      assert(airInletPress_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      airInletPress_sensor.flow_model.P = airInletPress_sensor.flow_model.P_in;
      airInletPress_sensor.flow_model.h = airInletPress_sensor.flow_model.h_in;
      airInletPress_sensor.flow_model.T = airInletPress_sensor.flow_model.T_in;
      airInletPress_sensor.flow_model.DP = 0;
      airInletPress_sensor.flow_model.DH = 0;
    // end of extends 

  // Component airInletPress_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not airInletPress_sensor.faulty_flow_rate) then 
        airInletPress_sensor.mass_flow_rate_bias = 0;
      end if;
      airInletPress_sensor.P = airInletPress_sensor.C_in.P;
      airInletPress_sensor.Q = airInletPress_sensor.C_in.Q+airInletPress_sensor.mass_flow_rate_bias;
      airInletPress_sensor.Xi = inStream(airInletPress_sensor.C_in.Xi_outflow);
      airInletPress_sensor.h = inStream(airInletPress_sensor.C_in.h_outflow);
      airInletPress_sensor.state = setState_phX_Unique7(airInletPress_sensor.P, 
        airInletPress_sensor.h, airInletPress_sensor.Xi);
      assert(airInletPress_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      airInletPress_sensor.P_barA = airInletPress_sensor.P*1E-05;
      airInletPress_sensor.P_psiA = airInletPress_sensor.P*0.000145038;
      airInletPress_sensor.P_MPaA = airInletPress_sensor.P*1E-06;
      airInletPress_sensor.P_kPaA = airInletPress_sensor.P*0.001;
      airInletPress_sensor.P_barG = airInletPress_sensor.P_barA-1;
      airInletPress_sensor.P_psiG = airInletPress_sensor.P_psiA-14.50377377;
      airInletPress_sensor.P_MPaG = airInletPress_sensor.P_MPaA-0.1;
      airInletPress_sensor.P_kPaG = airInletPress_sensor.P_kPaA-100;
      airInletPress_sensor.P_mbar = airInletPress_sensor.P*0.01;
      airInletPress_sensor.P_inHg = airInletPress_sensor.P*0.0002953006;
    // end of extends 
  equation
    airInletPress_sensor.flow_model.C_in.P = airInletPress_sensor.C_in.P;
    airInletPress_sensor.C_in.Q-airInletPress_sensor.flow_model.C_in.Q = 0.0;
    airInletPress_sensor.flow_model.C_out.P = airInletPress_sensor.C_out.P;
    airInletPress_sensor.C_out.Q-airInletPress_sensor.flow_model.C_out.Q = 0.0;

  // Component airOutletPress_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      airOutletPress_sensor.flow_model.h_in = inStream(airOutletPress_sensor.flow_model.C_in.h_outflow);
      airOutletPress_sensor.flow_model.h_out = airOutletPress_sensor.flow_model.C_out.h_outflow;
      airOutletPress_sensor.flow_model.Q = airOutletPress_sensor.flow_model.C_in.Q;
      airOutletPress_sensor.flow_model.P_in = airOutletPress_sensor.flow_model.C_in.P;
      airOutletPress_sensor.flow_model.P_out = airOutletPress_sensor.flow_model.C_out.P;
      airOutletPress_sensor.flow_model.Xi = inStream(airOutletPress_sensor.flow_model.C_in.Xi_outflow);
      airOutletPress_sensor.flow_model.C_in.h_outflow = 1000000.0;
      airOutletPress_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      airOutletPress_sensor.flow_model.state_in = setState_phX_Unique7(
        airOutletPress_sensor.flow_model.P_in, airOutletPress_sensor.flow_model.h_in,
         airOutletPress_sensor.flow_model.Xi);
      airOutletPress_sensor.flow_model.state_out = setState_phX_Unique7(
        airOutletPress_sensor.flow_model.P_out, airOutletPress_sensor.flow_model.h_out,
         airOutletPress_sensor.flow_model.Xi);
      airOutletPress_sensor.flow_model.T_in = temperature_Unique25(
        airOutletPress_sensor.flow_model.state_in);
      airOutletPress_sensor.flow_model.T_out = temperature_Unique25(
        airOutletPress_sensor.flow_model.state_out);
      airOutletPress_sensor.flow_model.rho_in = density_Unique26(
        airOutletPress_sensor.flow_model.state_in);
      airOutletPress_sensor.flow_model.rho_out = density_Unique26(
        airOutletPress_sensor.flow_model.state_out);
      airOutletPress_sensor.flow_model.rho = (airOutletPress_sensor.flow_model.rho_in
        +airOutletPress_sensor.flow_model.rho_out)/2;
      airOutletPress_sensor.flow_model.Qv_in = airOutletPress_sensor.flow_model.Q
        /airOutletPress_sensor.flow_model.rho_in;
      airOutletPress_sensor.flow_model.Qv_out =  -airOutletPress_sensor.flow_model.Q
        /airOutletPress_sensor.flow_model.rho_out;
      airOutletPress_sensor.flow_model.Qv = (airOutletPress_sensor.flow_model.Qv_in
        -airOutletPress_sensor.flow_model.Qv_out)/2;
      airOutletPress_sensor.flow_model.P_out-airOutletPress_sensor.flow_model.P_in
         = airOutletPress_sensor.flow_model.DP;
      airOutletPress_sensor.flow_model.Q*(airOutletPress_sensor.flow_model.h_out
        -airOutletPress_sensor.flow_model.h_in) = airOutletPress_sensor.flow_model.W;
      airOutletPress_sensor.flow_model.h_out-airOutletPress_sensor.flow_model.h_in
         = airOutletPress_sensor.flow_model.DH;
      airOutletPress_sensor.flow_model.T_out-airOutletPress_sensor.flow_model.T_in
         = airOutletPress_sensor.flow_model.DT;
      airOutletPress_sensor.flow_model.C_in.Q+airOutletPress_sensor.flow_model.C_out.Q
         = 0;
      airOutletPress_sensor.flow_model.C_out.Xi_outflow = inStream(
        airOutletPress_sensor.flow_model.C_in.Xi_outflow);
      assert(airOutletPress_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      airOutletPress_sensor.flow_model.P = airOutletPress_sensor.flow_model.P_in;
      airOutletPress_sensor.flow_model.h = airOutletPress_sensor.flow_model.h_in;
      airOutletPress_sensor.flow_model.T = airOutletPress_sensor.flow_model.T_in;
      airOutletPress_sensor.flow_model.DP = 0;
      airOutletPress_sensor.flow_model.DH = 0;
    // end of extends 

  // Component airOutletPress_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not airOutletPress_sensor.faulty_flow_rate) then 
        airOutletPress_sensor.mass_flow_rate_bias = 0;
      end if;
      airOutletPress_sensor.P = airOutletPress_sensor.C_in.P;
      airOutletPress_sensor.Q = airOutletPress_sensor.C_in.Q+airOutletPress_sensor.mass_flow_rate_bias;
      airOutletPress_sensor.Xi = inStream(airOutletPress_sensor.C_in.Xi_outflow);
      airOutletPress_sensor.h = inStream(airOutletPress_sensor.C_in.h_outflow);
      airOutletPress_sensor.state = setState_phX_Unique7(airOutletPress_sensor.P,
         airOutletPress_sensor.h, airOutletPress_sensor.Xi);
      assert(airOutletPress_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      airOutletPress_sensor.P_barA = airOutletPress_sensor.P*1E-05;
      airOutletPress_sensor.P_psiA = airOutletPress_sensor.P*0.000145038;
      airOutletPress_sensor.P_MPaA = airOutletPress_sensor.P*1E-06;
      airOutletPress_sensor.P_kPaA = airOutletPress_sensor.P*0.001;
      airOutletPress_sensor.P_barG = airOutletPress_sensor.P_barA-1;
      airOutletPress_sensor.P_psiG = airOutletPress_sensor.P_psiA-14.50377377;
      airOutletPress_sensor.P_MPaG = airOutletPress_sensor.P_MPaA-0.1;
      airOutletPress_sensor.P_kPaG = airOutletPress_sensor.P_kPaA-100;
      airOutletPress_sensor.P_mbar = airOutletPress_sensor.P*0.01;
      airOutletPress_sensor.P_inHg = airOutletPress_sensor.P*0.0002953006;
    // end of extends 
  equation
    airOutletPress_sensor.flow_model.C_in.P = airOutletPress_sensor.C_in.P;
    airOutletPress_sensor.C_in.Q-airOutletPress_sensor.flow_model.C_in.Q = 0.0;
    airOutletPress_sensor.flow_model.C_out.P = airOutletPress_sensor.C_out.P;
    airOutletPress_sensor.C_out.Q-airOutletPress_sensor.flow_model.C_out.Q = 0.0;

  // This model
  // class MetroscopeModelingLibrary.Tests.Multifluid.HeatExchangers.CoolingTowerPoppe_test
  equation
    waterFlow_sensor.Qv = waterInletFlow;
    waterInletTemp_sensor.T_degC = waterInletTemp;
    waterInletPress_sensor.P_barA = waterInletPress;
    airInletPress_sensor.P_barA = airInletPress;
    cold_source.relative_humidity = cold_source_relative_humidity;
    airInletFlow_sensor.Qv = airInletFlow;
    AirInletTemp_sensor.T_degC = AirInletTemp;
    cold_sink.relative_humidity = cold_sink_relative_humidity;
    airOutletPress_sensor.P_barA = airOutletPress;
    CoolingTower.hd = hd;
    CoolingTower.Cf = Cf;
    CoolingTower.Lfi = Lfi;
    CoolingTower.Afr = Afr;
    CoolingTower.V_inlet = V_inlet;
    WaterOutletTemp_sensor.T_degC = WaterOutletTemp;
    AirOutletTemp_sensor.T_degC = AirOutletTemp;
    cold_source.C_out.P = AirInletTemp_sensor.C_in.P;
    AirInletTemp_sensor.C_in.Q+cold_source.C_out.Q = 0.0;
    airInletFlow_sensor.C_in.P = AirInletTemp_sensor.C_out.P;
    AirInletTemp_sensor.C_out.Q+airInletFlow_sensor.C_in.Q = 0.0;
    airOutletPress_sensor.C_out.P = AirOutletTemp_sensor.C_in.P;
    AirOutletTemp_sensor.C_in.Q+airOutletPress_sensor.C_out.Q = 0.0;
    cold_sink.C_in.P = AirOutletTemp_sensor.C_out.P;
    AirOutletTemp_sensor.C_out.Q+cold_sink.C_in.Q = 0.0;
    airInletPress_sensor.C_out.P = CoolingTower.air_inlet_connector.P;
    CoolingTower.air_inlet_connector.Q+airInletPress_sensor.C_out.Q = 0.0;
    airOutletPress_sensor.C_in.P = CoolingTower.air_outlet_connector.P;
    CoolingTower.air_outlet_connector.Q+airOutletPress_sensor.C_in.Q = 0.0;
    waterInletPress_sensor.C_out.P = CoolingTower.water_inlet_connector.P;
    CoolingTower.water_inlet_connector.Q+waterInletPress_sensor.C_out.Q = 0.0;
    WaterOutletTemp_sensor.C_in.P = CoolingTower.water_outlet_connector.P;
    CoolingTower.water_outlet_connector.Q+WaterOutletTemp_sensor.C_in.Q = 0.0;
    hot_sink.C_in.P = WaterOutletTemp_sensor.C_out.P;
    WaterOutletTemp_sensor.C_out.Q+hot_sink.C_in.Q = 0.0;
    airInletPress_sensor.C_in.P = airInletFlow_sensor.C_out.P;
    airInletFlow_sensor.C_out.Q+airInletPress_sensor.C_in.Q = 0.0;
    waterFlow_sensor.C_in.P = hot_source.C_out.P;
    hot_source.C_out.Q+waterFlow_sensor.C_in.Q = 0.0;
    waterInletTemp_sensor.C_in.P = waterFlow_sensor.C_out.P;
    waterFlow_sensor.C_out.Q+waterInletTemp_sensor.C_in.Q = 0.0;
    waterInletTemp_sensor.C_out.P = waterInletPress_sensor.C_in.P;
    waterInletPress_sensor.C_in.Q+waterInletTemp_sensor.C_out.Q = 0.0;

end CoolingTowerPoppe_test;
