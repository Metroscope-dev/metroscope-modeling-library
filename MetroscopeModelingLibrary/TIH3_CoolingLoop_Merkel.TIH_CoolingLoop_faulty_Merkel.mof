model TIH_CoolingLoop_faulty_Merkel
  parameter Boolean show_causality = true "true to show causality, false to hide it";
  parameter Boolean display_output = true "Used to switch ON or OFF output display";
  input Real PCOND_178(start = 78.122) "mbar";
  input Real CEC809(start = 18.683645) "deg_C";
  input Real BIL176_AVG(start = 11.569875) "deg_C";
  input Real M1_PP_MOY(start = 1016.9539) "mbar";
  input MetroscopeModelingLibrary.Utilities.Units.Percentage BIL177_AVG(start = 
    86.586) "1";
  input Real COS12_5661_AVG(start = 0.0);
  input Real COS12_5762_AVG(start = 0.0);
  input Real CEC197(start = 4.94546) "m3/s";
  input Real Pump_Qv(start = 37.3) "m3/s";
  input Real CEC195(start = 80);
  parameter MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V423 = 
    17339.9765625;
  parameter MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V422 = 
    22394.935546875;
  parameter MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V421 = 43648.125;
  parameter Real Pump_hn = 143.15020751953128;
  parameter Real LOA_Kth = 1829028;
  parameter Real Pump_rh = 1;
  parameter Boolean faulty(start = false) = true;
  parameter String LOA.QCp_max_side = "cold";
  constant Real LOA.R(unit = "J/(mol.K)") = 8.31446261815324 "ideal gas constant";
  parameter Boolean LOA.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_cold_0
     = 5000;
  parameter MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_hot_0
     = 1000;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.Psat_0 = 
    5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_cold_in_0 = 
    500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_cold_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.T_cold_in_0 = 288.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.T_cold_out_0 = 298.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_hot_in_0
     = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.T_hot_out_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_cold_in_0 = 50000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_cold_out_0 = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_hot_in_0 = 2000000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_liq_sat_0 = Modelica.Media.Water.WaterIF97_ph.bubbleEnthalpy_Unique7(
    Modelica.Media.Water.WaterIF97_ph.setSat_p_Unique8(LOA.Psat_0));
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.Tsat_0 = 
    Modelica.Media.Water.WaterIF97_ph.saturationTemperature_Unique9(LOA.Psat_0);
  constant MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_DP_0 = 9000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side_pipe.T_in_0 = LOA.cold_side_pipe.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side_pipe.T_out_0 = LOA.cold_side_pipe.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_in_0
     = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP_0 = LOA.cold_side_pipe.P_out_0-LOA.cold_side_pipe.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side_pipe.h_in_0 = LOA.cold_side_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side_pipe.h_out_0 = LOA.cold_side_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side_pipe.Q_0 = LOA.Q_cold_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side_pipe.T_0 = LOA.T_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side_pipe.h_0 = LOA.h_cold_in_0;
  parameter Boolean LOA.cold_side_pipe.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.hot_side.T_in_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.hot_side.T_out_0 = LOA.Tsat_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.hot_side.DP_0 = LOA.hot_side.P_out_0-LOA.hot_side.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.hot_side.h_in_0 = LOA.h_hot_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.hot_side.h_out_0 = LOA.h_liq_sat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.hot_side.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side.T_in_0 = LOA.T_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side.T_out_0 = LOA.T_cold_out_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_in_0
     = 400000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side.DP_0 = LOA.cold_side.P_out_0-LOA.cold_side.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side.h_in_0 = LOA.h_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side.h_out_0 = LOA.h_cold_out_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side.Q_0 = LOA.Q_cold_0 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.water_height_pipe.T_in_0 = LOA.water_height_pipe.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.water_height_pipe.T_out_0 = LOA.water_height_pipe.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_out_0
     = 14000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP_0 = LOA.water_height_pipe.P_out_0-LOA.water_height_pipe.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.water_height_pipe.h_in_0 = LOA.water_height_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.water_height_pipe.h_out_0 = LOA.water_height_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.water_height_pipe.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.water_height_pipe.T_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.water_height_pipe.h_0 = LOA.h_liq_sat_0;
  parameter Boolean LOA.water_height_pipe.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_in.T_in_0 = LOA.incondensables_in.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_in.T_out_0 = LOA.incondensables_in.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_in.DP_0 = LOA.incondensables_in.P_out_0-LOA.incondensables_in.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_in.h_in_0 = LOA.incondensables_in.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_in.h_out_0 = LOA.incondensables_in.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_in.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_in.T_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_in.h_0 = LOA.h_hot_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_out.T_in_0 = LOA.incondensables_out.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_out.T_out_0 = LOA.incondensables_out.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_out.DP_0 = LOA.incondensables_out.P_out_0-
    LOA.incondensables_out.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_out.h_in_0 = LOA.incondensables_out.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_out.h_out_0 = LOA.incondensables_out.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_out.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_out.T_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_out.h_0 = LOA.h_liq_sat_0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.h_0 = 500000.0;
  parameter Boolean VCT178_sensor.faulty_flow_rate = false;
  parameter String VCT178_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String VCT178_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    VCT178_sensor.flow_model.T_in_0 = VCT178_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    VCT178_sensor.flow_model.T_out_0 = VCT178_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    VCT178_sensor.flow_model.DP_0 = VCT178_sensor.flow_model.P_out_0-
    VCT178_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.flow_model.h_in_0 = VCT178_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.flow_model.h_out_0 = VCT178_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    VCT178_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.flow_model.h_0 = 500000.0;
  parameter String VCT178_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.h_0 = 500000.0;
  parameter Boolean Hotside_Temp_sensor.faulty_flow_rate = false;
  parameter String Hotside_Temp_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Hotside_Temp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.flow_model.T_in_0 = Hotside_Temp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.flow_model.T_out_0 = Hotside_Temp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Temp_sensor.flow_model.DP_0 = Hotside_Temp_sensor.flow_model.P_out_0
    -Hotside_Temp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.flow_model.h_in_0 = Hotside_Temp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.flow_model.h_out_0 = Hotside_Temp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.T_0 = 300;
  parameter String Hotside_Temp_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.h_0 = 500000.0;
  parameter Boolean Hotside_Flow_sensor.faulty_flow_rate = Hotside_Flow_sensor.faulty;
  parameter String Hotside_Flow_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Hotside_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Flow_sensor.flow_model.T_in_0 = Hotside_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Flow_sensor.flow_model.T_out_0 = Hotside_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Flow_sensor.flow_model.DP_0 = Hotside_Flow_sensor.flow_model.P_out_0
    -Hotside_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.flow_model.h_in_0 = Hotside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.flow_model.h_out_0 = Hotside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Hotside_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean Hotside_Flow_sensor.faulty = false;
  parameter String Hotside_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.h_0 = 500000.0;
  parameter Boolean Coldside_Flow_sensor.faulty_flow_rate = Coldside_Flow_sensor.faulty;
  parameter String Coldside_Flow_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Coldside_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Flow_sensor.flow_model.T_in_0 = Coldside_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Flow_sensor.flow_model.T_out_0 = Coldside_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Flow_sensor.flow_model.DP_0 = Coldside_Flow_sensor.flow_model.P_out_0
    -Coldside_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.flow_model.h_in_0 = Coldside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.flow_model.h_out_0 = Coldside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Coldside_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean Coldside_Flow_sensor.faulty = false;
  parameter String Coldside_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC502_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC502_sensor.h_0 = 500000.0;
  parameter Boolean CEC502_sensor.faulty_flow_rate = false;
  parameter String CEC502_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC502_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC502_sensor.flow_model.T_in_0 = CEC502_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC502_sensor.flow_model.T_out_0 = CEC502_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC502_sensor.flow_model.DP_0 = CEC502_sensor.flow_model.P_out_0-
    CEC502_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC502_sensor.flow_model.h_in_0 = CEC502_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC502_sensor.flow_model.h_out_0 = CEC502_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC502_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC502_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC502_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC502_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC502_sensor.T_0 = 300;
  parameter String CEC502_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.h_0 = 500000.0;
  parameter Boolean Coldside_Press_sensor.faulty_flow_rate = false;
  parameter String Coldside_Press_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Coldside_Press_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Press_sensor.flow_model.T_in_0 = Coldside_Press_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Press_sensor.flow_model.T_out_0 = Coldside_Press_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Press_sensor.flow_model.DP_0 = Coldside_Press_sensor.flow_model.P_out_0
    -Coldside_Press_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.flow_model.h_in_0 = Coldside_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.flow_model.h_out_0 = Coldside_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Press_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.flow_model.h_0 = 500000.0;
  parameter String Coldside_Press_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC507_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC507_sensor.h_0 = 500000.0;
  parameter Boolean CEC507_sensor.faulty_flow_rate = false;
  parameter String CEC507_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC507_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC507_sensor.flow_model.T_in_0 = CEC507_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC507_sensor.flow_model.T_out_0 = CEC507_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC507_sensor.flow_model.DP_0 = CEC507_sensor.flow_model.P_out_0-
    CEC507_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC507_sensor.flow_model.h_in_0 = CEC507_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC507_sensor.flow_model.h_out_0 = CEC507_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC507_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC507_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC507_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC507_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC507_sensor.T_0 = 300;
  parameter String CEC507_sensor.display_unit = "degC" "Specify the display unit";
  parameter String CoolingTower.configuration = "mechanical";
  constant Real CoolingTower.g(unit = "m/s2") = 9.80665;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T_cold_in_0 = 288.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T_cold_out_0 = 298.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T_hot_in_0 = 313.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T_hot_out_0 = 293.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T1_0 = 288.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T2_0 = 291.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T3_0 = 295.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.T4_0 = 298.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.i_initial_0 = 50000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.i_final_0 = 105000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.i1_0 = 65000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.i2_0 = 80000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.i3_0 = 90000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.i4_0 = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.iTot_0 = 5E-06;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_inlet_0
     = 1.2754;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_outlet_0
     = 1.246;
  parameter Boolean CoolingTower.faulty = true;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.hot_side_cooling.T_in_0 = CoolingTower.hot_side_cooling.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.hot_side_cooling.T_out_0 = CoolingTower.hot_side_cooling.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.hot_side_cooling.DP_0 = CoolingTower.hot_side_cooling.P_out_0-
    CoolingTower.hot_side_cooling.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.hot_side_cooling.h_in_0 = CoolingTower.hot_side_cooling.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.hot_side_cooling.h_out_0 = CoolingTower.hot_side_cooling.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.hot_side_cooling.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.hot_side_cooling.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.hot_side_cooling.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.hot_side_cooling.h_0 = 500000.0;
  parameter Real CoolingTower.Air_inlet.relative_humidity_0(min = 0.0, max = 1.0)
     = 0.1;
  parameter Real CoolingTower.Air_outlet.relative_humidity_0(min = 0.0, max = 
    1.0) = 0.1;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.inputflowmodel.T_in_0 = CoolingTower.inputflowmodel.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.inputflowmodel.T_out_0 = CoolingTower.inputflowmodel.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.inputflowmodel.DP_0 = CoolingTower.inputflowmodel.P_out_0-
    CoolingTower.inputflowmodel.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.inputflowmodel.h_in_0 = CoolingTower.inputflowmodel.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.inputflowmodel.h_out_0 = CoolingTower.inputflowmodel.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.inputflowmodel.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.inputflowmodel.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.inputflowmodel.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.inputflowmodel.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.outputflowmodel.T_in_0 = CoolingTower.outputflowmodel.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.outputflowmodel.T_out_0 = CoolingTower.outputflowmodel.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.outputflowmodel.DP_0 = CoolingTower.outputflowmodel.P_out_0-
    CoolingTower.outputflowmodel.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.outputflowmodel.h_in_0 = CoolingTower.outputflowmodel.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.outputflowmodel.h_out_0 = CoolingTower.outputflowmodel.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.outputflowmodel.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.outputflowmodel.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.outputflowmodel.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.outputflowmodel.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.pipe.T_in_0 = CoolingTower.pipe.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.pipe.T_out_0 = CoolingTower.pipe.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.pipe.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.pipe.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.pipe.DP_0 = CoolingTower.pipe.P_out_0-CoolingTower.pipe.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.pipe.h_in_0 = CoolingTower.pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.pipe.h_out_0 = CoolingTower.pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.pipe.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.pipe.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.pipe.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.pipe.h_0 = 500000.0;
  parameter Boolean CoolingTower.pipe.faulty = false;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.h_0 = 500000.0;
  parameter Boolean CEC194_sensor.faulty_flow_rate = false;
  parameter String CEC194_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC194_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.flow_model.T_in_0 = CEC194_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.flow_model.T_out_0 = CEC194_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC194_sensor.flow_model.DP_0 = CEC194_sensor.flow_model.P_out_0-
    CEC194_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.flow_model.h_in_0 = CEC194_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.flow_model.h_out_0 = CEC194_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.T_0 = 300;
  parameter String CEC194_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.P_0 = 
    100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    flow_sensor.h_0 = 500000.0;
  parameter Boolean flow_sensor.faulty_flow_rate = flow_sensor.faulty;
  parameter String flow_sensor.sensor_function = "Unidentified" "Specify if the sensor is a BC or used for calibration";
  parameter String flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    flow_sensor.flow_model.T_in_0 = flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    flow_sensor.flow_model.T_out_0 = flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    flow_sensor.flow_model.DP_0 = flow_sensor.flow_model.P_out_0-
    flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    flow_sensor.flow_model.h_in_0 = flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    flow_sensor.flow_model.h_out_0 = flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    flow_sensor.Qv_0 = 0.1;
  parameter Boolean flow_sensor.faulty = false;
  parameter String flow_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Real BIL177_AVG_sensor.relative_humidity_0(min = 0.0, max = 1.0) = 
    0.1;
  parameter Real sink.relative_humidity_0(min = 0.0, max = 1.0) = 0.1;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.h_0 = 500000.0;
  parameter Boolean AirInlet_Flow_sensor.faulty_flow_rate = AirInlet_Flow_sensor.faulty;
  parameter String AirInlet_Flow_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String AirInlet_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Flow_sensor.flow_model.T_in_0 = AirInlet_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Flow_sensor.flow_model.T_out_0 = AirInlet_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Flow_sensor.flow_model.DP_0 = AirInlet_Flow_sensor.flow_model.P_out_0
    -AirInlet_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.flow_model.h_in_0 = AirInlet_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.flow_model.h_out_0 = AirInlet_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    AirInlet_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean AirInlet_Flow_sensor.faulty = false;
  parameter String AirInlet_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    BIL176_AVG_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    BIL176_AVG_sensor.h_0 = 500000.0;
  parameter Boolean BIL176_AVG_sensor.faulty_flow_rate = false;
  parameter String BIL176_AVG_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String BIL176_AVG_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    BIL176_AVG_sensor.flow_model.T_in_0 = BIL176_AVG_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    BIL176_AVG_sensor.flow_model.T_out_0 = BIL176_AVG_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    BIL176_AVG_sensor.flow_model.DP_0 = BIL176_AVG_sensor.flow_model.P_out_0-
    BIL176_AVG_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    BIL176_AVG_sensor.flow_model.h_in_0 = BIL176_AVG_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    BIL176_AVG_sensor.flow_model.h_out_0 = BIL176_AVG_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density BIL176_AVG_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    BIL176_AVG_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    BIL176_AVG_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    BIL176_AVG_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    BIL176_AVG_sensor.T_0 = 300;
  parameter String BIL176_AVG_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.h_0 = 500000.0;
  parameter Boolean AirInlet_Press_sensor.faulty_flow_rate = false;
  parameter String AirInlet_Press_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String AirInlet_Press_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Press_sensor.flow_model.T_in_0 = AirInlet_Press_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Press_sensor.flow_model.T_out_0 = AirInlet_Press_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Press_sensor.flow_model.DP_0 = AirInlet_Press_sensor.flow_model.P_out_0
    -AirInlet_Press_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.flow_model.h_in_0 = AirInlet_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.flow_model.h_out_0 = AirInlet_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Press_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.flow_model.h_0 = 500000.0;
  parameter String AirInlet_Press_sensor.display_unit = "barA" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V423_valve.T_in_0 = V423_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V423_valve.T_out_0 = V423_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V423_valve.DP_0 = V423_valve.P_out_0-V423_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_in_0 = V423_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_out_0 = V423_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V423_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_valve.T_in_0 = V422_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_valve.T_out_0 = V422_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V422_valve.DP_0 = V422_valve.P_out_0-V422_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_in_0 = V422_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_out_0 = V422_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage SP189_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String SP189_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String SP189_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage CEC195_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String CEC195_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String CEC195_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.h_0 = 500000.0;
  parameter Boolean Q_reject_sensor.faulty_flow_rate = Q_reject_sensor.faulty;
  parameter String Q_reject_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Q_reject_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_sensor.flow_model.T_in_0 = Q_reject_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_sensor.flow_model.T_out_0 = Q_reject_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_sensor.flow_model.DP_0 = Q_reject_sensor.flow_model.P_out_0-
    Q_reject_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.flow_model.h_in_0 = Q_reject_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.flow_model.h_out_0 = Q_reject_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Q_reject_sensor.Qv_0 = 0.1;
  parameter Boolean Q_reject_sensor.faulty = false;
  parameter String Q_reject_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.h_0 = 500000.0;
  parameter Boolean Q_reject_press_sensor.faulty_flow_rate = false;
  parameter String Q_reject_press_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Q_reject_press_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_in_0 = Q_reject_press_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_out_0 = Q_reject_press_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_press_sensor.flow_model.DP_0 = Q_reject_press_sensor.flow_model.P_out_0
    -Q_reject_press_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_in_0 = Q_reject_press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_out_0 = Q_reject_press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_0 = 500000.0;
  parameter String Q_reject_press_sensor.display_unit = "barA" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_in_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_out_0
     = 300;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_in_0 = 
    100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_out_0 = 
    1000000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Pump.DP_0 = Pump.P_out_0-Pump.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Pump.h_in_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Pump.h_out_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_0 = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Pump.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.h_0 = 500000.0;
  parameter Boolean CEC809_sensor.faulty_flow_rate = false;
  parameter String CEC809_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String CEC809_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.flow_model.T_in_0 = CEC809_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.flow_model.T_out_0 = CEC809_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC809_sensor.flow_model.DP_0 = CEC809_sensor.flow_model.P_out_0-
    CEC809_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.flow_model.h_in_0 = CEC809_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.flow_model.h_out_0 = CEC809_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.T_0 = 300;
  parameter String CEC809_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.h_0 = 500000.0;
  parameter Boolean Press1_sensor.faulty_flow_rate = false;
  parameter String Press1_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Press1_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_in_0 = Press1_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_out_0 = Press1_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press1_sensor.flow_model.DP_0 = Press1_sensor.flow_model.P_out_0-
    Press1_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_in_0 = Press1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_out_0 = Press1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_0 = 500000.0;
  parameter String Press1_sensor.display_unit = "barA" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V421_valve.T_in_0 = V421_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V421_valve.T_out_0 = V421_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V421_valve.DP_0 = V421_valve.P_out_0-V421_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_in_0 = V421_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_out_0 = V421_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V421_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage CEC191_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String CEC191_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC191_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.h_0 = 500000.0;
  parameter Boolean Q_recirculation_sensor.faulty_flow_rate = Q_recirculation_sensor.faulty;
  parameter String Q_recirculation_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Q_recirculation_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_in_0 = Q_recirculation_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_out_0 = Q_recirculation_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_recirculation_sensor.flow_model.DP_0 = Q_recirculation_sensor.flow_model.P_out_0
    -Q_recirculation_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_in_0 = Q_recirculation_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_out_0 = Q_recirculation_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Q_recirculation_sensor.Qv_0 = 0.1;
  parameter Boolean Q_recirculation_sensor.faulty = false;
  parameter String Q_recirculation_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.h_0 = 500000.0;
  parameter Boolean CEC197_sensor.faulty_flow_rate = CEC197_sensor.faulty;
  parameter String CEC197_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String CEC197_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_in_0 = CEC197_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_out_0 = CEC197_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC197_sensor.flow_model.DP_0 = CEC197_sensor.flow_model.P_out_0-
    CEC197_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_in_0 = CEC197_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_out_0 = CEC197_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    CEC197_sensor.Qv_0 = 0.1;
  parameter Boolean CEC197_sensor.faulty = false;
  parameter String CEC197_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.h_0 = 500000.0;
  parameter Boolean V422_Flow_sensor.faulty_flow_rate = V422_Flow_sensor.faulty;
  parameter String V422_Flow_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String V422_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_Flow_sensor.flow_model.T_in_0 = V422_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_Flow_sensor.flow_model.T_out_0 = V422_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V422_Flow_sensor.flow_model.DP_0 = V422_Flow_sensor.flow_model.P_out_0-
    V422_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.flow_model.h_in_0 = V422_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.flow_model.h_out_0 = V422_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    V422_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean V422_Flow_sensor.faulty = false;
  parameter String V422_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    TempCond_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    TempCond_sensor.h_0 = 500000.0;
  parameter Boolean TempCond_sensor.faulty_flow_rate = false;
  parameter String TempCond_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String TempCond_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    TempCond_sensor.flow_model.T_in_0 = TempCond_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    TempCond_sensor.flow_model.T_out_0 = TempCond_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    TempCond_sensor.flow_model.DP_0 = TempCond_sensor.flow_model.P_out_0-
    TempCond_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    TempCond_sensor.flow_model.h_in_0 = TempCond_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    TempCond_sensor.flow_model.h_out_0 = TempCond_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density TempCond_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    TempCond_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    TempCond_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    TempCond_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    TempCond_sensor.T_0 = 300;
  parameter String TempCond_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.h_0 = 500000.0;
  parameter Boolean AirOutletTemp_sensor.faulty_flow_rate = false;
  parameter String AirOutletTemp_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String AirOutletTemp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_in_0 = AirOutletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_out_0 = AirOutletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirOutletTemp_sensor.flow_model.DP_0 = AirOutletTemp_sensor.flow_model.P_out_0
    -AirOutletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_in_0 = AirOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_out_0 = AirOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.T_0 = 300;
  parameter String AirOutletTemp_sensor.display_unit = "degC" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    pressureCut.T_in_0 = pressureCut.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    pressureCut.T_out_0 = pressureCut.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure pressureCut.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure pressureCut.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    pressureCut.DP_0 = pressureCut.P_out_0-pressureCut.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    pressureCut.h_in_0 = pressureCut.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    pressureCut.h_out_0 = pressureCut.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density pressureCut.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    pressureCut.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    pressureCut.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    pressureCut.h_0 = 500000.0;
  input Real Fault_fouling(start = 0);
  input Real Fault_CoolingTower_bypass_Q(start = 0);
  input Real Fault_Pump_Qv_decrease(start = 0);
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower_bypass.flow_sensor.h_0 = 500000.0;
  parameter Boolean CoolingTower_bypass.flow_sensor.faulty_flow_rate = 
    CoolingTower_bypass.flow_sensor.faulty;
  parameter String CoolingTower_bypass.flow_sensor.sensor_function = 
    "Unidentified" "Specify if the sensor is a BC or used for calibration";
  parameter String CoolingTower_bypass.flow_sensor.causality = "" 
    "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower_bypass.flow_sensor.flow_model.T_in_0 = CoolingTower_bypass.flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower_bypass.flow_sensor.flow_model.T_out_0 = CoolingTower_bypass.flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower_bypass.flow_sensor.flow_model.DP_0 = CoolingTower_bypass.flow_sensor.flow_model.P_out_0
    -CoolingTower_bypass.flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower_bypass.flow_sensor.flow_model.h_in_0 = CoolingTower_bypass.flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower_bypass.flow_sensor.flow_model.h_out_0 = CoolingTower_bypass.flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower_bypass.flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower_bypass.flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    CoolingTower_bypass.flow_sensor.Qv_0 = 0.1;
  parameter Boolean CoolingTower_bypass.flow_sensor.faulty = false;
  parameter String CoolingTower_bypass.flow_sensor.display_unit = "kg/s" 
    "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower_bypass.flow_model.T_in_0 = CoolingTower_bypass.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower_bypass.flow_model.T_out_0 = CoolingTower_bypass.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower_bypass.flow_model.DP_0 = CoolingTower_bypass.flow_model.P_out_0
    -CoolingTower_bypass.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower_bypass.flow_model.h_in_0 = CoolingTower_bypass.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower_bypass.flow_model.h_out_0 = CoolingTower_bypass.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower_bypass.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower_bypass.flow_model.h_0 = 500000.0;

  output Real Hotside_Temp(start = 41.060314) "deg_C";
  output Real CEC194(start = 21.337496) "deg_C";
  output Real V423_opening(start = 31.87832);
  output Real CEC191(start = 6.5619373);
  output Real hd(start = 0.0075801387);
  output Real Coldside_Press(start = 15.037614) "bar";
  output Real Coldside_Flow(start = 34680.78) "kg/s";
  output Real Hotside_Flow(start = 1513.7383) "kg/s";
  output Real Q_reject(start = 34103.35) "m3/s";
  output Real Q_recirculation(start = 2572.5046);
  output Real TEECECM(start = 41.073635);
  output Real CEC507(start = 34.219856) "deg_C";
  output Real CEC502(start = 18.910994) "deg_C";
  output Real Q_EVAPORATION(start = 577.4315) "m3/s";
  MetroscopeModelingLibrary.Utilities.Units.Percentage Pump_Qv_decrease(start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cooling_sink.h_in(
    start = 90834.72);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction cooling_sink.Xi_in[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    cooling_sink.P_in(start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    cooling_sink.Q_in(start = 34103.35);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    cooling_sink.Qv_in(start = 34.176796);
  MetroscopeModelingLibrary.Utilities.Units.Temperature cooling_sink.T_in(
    start = 294.80356);
  Modelica.Media.Interfaces.Types.FixedPhase cooling_sink.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy cooling_sink.state_in.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density cooling_sink.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature cooling_sink.state_in.T(start = 
    294.80356, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure cooling_sink.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    cooling_sink.C_in.Q(start = 34103.35, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure cooling_sink.C_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cooling_sink.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction cooling_sink.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    turbine_outlet.h_out(start = 1746289.9);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    turbine_outlet.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    turbine_outlet.P_out(start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    turbine_outlet.Q_out(start = -1513.7383);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    turbine_outlet.Qv_out(start = -18352.146);
  MetroscopeModelingLibrary.Utilities.Units.Temperature turbine_outlet.T_out(
    start = 314.21033);
  Modelica.Media.Interfaces.Types.FixedPhase turbine_outlet.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy turbine_outlet.state_out.h(
    start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density turbine_outlet.state_out.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature turbine_outlet.state_out.T(
    start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure turbine_outlet.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    turbine_outlet.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure turbine_outlet.C_out.P(
    start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy turbine_outlet.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction turbine_outlet.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy condensate_sink.h_in
    (start = 171972.25);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction condensate_sink.Xi_in[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    condensate_sink.P_in(start = 17538.123);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    condensate_sink.Q_in(start = 1513.7383);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    condensate_sink.Qv_in(start = 1.5262947);
  MetroscopeModelingLibrary.Utilities.Units.Temperature condensate_sink.T_in(
    start = 314.22363);
  Modelica.Media.Interfaces.Types.FixedPhase condensate_sink.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy condensate_sink.state_in.h(
    start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density condensate_sink.state_in.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature condensate_sink.state_in.T(
    start = 314.22363, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure condensate_sink.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    condensate_sink.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure condensate_sink.C_in.P(
    start = 17538.123);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy condensate_sink.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction condensate_sink.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputHeight LOA.water_height;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    LOA.Kfr_cold;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputArea LOA.S;
  MetroscopeModelingLibrary.Utilities.Units.HeatExchangeCoefficient LOA.Kth;
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate LOA.Qv_cold_in(
    start = 37.36575);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.W;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_cold(start = 
    37253.285);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_hot(start = 
    1513.7383);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_cold_in(start = 
    292.061);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_cold_out(start = 
    307.36984);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_hot_in(start = 
    314.21033);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_hot_out(start = 
    314.2257);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_tot(start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.Psat(start = LOA.Psat_0,
     nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.Tsat(start = 
    LOA.Tsat_0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_incond(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_DP(start = LOA.water_height_DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal LOA.C_incond(
    start = 0, unit = "mol/m3", min = 0.0) "Incondensable molar concentration";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure LOA.P_offset(
    start = 0.0) "Offset correction for ideal gas law";
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.fouling(start = 0, 
    nominal = 10.0);
  Real LOA.air_intake(start = 0, nominal = 0.001, unit = "mol/m3", min = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.Qv_cold_in_decrease(
    start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.C_cold_in.Q
    (start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_cold_in.P(start = 
    1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_cold_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_cold_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.C_hot_in.Q(
    start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_hot_in.P(start = 
    7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_hot_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_hot_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate LOA.C_hot_out.Q
    (start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_hot_out.P(start = 
    17538.123);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_hot_out.h_outflow
    (start = 171972.25);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_hot_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.C_cold_out.Q(start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_cold_out.P(start = 
    1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_cold_out.h_outflow
    (start = 144662.44);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_cold_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.h_in
    (start = 80692.1) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.h_out
    (start = 80692.1) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side_pipe.Q(start = 37253.285) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_in(
    start = 1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_out(
    start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.cold_side_pipe.Xi[0]
     "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho_in(
    start = 999.06757) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho_out(
    start = 999.06757) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho(
    start = 999.06757) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side_pipe.Qv_in(start = 37.288055) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.cold_side_pipe.Qv_out(start = -37.288055) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side_pipe.Qv(start = 37.288055) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side_pipe.T_in(
    start = 292.061) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side_pipe.T_out
    (start = 292.061) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side_pipe.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side_pipe.state_in.h
    (start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side_pipe.state_in.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side_pipe.state_in.T(
    start = 292.061, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side_pipe.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side_pipe.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side_pipe.state_out.h
    (start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side_pipe.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side_pipe.state_out.T(
    start = 292.061, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side_pipe.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP(start = 0.0, nominal = 500000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.cold_side_pipe.W(start = 0,
     nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.cold_side_pipe.DH(start = LOA.cold_side_pipe.h_out_0-LOA.cold_side_pipe.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.cold_side_pipe.DT(start = LOA.cold_side_pipe.T_out_0-LOA.cold_side_pipe.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side_pipe.C_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.C_in.P(
    start = 1503761.4, nominal = 500000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side_pipe.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.cold_side_pipe.C_out.Q(start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.C_out.P(
    start = 1503761.4, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.C_out.h_outflow
    (start = 80692.1);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side_pipe.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.h
    (start = 80692.1) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    LOA.cold_side_pipe.Kfr(start = 10) "Friction pressure loss coefficient";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialHeight 
    LOA.cold_side_pipe.delta_z(nominal = 5.0) "Height difference between outlet and inlet";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP_f(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP_z(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.cold_side_pipe.fouling;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.h_in(
    start = 1746289.9) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.h_out(
    start = 171972.25) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.hot_side.Q(
    start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_in(start = 
    7812.2) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_out(start = 
    7812.2) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.hot_side.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho_in(start = 
    0.082482904) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho_out(
    start = 991.7682) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho(start = 
    495.92535) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.hot_side.Qv_in(start = 18352.146) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.hot_side.Qv_out(start = -1.5263025) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.hot_side.Qv(start = 9176.837) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.hot_side.T_in(
    start = 314.21033) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.hot_side.T_out(
    start = 314.2257) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.hot_side.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.hot_side.state_in.h(
    start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.hot_side.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.hot_side.state_in.T(start = 
    314.21033, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.hot_side.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.hot_side.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.hot_side.state_out.h(
    start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.hot_side.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.hot_side.state_out.T(start = 
    314.2257, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.hot_side.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure LOA.hot_side.DP
    (start = 0.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.hot_side.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy LOA.hot_side.DH
    (start = LOA.hot_side.h_out_0-LOA.hot_side.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.hot_side.DT(start = LOA.hot_side.T_out_0-LOA.hot_side.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.hot_side.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.C_in.P(
    start = 7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.hot_side.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.hot_side.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.C_out.P(
    start = 7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.C_out.h_outflow
    (start = 171972.25);
  Modelica.Media.Interfaces.Types.MassFraction LOA.hot_side.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P(start = 
    7812.2) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPower LOA.hot_side.W_input
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.h_in(
    start = 80692.1) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.h_out
    (start = 144662.44) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.cold_side.Q
    (start = 37253.285) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_in(start = 
    1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_out(
    start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.cold_side.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho_in(
    start = 999.06757) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho_out(
    start = 994.9216) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho(start = 
    996.99457) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side.Qv_in(start = 37.288055) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.cold_side.Qv_out(start = -37.44344) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side.Qv(start = 37.36575) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side.T_in(
    start = 292.061) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side.T_out(
    start = 307.36984) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side.state_in.h(
    start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side.state_in.T(start = 
    292.061, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side.state_out.h(
    start = 144662.44, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side.state_out.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side.state_out.T(start = 
    307.36984, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side.DP(start = 0.0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.cold_side.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.cold_side.DH(start = LOA.cold_side.h_out_0-LOA.cold_side.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.cold_side.DT(start = LOA.cold_side.T_out_0-LOA.cold_side.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side.C_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.C_in.P(
    start = 1503761.4, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.cold_side.C_out.Q(start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.C_out.P(
    start = 1503761.4, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.C_out.h_outflow
    (start = 144662.44);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P(start = 
    1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPower LOA.cold_side.W_input
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.h_in
    (start = 171972.25) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.h_out
    (start = 171972.25) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.water_height_pipe.Q(start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_in(
    start = 7812.2) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_out
    (start = 17538.123) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.water_height_pipe.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho_in
    (start = 991.7682) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho_out
    (start = 991.77325) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho(
    start = 991.77075) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.water_height_pipe.Qv_in(start = 1.5263025) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.water_height_pipe.Qv_out(start = -1.5262947) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.water_height_pipe.Qv(start = 1.5262986) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.water_height_pipe.T_in
    (start = 314.2257) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.water_height_pipe.T_out
    (start = 314.22363) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.water_height_pipe.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.water_height_pipe.state_in.h
    (start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.water_height_pipe.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.water_height_pipe.state_in.T(
    start = 314.2257, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.water_height_pipe.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.water_height_pipe.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.water_height_pipe.state_out.h
    (start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.water_height_pipe.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.water_height_pipe.state_out.T(
    start = 314.22363, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.water_height_pipe.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP(start = 9725.924, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.water_height_pipe.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.water_height_pipe.DH(start = LOA.water_height_pipe.h_out_0-
    LOA.water_height_pipe.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.water_height_pipe.DT(start = LOA.water_height_pipe.T_out_0-
    LOA.water_height_pipe.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.water_height_pipe.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.C_in.P
    (start = 7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.water_height_pipe.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.water_height_pipe.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.C_out.P
    (start = 17538.123, nominal = 14000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.C_out.h_outflow
    (start = 171972.25);
  Modelica.Media.Interfaces.Types.MassFraction LOA.water_height_pipe.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.h
    (start = 171972.25) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    LOA.water_height_pipe.Kfr(start = 10) "Friction pressure loss coefficient";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialHeight 
    LOA.water_height_pipe.delta_z(nominal = 5.0) "Height difference between outlet and inlet";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP_f(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP_z(start = 9725.924) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.water_height_pipe.fouling;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.h_in
    (start = 1746289.9) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.h_out
    (start = 1746289.9) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_in.Q(start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_in(
    start = 7812.2) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_out
    (start = 7812.2) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.incondensables_in.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho_in
    (start = 0.082482904) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho_out
    (start = 0.082482904) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho(
    start = 0.082482904) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_in.Qv_in(start = 18352.146) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.incondensables_in.Qv_out(start = -18352.146) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_in.Qv(start = 18352.146) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_in.T_in
    (start = 314.21033) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_in.T_out
    (start = 314.21033) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_in.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_in.state_in.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_in.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_in.state_in.T(
    start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_in.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_in.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_in.state_out.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_in.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_in.state_out.T(
    start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_in.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_in.DP(start = 0.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.incondensables_in.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.incondensables_in.DH(start = LOA.incondensables_in.h_out_0-
    LOA.incondensables_in.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.incondensables_in.DT(start = LOA.incondensables_in.T_out_0-
    LOA.incondensables_in.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_in.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.C_in.P
    (start = 7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_in.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.incondensables_in.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.C_out.P
    (start = 7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_in.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.h
    (start = 1746289.9) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    LOA.incondensables_in.DP_input(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.h_in
    (start = 171972.25) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.h_out
    (start = 171972.25) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_out.Q(start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_in
    (start = 7812.2) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_out
    (start = 7812.2) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.incondensables_out.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho_in
    (start = 991.7682) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho_out
    (start = 991.7682) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho(
    start = 991.7682) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_out.Qv_in(start = 1.5263025) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.incondensables_out.Qv_out(start = -1.5263025) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_out.Qv(start = 1.5263025) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_out.T_in
    (start = 314.2257) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_out.T_out
    (start = 314.2257) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_out.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_out.state_in.h
    (start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_out.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_out.state_in.T(
    start = 314.2257, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_out.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_out.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_out.state_out.h
    (start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_out.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_out.state_out.T
    (start = 314.2257, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_out.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_out.DP(start = 0.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.incondensables_out.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.incondensables_out.DH(start = LOA.incondensables_out.h_out_0-
    LOA.incondensables_out.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.incondensables_out.DT(start = LOA.incondensables_out.T_out_0-
    LOA.incondensables_out.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_out.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.C_in.P
    (start = 7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_out.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.incondensables_out.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.C_out.P
    (start = 7812.2, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.C_out.h_outflow
    (start = 171972.25);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_out.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.h
    (start = 171972.25) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    LOA.incondensables_out.DP_input(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate VCT178_sensor.Q
    (start = 1513.7383, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction VCT178_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.P(start = 
    7812.2) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.h(
    start = 1746289.9) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase VCT178_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy VCT178_sensor.state.h(
    start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density VCT178_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature VCT178_sensor.state.T(start = 
    314.21033, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure VCT178_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate VCT178_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.C_in.Q(start = 1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.C_in.P(
    start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    VCT178_sensor.C_out.Q(start = -1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.C_out.P(
    start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.h_in
    (start = 1746289.9) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.h_out
    (start = 1746289.9) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.flow_model.Q(start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_in
    (start = 7812.2) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_out
    (start = 7812.2) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction VCT178_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho_in
    (start = 0.082482904) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho_out
    (start = 0.082482904) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho
    (start = 0.082482904) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    VCT178_sensor.flow_model.Qv_in(start = 18352.146) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    VCT178_sensor.flow_model.Qv_out(start = -18352.146) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    VCT178_sensor.flow_model.Qv(start = 18352.146) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature VCT178_sensor.flow_model.T_in
    (start = 314.21033) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature VCT178_sensor.flow_model.T_out
    (start = 314.21033) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase VCT178_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy VCT178_sensor.flow_model.state_in.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density VCT178_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature VCT178_sensor.flow_model.state_in.T
    (start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure VCT178_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase VCT178_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy VCT178_sensor.flow_model.state_out.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density VCT178_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature VCT178_sensor.flow_model.state_out.T
    (start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure VCT178_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    VCT178_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power VCT178_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    VCT178_sensor.flow_model.DH(start = VCT178_sensor.flow_model.h_out_0-
    VCT178_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    VCT178_sensor.flow_model.DT(start = VCT178_sensor.flow_model.T_out_0-
    VCT178_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.flow_model.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.C_in.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    VCT178_sensor.flow_model.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.C_out.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.h
    (start = 1746289.9) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P(
    start = 7812.2) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature VCT178_sensor.flow_model.T
    (start = 314.21033) "Temperature of the fluid into the component";
  Real VCT178_sensor.P_barG(start = -0.921878, nominal = 100000.0);
  Real VCT178_sensor.P_psiG(start = -13.3707075, nominal = 14.5038);
  Real VCT178_sensor.P_MPaG(start = -0.0921878, nominal = 0.09999999999999999);
  Real VCT178_sensor.P_kPaG(start = -92.1878, nominal = 100.0);
  Real VCT178_sensor.P_barA(start = 0.078122, nominal = 1.0, unit = "bar");
  Real VCT178_sensor.P_psiA(start = 1.1330658, nominal = 14.5038);
  Real VCT178_sensor.P_MPaA(start = 0.0078122, nominal = 0.09999999999999999);
  Real VCT178_sensor.P_kPaA(start = 7.8122, nominal = 100.0);
  Real VCT178_sensor.P_inHg(start = 2.3069472, nominal = 29.530060000000002);
  Real VCT178_sensor.P_mbar(start = 78.122, nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.Q(start = 1513.7383, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Temp_sensor.Xi[0]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.P(
    start = 7812.2) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.h
    (start = 1746289.9) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Temp_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Temp_sensor.state.h(
    start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Temp_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Temp_sensor.state.T(
    start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Temp_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Hotside_Temp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.C_in.Q(start = 1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.C_in.P(
    start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Temp_sensor.C_out.Q(start = -1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.C_out.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.h_in
    (start = 1746289.9) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.h_out
    (start = 1746289.9) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.flow_model.Q(start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_in
    (start = 7812.2) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_out
    (start = 7812.2) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Temp_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho_in
    (start = 0.082482904) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho_out
    (start = 0.082482904) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho
    (start = 0.082482904) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Temp_sensor.flow_model.Qv_in(start = 18352.146) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Hotside_Temp_sensor.flow_model.Qv_out(start = -18352.146) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Temp_sensor.flow_model.Qv(start = 18352.146) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.flow_model.T_in
    (start = 314.21033) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.flow_model.T_out
    (start = 314.21033) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Temp_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Temp_sensor.flow_model.state_in.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Temp_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Temp_sensor.flow_model.state_in.T
    (start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Temp_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Temp_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Temp_sensor.flow_model.state_out.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Temp_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Temp_sensor.flow_model.state_out.T
    (start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Temp_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Temp_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Hotside_Temp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Hotside_Temp_sensor.flow_model.DH(start = Hotside_Temp_sensor.flow_model.h_out_0
    -Hotside_Temp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Hotside_Temp_sensor.flow_model.DT(start = Hotside_Temp_sensor.flow_model.T_out_0
    -Hotside_Temp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.flow_model.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.C_in.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Temp_sensor.flow_model.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.C_out.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.h
    (start = 1746289.9) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P
    (start = 7812.2) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.flow_model.T
    (start = 314.21033) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.T(
    start = 314.21033);
  Real Hotside_Temp_sensor.T_degC(start = 41.060314, nominal = 573.15, unit = 
    "degC");
  Real Hotside_Temp_sensor.T_degF(start = 105.90857, nominal = 1063.67, unit = 
    "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.Q(start = 1513.7383, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Flow_sensor.Xi[0]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.P(
    start = 7812.2) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.h
    (start = 1746289.9) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Flow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Flow_sensor.state.h(
    start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Flow_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Flow_sensor.state.T(
    start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Flow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Hotside_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.C_in.Q(start = 1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.C_in.P(
    start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Flow_sensor.C_out.Q(start = -1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.C_out.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.h_in
    (start = 1746289.9) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.h_out
    (start = 1746289.9) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.flow_model.Q(start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_in
    (start = 7812.2) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_out
    (start = 7812.2) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho_in
    (start = 0.082482904) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho_out
    (start = 0.082482904) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho
    (start = 0.082482904) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Flow_sensor.flow_model.Qv_in(start = 18352.146) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Hotside_Flow_sensor.flow_model.Qv_out(start = -18352.146) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Flow_sensor.flow_model.Qv(start = 18352.146) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Flow_sensor.flow_model.T_in
    (start = 314.21033) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Flow_sensor.flow_model.T_out
    (start = 314.21033) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Flow_sensor.flow_model.state_in.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Flow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Flow_sensor.flow_model.state_in.T
    (start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Flow_sensor.flow_model.state_out.h
    (start = 1746289.9, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Flow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Flow_sensor.flow_model.state_out.T
    (start = 314.21033, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Hotside_Flow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Hotside_Flow_sensor.flow_model.DH(start = Hotside_Flow_sensor.flow_model.h_out_0
    -Hotside_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Hotside_Flow_sensor.flow_model.DT(start = Hotside_Flow_sensor.flow_model.T_out_0
    -Hotside_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.flow_model.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.C_in.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Flow_sensor.flow_model.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.C_out.P
    (start = 7812.2);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.C_out.h_outflow
    (start = 1746289.9);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.h
    (start = 1746289.9) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P
    (start = 7812.2) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Flow_sensor.flow_model.T
    (start = 314.21033) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Hotside_Flow_sensor.Qv
    (start = 18352.146);
  Real Hotside_Flow_sensor.Q_lm(start = 1101128800.0, nominal = 6000.0);
  Real Hotside_Flow_sensor.Q_th(start = 5449.458, nominal = 360.0);
  Real Hotside_Flow_sensor.Q_lbs(start = 686.62024, nominal = 45.3592428);
  Real Hotside_Flow_sensor.Q_Mlbh(start = 12.013998, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.Q(start = 34680.78, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Flow_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.h
    (start = 78431.805) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Flow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Flow_sensor.state.h(
    start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Flow_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Flow_sensor.state.T(
    start = 291.83926, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Flow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Coldside_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.C_in.Q(start = 34680.78, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Flow_sensor.C_out.Q(start = -34680.78, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.C_out.h_outflow
    (start = 78431.805);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.h_in
    (start = 78431.805) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.h_out
    (start = 78431.805) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.flow_model.Q(start = 34680.78) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho_in
    (start = 998.46747) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho_out
    (start = 998.46747) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho
    (start = 998.46747) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Flow_sensor.flow_model.Qv_in(start = 34.734013) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Coldside_Flow_sensor.flow_model.Qv_out(start = -34.734013) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Flow_sensor.flow_model.Qv(start = 34.734013) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Flow_sensor.flow_model.T_in
    (start = 291.83926) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Flow_sensor.flow_model.T_out
    (start = 291.83926) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Flow_sensor.flow_model.state_in.h
    (start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Flow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Flow_sensor.flow_model.state_in.T
    (start = 291.83926, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Flow_sensor.flow_model.state_out.h
    (start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Flow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Flow_sensor.flow_model.state_out.T
    (start = 291.83926, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Coldside_Flow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Coldside_Flow_sensor.flow_model.DH(start = Coldside_Flow_sensor.flow_model.h_out_0
    -Coldside_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Coldside_Flow_sensor.flow_model.DT(start = Coldside_Flow_sensor.flow_model.T_out_0
    -Coldside_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.flow_model.C_in.Q(start = 34680.78, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Flow_sensor.flow_model.C_out.Q(start = -34680.78, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.C_out.h_outflow
    (start = 78431.805);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.h
    (start = 78431.805) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Flow_sensor.flow_model.T
    (start = 291.83926) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Coldside_Flow_sensor.Qv
    (start = 34.734013);
  Real Coldside_Flow_sensor.Q_lm(start = 2084040.8, nominal = 6000.0);
  Real Coldside_Flow_sensor.Q_th(start = 124850.81, nominal = 360.0);
  Real Coldside_Flow_sensor.Q_lbs(start = 15730.939, nominal = 45.3592428);
  Real Coldside_Flow_sensor.Q_Mlbh(start = 275.24893, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC502_sensor.Q
    (start = 37253.285, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC502_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.P(start = 
    1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.h(
    start = 80692.1) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC502_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC502_sensor.state.h(
    start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC502_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC502_sensor.state.T(start = 
    292.061, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC502_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC502_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC502_sensor.C_in.Q(start = 37253.285, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.C_in.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC502_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC502_sensor.C_out.Q(start = -37253.285, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.C_out.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.C_out.h_outflow
    (start = 80692.1);
  Modelica.Media.Interfaces.Types.MassFraction CEC502_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.flow_model.h_in
    (start = 80692.1) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.flow_model.h_out
    (start = 80692.1) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC502_sensor.flow_model.Q(start = 37253.285) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.P_in
    (start = 1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.P_out
    (start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC502_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC502_sensor.flow_model.rho_in
    (start = 999.06757) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC502_sensor.flow_model.rho_out
    (start = 999.06757) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC502_sensor.flow_model.rho
    (start = 999.06757) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC502_sensor.flow_model.Qv_in(start = 37.288055) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC502_sensor.flow_model.Qv_out(start = -37.288055) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC502_sensor.flow_model.Qv(start = 37.288055) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC502_sensor.flow_model.T_in
    (start = 292.061) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC502_sensor.flow_model.T_out
    (start = 292.061) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC502_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC502_sensor.flow_model.state_in.h
    (start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC502_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC502_sensor.flow_model.state_in.T
    (start = 292.061, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC502_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC502_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC502_sensor.flow_model.state_out.h
    (start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC502_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC502_sensor.flow_model.state_out.T
    (start = 292.061, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC502_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC502_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC502_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC502_sensor.flow_model.DH(start = CEC502_sensor.flow_model.h_out_0-
    CEC502_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC502_sensor.flow_model.DT(start = CEC502_sensor.flow_model.T_out_0-
    CEC502_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC502_sensor.flow_model.C_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC502_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC502_sensor.flow_model.C_out.Q(start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.flow_model.C_out.h_outflow
    (start = 80692.1);
  Modelica.Media.Interfaces.Types.MassFraction CEC502_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC502_sensor.flow_model.h
    (start = 80692.1) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC502_sensor.flow_model.P(
    start = 1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC502_sensor.flow_model.T
    (start = 292.061) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC502_sensor.T(start = 
    292.061);
  Real CEC502_sensor.T_degC(start = 18.910994, nominal = 573.15, unit = "degC");
  Real CEC502_sensor.T_degF(start = 66.03979, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.Q(start = 37253.285, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Press_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.P(
    start = 1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.h
    (start = 80692.1) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Press_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Press_sensor.state.h
    (start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Press_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Press_sensor.state.T(
    start = 292.061, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Press_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Coldside_Press_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.C_in.Q(start = 37253.285, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Press_sensor.C_out.Q(start = -37253.285, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.C_out.h_outflow
    (start = 80692.1);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.h_in
    (start = 80692.1) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.h_out
    (start = 80692.1) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.flow_model.Q(start = 37253.285) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_in
    (start = 1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_out
    (start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Press_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho_in
    (start = 999.06757) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho_out
    (start = 999.06757) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho
    (start = 999.06757) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Press_sensor.flow_model.Qv_in(start = 37.288055) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Coldside_Press_sensor.flow_model.Qv_out(start = -37.288055) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Press_sensor.flow_model.Qv(start = 37.288055) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Press_sensor.flow_model.T_in
    (start = 292.061) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Press_sensor.flow_model.T_out
    (start = 292.061) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Press_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Press_sensor.flow_model.state_in.h
    (start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Press_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Press_sensor.flow_model.state_in.T
    (start = 292.061, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Press_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Press_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Press_sensor.flow_model.state_out.h
    (start = 80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Press_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Press_sensor.flow_model.state_out.T
    (start = 292.061, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Press_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Press_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Coldside_Press_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Coldside_Press_sensor.flow_model.DH(start = Coldside_Press_sensor.flow_model.h_out_0
    -Coldside_Press_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Coldside_Press_sensor.flow_model.DT(start = Coldside_Press_sensor.flow_model.T_out_0
    -Coldside_Press_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.flow_model.C_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Press_sensor.flow_model.C_out.Q(start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.C_out.h_outflow
    (start = 80692.1);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.h
    (start = 80692.1) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P
    (start = 1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Press_sensor.flow_model.T
    (start = 292.061) "Temperature of the fluid into the component";
  Real Coldside_Press_sensor.P_barG(start = 14.037614, nominal = 100000.0);
  Real Coldside_Press_sensor.P_psiG(start = 203.59877, nominal = 14.5038);
  Real Coldside_Press_sensor.P_MPaG(start = 1.4037614, nominal = 
    0.09999999999999999);
  Real Coldside_Press_sensor.P_kPaG(start = 1403.7614, nominal = 100.0);
  Real Coldside_Press_sensor.P_barA(start = 15.037614, nominal = 1.0, unit = 
    "bar");
  Real Coldside_Press_sensor.P_psiA(start = 218.10254, nominal = 14.5038);
  Real Coldside_Press_sensor.P_MPaA(start = 1.5037614, nominal = 
    0.09999999999999999);
  Real Coldside_Press_sensor.P_kPaA(start = 1503.7614, nominal = 100.0);
  Real Coldside_Press_sensor.P_inHg(start = 444.06165, nominal = 
    29.530060000000002);
  Real Coldside_Press_sensor.P_mbar(start = 15037.614, nominal = 1000.0, unit = 
    "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC507_sensor.Q
    (start = 37253.285, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC507_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.P(start = 
    1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.h(
    start = 144662.44) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC507_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC507_sensor.state.h(
    start = 144662.44, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC507_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC507_sensor.state.T(start = 
    307.36984, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC507_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC507_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC507_sensor.C_in.Q(start = 37253.285, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.C_in.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC507_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC507_sensor.C_out.Q(start = -37253.285, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.C_out.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.C_out.h_outflow
    (start = 144662.44);
  Modelica.Media.Interfaces.Types.MassFraction CEC507_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.flow_model.h_in
    (start = 144662.44) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.flow_model.h_out
    (start = 144662.44) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC507_sensor.flow_model.Q(start = 37253.285) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.P_in
    (start = 1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.P_out
    (start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC507_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC507_sensor.flow_model.rho_in
    (start = 994.9216) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC507_sensor.flow_model.rho_out
    (start = 994.9216) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC507_sensor.flow_model.rho
    (start = 994.9216) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC507_sensor.flow_model.Qv_in(start = 37.44344) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC507_sensor.flow_model.Qv_out(start = -37.44344) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC507_sensor.flow_model.Qv(start = 37.44344) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC507_sensor.flow_model.T_in
    (start = 307.36984) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC507_sensor.flow_model.T_out
    (start = 307.36984) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC507_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC507_sensor.flow_model.state_in.h
    (start = 144662.44, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC507_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC507_sensor.flow_model.state_in.T
    (start = 307.36984, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC507_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC507_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC507_sensor.flow_model.state_out.h
    (start = 144662.44, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC507_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC507_sensor.flow_model.state_out.T
    (start = 307.36984, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC507_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC507_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC507_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC507_sensor.flow_model.DH(start = CEC507_sensor.flow_model.h_out_0-
    CEC507_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC507_sensor.flow_model.DT(start = CEC507_sensor.flow_model.T_out_0-
    CEC507_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC507_sensor.flow_model.C_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC507_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC507_sensor.flow_model.C_out.Q(start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.flow_model.C_out.h_outflow
    (start = 144662.44);
  Modelica.Media.Interfaces.Types.MassFraction CEC507_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC507_sensor.flow_model.h
    (start = 144662.44) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC507_sensor.flow_model.P(
    start = 1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC507_sensor.flow_model.T
    (start = 307.36984) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC507_sensor.T(start = 
    307.36984);
  Real CEC507_sensor.T_degC(start = 34.219856, nominal = 573.15, unit = "degC");
  Real CEC507_sensor.T_degF(start = 93.59574, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.C_cold_in.Q(start = 35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.C_cold_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.C_cold_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.C_cold_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.Velocity CoolingTower.V_inlet;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.hd;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputArea CoolingTower.Afr;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.Lfi;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    CoolingTower.Cf;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.afi;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.Ratio;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.eta_fan;
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.W_fan;
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.W;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_in(
    start = 35239.945);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_out
    (start = -35817.38);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_in(
    start = 37253.285);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_out(
    start = -36675.855);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_evap(
    start = 577.4315);
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate CoolingTower.Qv_evap;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_in(
    start = 284.71988);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_out(
    start = 300.9981);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_in(
    start = 307.36984);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_out(
    start = 294.4875);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T1(start = 
    CoolingTower.T1_0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T2(start = 
    CoolingTower.T2_0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T3(start = 
    CoolingTower.T3_0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T4(start = 
    CoolingTower.T4_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_initial
    (start = CoolingTower.i_initial_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_final
    (start = CoolingTower.i_final_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i1(
    start = CoolingTower.i1_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i2(
    start = CoolingTower.i2_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i3(
    start = CoolingTower.i3_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i4(
    start = CoolingTower.i4_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.iTot(
    start = CoolingTower.iTot_0);
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_inlet(
    start = 1.2388364);
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_outlet(
    start = 1.1605986);
  MetroscopeModelingLibrary.Utilities.Units.HeatCapacity CoolingTower.cp;
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.P_in(start = 
    101695.39);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.P_out(start = 
    101695.39);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.deltaP_fan(
    start = 1.3959752);
  MetroscopeModelingLibrary.Utilities.Units.Percentage CoolingTower.fouling(
    start = 0, nominal = 10.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.C_hot_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.C_hot_in.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.C_hot_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.C_hot_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.C_hot_out.Q(start = -36675.855, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.C_hot_out.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.C_hot_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.C_hot_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.C_cold_out.Q(start = -35817.38, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.C_cold_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.C_cold_out.h_outflow
    (start = 86687.3);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.C_cold_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.hot_side_cooling.h_in
    (start = 144662.44) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.hot_side_cooling.h_out
    (start = 144662.44) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.hot_side_cooling.Q(start = 37253.285) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.P_in
    (start = 1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.P_out
    (start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.hot_side_cooling.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.hot_side_cooling.rho_in
    (start = 994.9216) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.hot_side_cooling.rho_out
    (start = 994.9216) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.hot_side_cooling.rho
    (start = 994.9216) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.hot_side_cooling.Qv_in(start = 37.44344) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.hot_side_cooling.Qv_out(start = -37.44344) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.hot_side_cooling.Qv(start = 37.44344) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.hot_side_cooling.T_in
    (start = 307.36984) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.hot_side_cooling.T_out
    (start = 307.36984) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.hot_side_cooling.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.hot_side_cooling.state_in.h
    (start = 144662.44, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.hot_side_cooling.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.hot_side_cooling.state_in.T
    (start = 307.36984, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.hot_side_cooling.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.hot_side_cooling.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.hot_side_cooling.state_out.h
    (start = 144662.44, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.hot_side_cooling.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.hot_side_cooling.state_out.T
    (start = 307.36984, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.hot_side_cooling.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.hot_side_cooling.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.hot_side_cooling.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.hot_side_cooling.DH(start = CoolingTower.hot_side_cooling.h_out_0
    -CoolingTower.hot_side_cooling.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.hot_side_cooling.DT(start = CoolingTower.hot_side_cooling.T_out_0
    -CoolingTower.hot_side_cooling.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.hot_side_cooling.C_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.hot_side_cooling.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.hot_side_cooling.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.hot_side_cooling.C_out.Q(start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.hot_side_cooling.C_out.h_outflow
    (start = 144662.44);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.hot_side_cooling.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.hot_side_cooling.h
    (start = 144662.44) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.hot_side_cooling.P
    (start = 1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.hot_side_cooling.T
    (start = 307.36984) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.Air_inlet.h_in
    (start = 29824.578);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.Air_inlet.Xi_in
    [1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.Air_inlet.P_in(start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.Air_inlet.Q_in(start = 35239.945);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.Air_inlet.Qv_in(start = 28446.004);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.Air_inlet.T_in
    (start = 284.71988);
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.Air_inlet.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.Air_inlet.state_in.T(
    start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.Air_inlet.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.Air_inlet.C_in.Q(start = 35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.Air_inlet.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.Air_inlet.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.Air_inlet.C_in.Xi_outflow
    [1];
  Real CoolingTower.Air_inlet.relative_humidity(start = CoolingTower.Air_inlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.Air_outlet.h_out(start = 86687.3);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.Air_outlet.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.Air_outlet.P_out(start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.Air_outlet.Q_out(start = -35817.38);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.Air_outlet.Qv_out(start = -30861.125);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.Air_outlet.T_out
    (start = 300.9981);
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.Air_outlet.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.Air_outlet.state_out.T
    (start = 300.9981, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.Air_outlet.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.Air_outlet.C_out.Q(start = -35817.38, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.Air_outlet.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.Air_outlet.C_out.h_outflow
    (start = 86687.3);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.Air_outlet.C_out.Xi_outflow
    [1];
  Real CoolingTower.Air_outlet.relative_humidity(start = CoolingTower.Air_outlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.inputflowmodel.h_in
    (start = 29824.578) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.inputflowmodel.h_out
    (start = 29824.578) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.inputflowmodel.Q(start = 35239.945) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.inputflowmodel.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.inputflowmodel.rho_in
    (start = 1.2388364) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.inputflowmodel.rho_out
    (start = 1.2388364) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.inputflowmodel.rho
    (start = 1.2388364) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.inputflowmodel.Qv_in(start = 28446.004) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.inputflowmodel.Qv_out(start = -28446.004) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.inputflowmodel.Qv(start = 28446.004) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.inputflowmodel.T_in
    (start = 284.71988) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.inputflowmodel.T_out
    (start = 284.71988) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.inputflowmodel.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.inputflowmodel.state_in.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.inputflowmodel.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.inputflowmodel.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.inputflowmodel.state_out.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.inputflowmodel.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.inputflowmodel.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.inputflowmodel.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.inputflowmodel.DH(start = CoolingTower.inputflowmodel.h_out_0-
    CoolingTower.inputflowmodel.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.inputflowmodel.DT(start = CoolingTower.inputflowmodel.T_out_0-
    CoolingTower.inputflowmodel.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.inputflowmodel.C_in.Q(start = 35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.inputflowmodel.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.inputflowmodel.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.inputflowmodel.C_out.Q(start = -35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.inputflowmodel.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.inputflowmodel.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.inputflowmodel.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.inputflowmodel.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.inputflowmodel.T
    (start = 284.71988) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.outputflowmodel.h_in
    (start = 86687.3) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.outputflowmodel.h_out
    (start = 86687.3) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.outputflowmodel.Q(start = 35817.38) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.outputflowmodel.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.outputflowmodel.rho_in
    (start = 1.1605986) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.outputflowmodel.rho_out
    (start = 1.1605986) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.outputflowmodel.rho
    (start = 1.1605986) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.outputflowmodel.Qv_in(start = 30861.125) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.outputflowmodel.Qv_out(start = -30861.125) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.outputflowmodel.Qv(start = 30861.125) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.outputflowmodel.T_in
    (start = 300.9981) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.outputflowmodel.T_out
    (start = 300.9981) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.outputflowmodel.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.outputflowmodel.state_in.T
    (start = 300.9981, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.outputflowmodel.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.outputflowmodel.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.outputflowmodel.state_out.T
    (start = 300.9981, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.outputflowmodel.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.outputflowmodel.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.outputflowmodel.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.outputflowmodel.DH(start = CoolingTower.outputflowmodel.h_out_0
    -CoolingTower.outputflowmodel.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.outputflowmodel.DT(start = CoolingTower.outputflowmodel.T_out_0
    -CoolingTower.outputflowmodel.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.outputflowmodel.C_in.Q(start = 35817.38, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.outputflowmodel.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.outputflowmodel.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.outputflowmodel.C_out.Q(start = -35817.38, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.outputflowmodel.C_out.h_outflow
    (start = 86687.3);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.outputflowmodel.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.outputflowmodel.h
    (start = 86687.3) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.outputflowmodel.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.outputflowmodel.T
    (start = 300.9981) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.pipe.h_in
    (start = 29824.578) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.pipe.h_out
    (start = 29824.578) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.pipe.Q(start = 35239.945) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.pipe.P_in(
    start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.pipe.P_out(
    start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.pipe.Xi[1]
     "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.pipe.rho_in(
    start = 1.2388364) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.pipe.rho_out(
    start = 1.2388364) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.pipe.rho(
    start = 1.2388364) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.pipe.Qv_in(start = 28446.004) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.pipe.Qv_out(start = -28446.004) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.pipe.Qv(start = 28446.004) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.pipe.T_in(
    start = 284.71988) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.pipe.T_out(
    start = 284.71988) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.pipe.state_in.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.pipe.state_in.T(
    start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.pipe.state_in.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.pipe.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.pipe.state_out.T(
    start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.pipe.state_out.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.pipe.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.pipe.W(start = 0,
     nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.pipe.DH(start = CoolingTower.pipe.h_out_0-CoolingTower.pipe.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.pipe.DT(start = CoolingTower.pipe.T_out_0-CoolingTower.pipe.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.pipe.C_in.Q(start = 35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.pipe.C_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.pipe.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.pipe.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.pipe.C_out.Q(start = -35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.pipe.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.pipe.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.pipe.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.pipe.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    CoolingTower.pipe.Kfr(start = 10) "Friction pressure loss coefficient";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialHeight 
    CoolingTower.pipe.delta_z(nominal = 5.0) "Height difference between outlet and inlet";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.pipe.DP_f(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.pipe.DP_z(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.Percentage CoolingTower.pipe.fouling;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.Water_inlet.h_in
    (start = 144662.44);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.Water_inlet.Xi_in
    [0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.Water_inlet.P_in(start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.Water_inlet.Q_in(start = 37253.285);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.Water_inlet.Qv_in(start = 37.44344);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.Water_inlet.T_in
    (start = 307.36984);
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.Water_inlet.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.Water_inlet.state_in.h
    (start = 144662.44, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.Water_inlet.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.Water_inlet.state_in.T
    (start = 307.36984, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.Water_inlet.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.Water_inlet.C_in.Q(start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.Water_inlet.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.Water_inlet.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.Water_inlet.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.Water_outlet.h_out(start = 90834.72);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.Water_outlet.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.Water_outlet.P_out(start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.Water_outlet.Q_out(start = -36675.855);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.Water_outlet.Qv_out(start = -36.728794);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.Water_outlet.T_out
    (start = 294.4875);
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.Water_outlet.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.Water_outlet.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.Water_outlet.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.Water_outlet.state_out.T
    (start = 294.4875, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.Water_outlet.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.Water_outlet.C_out.Q(start = -36675.855, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.Water_outlet.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.Water_outlet.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.Water_outlet.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC194_sensor.Q
    (start = 36675.855, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC194_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.P(start = 
    1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC194_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC194_sensor.state.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC194_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC194_sensor.state.T(start = 
    294.4875, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC194_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC194_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.C_in.Q(start = 36675.855, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.C_in.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC194_sensor.C_out.Q(start = -36675.855, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.C_out.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.h_in
    (start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.h_out
    (start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.flow_model.Q(start = 36675.855) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_in
    (start = 1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_out
    (start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC194_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho_in
    (start = 998.5586) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho_out
    (start = 998.5586) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho
    (start = 998.5586) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC194_sensor.flow_model.Qv_in(start = 36.728794) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC194_sensor.flow_model.Qv_out(start = -36.728794) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC194_sensor.flow_model.Qv(start = 36.728794) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.flow_model.T_in
    (start = 294.4875) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.flow_model.T_out
    (start = 294.4875) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC194_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC194_sensor.flow_model.state_in.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC194_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC194_sensor.flow_model.state_in.T
    (start = 294.4875, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC194_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC194_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC194_sensor.flow_model.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC194_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC194_sensor.flow_model.state_out.T
    (start = 294.4875, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC194_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC194_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC194_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC194_sensor.flow_model.DH(start = CEC194_sensor.flow_model.h_out_0-
    CEC194_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC194_sensor.flow_model.DT(start = CEC194_sensor.flow_model.T_out_0-
    CEC194_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.flow_model.C_in.Q(start = 36675.855, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC194_sensor.flow_model.C_out.Q(start = -36675.855, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P(
    start = 1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.flow_model.T
    (start = 294.4875) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.T(start = 
    294.4875);
  Real CEC194_sensor.T_degC(start = 21.337496, nominal = 573.15, unit = "degC");
  Real CEC194_sensor.T_degF(start = 70.40749, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate flow_sensor.Q(
    start = 36675.855, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction flow_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.P(start = 
    1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase flow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy flow_sensor.state.h(start = 
    90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density flow_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature flow_sensor.state.T(start = 
    294.4875, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure flow_sensor.state.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    flow_sensor.C_in.Q(start = 36675.855, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.C_in.P(start = 
    1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction flow_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    flow_sensor.C_out.Q(start = -36675.855, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.C_out.P(
    start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction flow_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.flow_model.h_in
    (start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.flow_model.h_out
    (start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    flow_sensor.flow_model.Q(start = 36675.855) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.P_in
    (start = 1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.P_out
    (start = 1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density flow_sensor.flow_model.rho_in
    (start = 998.5586) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density flow_sensor.flow_model.rho_out
    (start = 998.5586) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density flow_sensor.flow_model.rho(
    start = 998.5586) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    flow_sensor.flow_model.Qv_in(start = 36.728794) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    flow_sensor.flow_model.Qv_out(start = -36.728794) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    flow_sensor.flow_model.Qv(start = 36.728794) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature flow_sensor.flow_model.T_in
    (start = 294.4875) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature flow_sensor.flow_model.T_out
    (start = 294.4875) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy flow_sensor.flow_model.state_in.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density flow_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature flow_sensor.flow_model.state_in.T(
    start = 294.4875, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy flow_sensor.flow_model.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density flow_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature flow_sensor.flow_model.state_out.T
    (start = 294.4875, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power flow_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    flow_sensor.flow_model.DH(start = flow_sensor.flow_model.h_out_0-
    flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    flow_sensor.flow_model.DT(start = flow_sensor.flow_model.T_out_0-
    flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    flow_sensor.flow_model.C_in.Q(start = 36675.855, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.C_in.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    flow_sensor.flow_model.C_out.Q(start = -36675.855, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.C_out.P
    (start = 1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.flow_model.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy flow_sensor.flow_model.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure flow_sensor.flow_model.P(
    start = 1503761.4) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature flow_sensor.flow_model.T
    (start = 294.4875) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate flow_sensor.Qv(
    start = 36.728794);
  Real flow_sensor.Q_lm(start = 2203727.8, nominal = 6000.0);
  Real flow_sensor.Q_th(start = 132033.08, nominal = 360.0);
  Real flow_sensor.Q_lbs(start = 16635.89, nominal = 45.3592428);
  Real flow_sensor.Q_Mlbh(start = 291.0831, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    BIL177_AVG_sensor.h_out(start = 29824.578);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    BIL177_AVG_sensor.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    BIL177_AVG_sensor.P_out(start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    BIL177_AVG_sensor.Q_out(start = -35239.945);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    BIL177_AVG_sensor.Qv_out(start = -28446.004);
  MetroscopeModelingLibrary.Utilities.Units.Temperature BIL177_AVG_sensor.T_out(
    start = 284.71988);
  Modelica.Media.Interfaces.Types.AbsolutePressure BIL177_AVG_sensor.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature BIL177_AVG_sensor.state_out.T(
    start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction BIL177_AVG_sensor.state_out.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    BIL177_AVG_sensor.C_out.Q(start = -35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL177_AVG_sensor.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL177_AVG_sensor.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction BIL177_AVG_sensor.C_out.Xi_outflow
    [1];
  Real BIL177_AVG_sensor.relative_humidity(start = BIL177_AVG_sensor.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy sink.h_in(start = 
    86687.3);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction sink.Xi_in[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure sink.P_in(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate sink.Q_in(
    start = 35817.38);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate sink.Qv_in(
    start = 30861.125);
  MetroscopeModelingLibrary.Utilities.Units.Temperature sink.T_in(start = 
    300.9981);
  Modelica.Media.Interfaces.Types.AbsolutePressure sink.state_in.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature sink.state_in.T(start = 300.9981, 
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction sink.state_in.X[2](start = {0.01,
     0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate sink.C_in.Q(
    start = 35817.38, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure sink.C_in.P(start = 
    101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy sink.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction sink.C_in.Xi_outflow[1];
  Real sink.relative_humidity(start = sink.relative_humidity_0, min = 0.0, 
    max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.Q(start = 35239.945, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Flow_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Flow_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Flow_sensor.state.T(
    start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirInlet_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.C_in.Q(start = 35239.945, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Flow_sensor.C_out.Q(start = -35239.945, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.h_in
    (start = 29824.578) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.h_out
    (start = 29824.578) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.flow_model.Q(start = 35239.945) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Flow_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho_in
    (start = 1.2388364) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho_out
    (start = 1.2388364) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho
    (start = 1.2388364) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Flow_sensor.flow_model.Qv_in(start = 28446.004) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirInlet_Flow_sensor.flow_model.Qv_out(start = -28446.004) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Flow_sensor.flow_model.Qv(start = 28446.004) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Flow_sensor.flow_model.T_in
    (start = 284.71988) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Flow_sensor.flow_model.T_out
    (start = 284.71988) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Flow_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Flow_sensor.flow_model.state_in.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Flow_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Flow_sensor.flow_model.state_out.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirInlet_Flow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirInlet_Flow_sensor.flow_model.DH(start = AirInlet_Flow_sensor.flow_model.h_out_0
    -AirInlet_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirInlet_Flow_sensor.flow_model.DT(start = AirInlet_Flow_sensor.flow_model.T_out_0
    -AirInlet_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.flow_model.C_in.Q(start = 35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Flow_sensor.flow_model.C_out.Q(start = -35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Flow_sensor.flow_model.T
    (start = 284.71988) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate AirInlet_Flow_sensor.Qv
    (start = 28446.004);
  Real AirInlet_Flow_sensor.Q_lm(start = 1706760200.0, nominal = 6000.0);
  Real AirInlet_Flow_sensor.Q_th(start = 126863.805, nominal = 360.0);
  Real AirInlet_Flow_sensor.Q_lbs(start = 15984.573, nominal = 45.3592428);
  Real AirInlet_Flow_sensor.Q_Mlbh(start = 279.68683, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    BIL176_AVG_sensor.Q(start = 35239.945, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction BIL176_AVG_sensor.Xi[1]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure BIL176_AVG_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature BIL176_AVG_sensor.state.T(start = 
    284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction BIL176_AVG_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate BIL176_AVG_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    BIL176_AVG_sensor.C_in.Q(start = 35239.945, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.C_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction BIL176_AVG_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    BIL176_AVG_sensor.C_out.Q(start = -35239.945, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction BIL176_AVG_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.flow_model.h_in
    (start = 29824.578) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.flow_model.h_out
    (start = 29824.578) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    BIL176_AVG_sensor.flow_model.Q(start = 35239.945) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction BIL176_AVG_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density BIL176_AVG_sensor.flow_model.rho_in
    (start = 1.2388364) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density BIL176_AVG_sensor.flow_model.rho_out
    (start = 1.2388364) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density BIL176_AVG_sensor.flow_model.rho
    (start = 1.2388364) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    BIL176_AVG_sensor.flow_model.Qv_in(start = 28446.004) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    BIL176_AVG_sensor.flow_model.Qv_out(start = -28446.004) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    BIL176_AVG_sensor.flow_model.Qv(start = 28446.004) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature BIL176_AVG_sensor.flow_model.T_in
    (start = 284.71988) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature BIL176_AVG_sensor.flow_model.T_out
    (start = 284.71988) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure BIL176_AVG_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature BIL176_AVG_sensor.flow_model.state_in.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction BIL176_AVG_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure BIL176_AVG_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature BIL176_AVG_sensor.flow_model.state_out.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction BIL176_AVG_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    BIL176_AVG_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power BIL176_AVG_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    BIL176_AVG_sensor.flow_model.DH(start = BIL176_AVG_sensor.flow_model.h_out_0
    -BIL176_AVG_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    BIL176_AVG_sensor.flow_model.DT(start = BIL176_AVG_sensor.flow_model.T_out_0
    -BIL176_AVG_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    BIL176_AVG_sensor.flow_model.C_in.Q(start = 35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction BIL176_AVG_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    BIL176_AVG_sensor.flow_model.C_out.Q(start = -35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.flow_model.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction BIL176_AVG_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy BIL176_AVG_sensor.flow_model.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure BIL176_AVG_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature BIL176_AVG_sensor.flow_model.T
    (start = 284.71988) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature BIL176_AVG_sensor.T(
    start = 284.71988);
  Real BIL176_AVG_sensor.T_degC(start = 11.569875, nominal = 573.15, unit = 
    "degC");
  Real BIL176_AVG_sensor.T_degF(start = 52.825775, nominal = 1063.67, unit = 
    "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.Q(start = 35239.945, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Press_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Press_sensor.state.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Press_sensor.state.T(
    start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirInlet_Press_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.C_in.Q(start = 35239.945, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Press_sensor.C_out.Q(start = -35239.945, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.h_in
    (start = 29824.578) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.h_out
    (start = 29824.578) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.flow_model.Q(start = 35239.945) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Press_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho_in
    (start = 1.2388364) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho_out
    (start = 1.2388364) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho
    (start = 1.2388364) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Press_sensor.flow_model.Qv_in(start = 28446.004) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirInlet_Press_sensor.flow_model.Qv_out(start = -28446.004) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Press_sensor.flow_model.Qv(start = 28446.004) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Press_sensor.flow_model.T_in
    (start = 284.71988) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Press_sensor.flow_model.T_out
    (start = 284.71988) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Press_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Press_sensor.flow_model.state_in.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Press_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Press_sensor.flow_model.state_out.T
    (start = 284.71988, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Press_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirInlet_Press_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirInlet_Press_sensor.flow_model.DH(start = AirInlet_Press_sensor.flow_model.h_out_0
    -AirInlet_Press_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirInlet_Press_sensor.flow_model.DT(start = AirInlet_Press_sensor.flow_model.T_out_0
    -AirInlet_Press_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.flow_model.C_in.Q(start = 35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Press_sensor.flow_model.C_out.Q(start = -35239.945, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.C_out.h_outflow
    (start = 29824.578);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.h
    (start = 29824.578) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Press_sensor.flow_model.T
    (start = 284.71988) "Temperature of the fluid into the component";
  Real AirInlet_Press_sensor.P_barG(start = 0.0169539, nominal = 100000.0);
  Real AirInlet_Press_sensor.P_psiG(start = 0.24592221, nominal = 14.5038);
  Real AirInlet_Press_sensor.P_MPaG(start = 0.00169539, nominal = 
    0.09999999999999999);
  Real AirInlet_Press_sensor.P_kPaG(start = 1.69539, nominal = 100.0);
  Real AirInlet_Press_sensor.P_barA(start = 1.016954, nominal = 1.0, unit = 
    "bar");
  Real AirInlet_Press_sensor.P_psiA(start = 14.749696, nominal = 14.5038);
  Real AirInlet_Press_sensor.P_MPaA(start = 0.10169539, nominal = 
    0.09999999999999999);
  Real AirInlet_Press_sensor.P_kPaA(start = 101.69539, nominal = 100.0);
  Real AirInlet_Press_sensor.P_inHg(start = 30.03071, nominal = 29.530060000000002);
  Real AirInlet_Press_sensor.P_mbar(start = 1016.9539, nominal = 1000.0, unit = 
    "mbar");
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    source1.h_out(start = 78431.805);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    source1.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure source1.P_out(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source1.Q_out(
    start = -34680.78);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    source1.Qv_out(start = -34.734013);
  MetroscopeModelingLibrary.Utilities.Units.Temperature source1.T_out(start = 
    291.83926);
  Modelica.Media.Interfaces.Types.FixedPhase source1.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy source1.state_out.h(start = 
    78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density source1.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature source1.state_out.T(start = 
    291.83926, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure source1.state_out.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source1.C_out.Q
    (start = -34680.78, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure source1.C_out.P(start = 
    101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy source1.C_out.h_outflow
    (start = 78431.805);
  Modelica.Media.Interfaces.Types.MassFraction source1.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h_in(
    start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h_out(
    start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V423_valve.Q(
    start = 4964.808) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_in(start = 
    1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_out(start = 
    101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V423_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_in(start = 
    998.5586) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_out(start = 
    997.851) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho(start = 
    998.20483) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V423_valve.Qv_in(start = 4.9719744) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V423_valve.Qv_out(start = -4.9755) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V423_valve.Qv
    (start = 4.9737372) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_in(start = 
    294.4875) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_out(
    start = 294.80356) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V423_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V423_valve.state_in.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V423_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V423_valve.state_in.T(start = 
    294.4875, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V423_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V423_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V423_valve.state_out.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V423_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V423_valve.state_out.T(start = 
    294.80356, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V423_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V423_valve.DP(
    start = -1402066.0);
  MetroscopeModelingLibrary.Utilities.Units.Power V423_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V423_valve.DH(
    start = V423_valve.h_out_0-V423_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V423_valve.DT(start = V423_valve.T_out_0-V423_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V423_valve.C_in.Q(start = 4964.808, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.C_in.P(start = 
    1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V423_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V423_valve.C_out.Q(start = -4964.808, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.C_out.P(start = 
    101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction V423_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V423_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V423_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V423_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h_in(
    start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h_out(
    start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V422_valve.Q(
    start = 29138.543) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_in(start = 
    1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_out(start = 
    2586.242) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V422_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_in(start = 
    998.5586) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_out(start = 
    341.0937) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho(start = 
    669.8262) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V422_valve.Qv_in(start = 29.180603) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V422_valve.Qv_out(start = -85.4268) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V422_valve.Qv
    (start = 57.3037) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_in(start = 
    294.4875) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_out(
    start = 294.80438) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V422_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_valve.state_in.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_valve.state_in.T(start = 
    294.4875, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V422_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_valve.state_out.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_valve.state_out.T(start = 
    294.80438, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V422_valve.DP(
    start = -1501175.1);
  MetroscopeModelingLibrary.Utilities.Units.Power V422_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V422_valve.DH(
    start = V422_valve.h_out_0-V422_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V422_valve.DT(start = V422_valve.T_out_0-V422_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_valve.C_in.Q(start = 29138.543, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.C_in.P(start = 
    1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V422_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V422_valve.C_out.Q(start = -29138.543, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.C_out.P(start = 
    2586.242);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction V422_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V422_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V422_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V422_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    SP189_sensor.Opening_pc(start = SP189_sensor.Opening_pc_0, nominal = 15.0, 
    unit = "1");
  Modelica.Blocks.Interfaces.RealOutput SP189_sensor.Opening(start = 
    SP189_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0, max = 
    1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    CEC195_sensor.Opening_pc(start = CEC195_sensor.Opening_pc_0, nominal = 15.0,
     unit = "1");
  Modelica.Blocks.Interfaces.RealOutput CEC195_sensor.Opening(start = 
    CEC195_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0, 
    max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.Q(start = 34103.35, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.P(start = 
    101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_sensor.state.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_sensor.state.T(start = 
    294.80356, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_reject_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.C_in.Q(start = 34103.35, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.C_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_sensor.C_out.Q(start = -34103.35, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.h_in
    (start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.h_out
    (start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.flow_model.Q(start = 34103.35) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho_in
    (start = 997.851) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho_out
    (start = 997.851) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho
    (start = 997.851) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_sensor.flow_model.Qv_in(start = 34.176796) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_reject_sensor.flow_model.Qv_out(start = -34.176796) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_sensor.flow_model.Qv(start = 34.176796) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_sensor.flow_model.T_in
    (start = 294.80356) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_sensor.flow_model.T_out
    (start = 294.80356) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_sensor.flow_model.state_in.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_sensor.flow_model.state_in.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_sensor.flow_model.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_sensor.flow_model.state_out.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_reject_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_reject_sensor.flow_model.DH(start = Q_reject_sensor.flow_model.h_out_0-
    Q_reject_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_reject_sensor.flow_model.DT(start = Q_reject_sensor.flow_model.T_out_0-
    Q_reject_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.flow_model.C_in.Q(start = 34103.35, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_sensor.flow_model.C_out.Q(start = -34103.35, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_sensor.flow_model.T
    (start = 294.80356) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Q_reject_sensor.Qv(
    start = 34.176796);
  Real Q_reject_sensor.Q_lm(start = 2050607.6, nominal = 6000.0);
  Real Q_reject_sensor.Q_th(start = 122772.06, nominal = 360.0);
  Real Q_reject_sensor.Q_lbs(start = 15469.021, nominal = 45.3592428);
  Real Q_reject_sensor.Q_Mlbh(start = 270.66605, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.Q(start = 34103.35, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_press_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.state.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.state.T(
    start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_reject_press_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.C_in.Q(start = 34103.35, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_press_sensor.C_out.Q(start = -34103.35, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h_in
    (start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h_out
    (start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.Q(start = 34103.35) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_press_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_in
    (start = 997.851) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_out
    (start = 997.851) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho
    (start = 997.851) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv_in(start = 34.176796) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv_out(start = -34.176796) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv(start = 34.176796) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T_in
    (start = 294.80356) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T_out
    (start = 294.80356) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.flow_model.state_in.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.flow_model.state_in.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.flow_model.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.flow_model.state_out.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_press_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_reject_press_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_reject_press_sensor.flow_model.DH(start = Q_reject_press_sensor.flow_model.h_out_0
    -Q_reject_press_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_reject_press_sensor.flow_model.DT(start = Q_reject_press_sensor.flow_model.T_out_0
    -Q_reject_press_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.C_in.Q(start = 34103.35, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_press_sensor.flow_model.C_out.Q(start = -34103.35, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T
    (start = 294.80356) "Temperature of the fluid into the component";
  Real Q_reject_press_sensor.P_barG(start = 0.0169539, nominal = 100000.0);
  Real Q_reject_press_sensor.P_psiG(start = 0.24592221, nominal = 14.5038);
  Real Q_reject_press_sensor.P_MPaG(start = 0.00169539, nominal = 
    0.09999999999999999);
  Real Q_reject_press_sensor.P_kPaG(start = 1.69539, nominal = 100.0);
  Real Q_reject_press_sensor.P_barA(start = 1.016954, nominal = 1.0, unit = 
    "bar");
  Real Q_reject_press_sensor.P_psiA(start = 14.749696, nominal = 14.5038);
  Real Q_reject_press_sensor.P_MPaA(start = 0.10169539, nominal = 
    0.09999999999999999);
  Real Q_reject_press_sensor.P_kPaA(start = 101.69539, nominal = 100.0);
  Real Q_reject_press_sensor.P_inHg(start = 30.03071, nominal = 29.530060000000002);
  Real Q_reject_press_sensor.P_mbar(start = 1016.9539, nominal = 1000.0, unit = 
    "mbar");
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.h_in(start = 
    79288.28) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.h_out(start = 
    80692.1) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Pump.Q(start = 
    37253.285) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_in(start = 101695.39)
     "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_out(start = 
    1503761.4) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Pump.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_in(start = 998.4279)
     "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_out(start = 
    999.06757) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho(start = 998.74774) 
    "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate Pump.Qv_in(
    start = 37.311943) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate Pump.Qv_out(
    start = -37.288055) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate Pump.Qv(
    start = 37.3) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_in(start = 
    292.04395) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_out(start = 
    292.061) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Pump.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Pump.state_in.h(start = 
    79288.28, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Pump.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Pump.state_in.T(start = 292.04395,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Pump.state_in.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Pump.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Pump.state_out.h(start = 
    80692.1, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Pump.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Pump.state_out.T(start = 292.061, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Pump.state_out.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure Pump.DP(
    start = 1402066.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Pump.W(start = 0, nominal = 
    1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy Pump.DH(
    start = Pump.h_out_0-Pump.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature Pump.DT(
    start = Pump.T_out_0-Pump.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Pump.C_in.Q(
    start = 37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.C_in.P(start = 
    101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Pump.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate Pump.C_out.Q(
    start = -37253.285, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.C_out.P(start = 
    1503761.4, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.C_out.h_outflow
    (start = 80692.1);
  Modelica.Media.Interfaces.Types.MassFraction Pump.C_out.Xi_outflow[0];
  Real Pump.VRotn(start = 1400, nominal = 2000.0, min = 0.0) "Nominal rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.a1(start = 0) 
    "x^2 coef. of the pump characteristics hn = f(vol_flow) (s2/m5)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.a2(start = 0) 
    "x coef. of the pump characteristics hn = f(vol_flow) (s/m2)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputHeight Pump.a3(start = 10)
     "Constant coef. of the pump characteristics hn = f(vol_flow) (m)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.b1(start = 0) 
    "x^2 coef. of the pump efficiency characteristics rh = f(vol_flow) (s2/m6)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.b2(start = 0) 
    "x coef. of the pump efficiency characteristics rh = f(vol_flow) (s/m3)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.b3(start = 
    0.8) "Constant coef. of the pump efficiency characteristics rh = f(vol_flow) (s.u.)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.rm(start = 
    0.85) "Product of the pump mechanical and electrical efficiencies";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.rh_min(
    start = 0.2) "Minimum efficiency to avoid zero crossings";
  MetroscopeModelingLibrary.Utilities.Units.Yield Pump.rh "Hydraulic efficiency";
  MetroscopeModelingLibrary.Utilities.Units.Height Pump.hn(start = 10) 
    "Pump head";
  MetroscopeModelingLibrary.Utilities.Units.Fraction Pump.R(start = 1) 
    "Reduced rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.Power Pump.Wh "Hydraulic power";
  MetroscopeModelingLibrary.Utilities.Units.PositivePower Pump.Wm 
    "Mechanical power";
  Modelica.Blocks.Interfaces.RealInput Pump.VRot "Pump rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.PositivePower Pump.C_power.W;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC809_sensor.Q
    (start = 34680.78, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC809_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.P(start = 
    101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.h(
    start = 78431.805) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC809_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC809_sensor.state.h(
    start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC809_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC809_sensor.state.T(start = 
    291.83926, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC809_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC809_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.C_in.Q(start = 34680.78, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.C_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC809_sensor.C_out.Q(start = -34680.78, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.C_out.h_outflow
    (start = 78431.805);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.h_in
    (start = 78431.805) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.h_out
    (start = 78431.805) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.flow_model.Q(start = 34680.78) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC809_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho_in
    (start = 998.46747) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho_out
    (start = 998.46747) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho
    (start = 998.46747) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC809_sensor.flow_model.Qv_in(start = 34.734013) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC809_sensor.flow_model.Qv_out(start = -34.734013) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC809_sensor.flow_model.Qv(start = 34.734013) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.flow_model.T_in
    (start = 291.83926) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.flow_model.T_out
    (start = 291.83926) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC809_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC809_sensor.flow_model.state_in.h
    (start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC809_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC809_sensor.flow_model.state_in.T
    (start = 291.83926, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC809_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC809_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC809_sensor.flow_model.state_out.h
    (start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC809_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC809_sensor.flow_model.state_out.T
    (start = 291.83926, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC809_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC809_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC809_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC809_sensor.flow_model.DH(start = CEC809_sensor.flow_model.h_out_0-
    CEC809_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC809_sensor.flow_model.DT(start = CEC809_sensor.flow_model.T_out_0-
    CEC809_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.flow_model.C_in.Q(start = 34680.78, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC809_sensor.flow_model.C_out.Q(start = -34680.78, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.C_out.h_outflow
    (start = 78431.805);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.h
    (start = 78431.805) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.flow_model.T
    (start = 291.83926) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.T(start = 
    291.83926);
  Real CEC809_sensor.T_degC(start = 18.689259, nominal = 573.15, unit = "degC");
  Real CEC809_sensor.T_degF(start = 65.64066, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Press1_sensor.Q
    (start = 34680.78, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press1_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.P(start = 
    101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.h(
    start = 78431.805) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.state.h(
    start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.state.T(start = 
    291.83926, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Press1_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.C_in.Q(start = 34680.78, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.C_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press1_sensor.C_out.Q(start = -34680.78, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.C_out.h_outflow
    (start = 78431.805);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h_in
    (start = 78431.805) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h_out
    (start = 78431.805) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.Q(start = 34680.78) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press1_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_in
    (start = 998.46747) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_out
    (start = 998.46747) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho
    (start = 998.46747) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press1_sensor.flow_model.Qv_in(start = 34.734013) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Press1_sensor.flow_model.Qv_out(start = -34.734013) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press1_sensor.flow_model.Qv(start = 34.734013) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T_in
    (start = 291.83926) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T_out
    (start = 291.83926) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.flow_model.state_in.h
    (start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.flow_model.state_in.T
    (start = 291.83926, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.flow_model.state_out.h
    (start = 78431.805, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.flow_model.state_out.T
    (start = 291.83926, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press1_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Press1_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Press1_sensor.flow_model.DH(start = Press1_sensor.flow_model.h_out_0-
    Press1_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Press1_sensor.flow_model.DT(start = Press1_sensor.flow_model.T_out_0-
    Press1_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.C_in.Q(start = 34680.78, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press1_sensor.flow_model.C_out.Q(start = -34680.78, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.C_out.h_outflow
    (start = 78431.805);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h
    (start = 78431.805) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T
    (start = 291.83926) "Temperature of the fluid into the component";
  Real Press1_sensor.P_barG(start = 0.0169539, nominal = 100000.0);
  Real Press1_sensor.P_psiG(start = 0.24592221, nominal = 14.5038);
  Real Press1_sensor.P_MPaG(start = 0.00169539, nominal = 0.09999999999999999);
  Real Press1_sensor.P_kPaG(start = 1.69539, nominal = 100.0);
  Real Press1_sensor.P_barA(start = 1.016954, nominal = 1.0, unit = "bar");
  Real Press1_sensor.P_psiA(start = 14.749696, nominal = 14.5038);
  Real Press1_sensor.P_MPaA(start = 0.10169539, nominal = 0.09999999999999999);
  Real Press1_sensor.P_kPaA(start = 101.69539, nominal = 100.0);
  Real Press1_sensor.P_inHg(start = 30.03071, nominal = 29.530060000000002);
  Real Press1_sensor.P_mbar(start = 1016.9539, nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.NegativePower source.W_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativePower source.C_out.W;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h_in(
    start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h_out(
    start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V421_valve.Q(
    start = 2572.5046) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_in(start = 
    1503761.4) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_out(start = 
    101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V421_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_in(start = 
    998.5586) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_out(start = 
    997.851) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho(start = 
    998.20483) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V421_valve.Qv_in(start = 2.5762181) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V421_valve.Qv_out(start = -2.578045) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V421_valve.Qv
    (start = 2.5771315) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_in(start = 
    294.4875) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_out(
    start = 294.80356) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V421_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V421_valve.state_in.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V421_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V421_valve.state_in.T(start = 
    294.4875, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V421_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V421_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V421_valve.state_out.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V421_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V421_valve.state_out.T(start = 
    294.80356, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V421_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V421_valve.DP(
    start = -1402066.0);
  MetroscopeModelingLibrary.Utilities.Units.Power V421_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V421_valve.DH(
    start = V421_valve.h_out_0-V421_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V421_valve.DT(start = V421_valve.T_out_0-V421_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V421_valve.C_in.Q(start = 2572.5046, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.C_in.P(start = 
    1503761.4);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V421_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V421_valve.C_out.Q(start = -2572.5046, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.C_out.P(start = 
    101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction V421_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V421_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V421_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V421_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    CEC191_sensor.Opening_pc(start = CEC191_sensor.Opening_pc_0, nominal = 15.0,
     unit = "1");
  Modelica.Blocks.Interfaces.RealOutput CEC191_sensor.Opening(start = 
    CEC191_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0, 
    max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.Q(start = 2572.5046, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_recirculation_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.state.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.state.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.state.T(
    start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_recirculation_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.C_in.Q(start = 2572.5046, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_recirculation_sensor.C_out.Q(start = -2572.5046, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h_in
    (start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h_out
    (start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.Q(start = 2572.5046) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_recirculation_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_in
    (start = 997.851) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_out
    (start = 997.851) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho
    (start = 997.851) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv_in(start = 2.578045) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv_out(start = -2.578045) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv(start = 2.578045) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T_in
    (start = 294.80356) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T_out
    (start = 294.80356) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.flow_model.state_in.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.flow_model.state_in.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.flow_model.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.flow_model.state_out.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_recirculation_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_recirculation_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_recirculation_sensor.flow_model.DH(start = Q_recirculation_sensor.flow_model.h_out_0
    -Q_recirculation_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_recirculation_sensor.flow_model.DT(start = Q_recirculation_sensor.flow_model.T_out_0
    -Q_recirculation_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.C_in.Q(start = 2572.5046, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_recirculation_sensor.flow_model.C_out.Q(start = -2572.5046, nominal = 
    500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T
    (start = 294.80356) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Q_recirculation_sensor.Qv
    (start = 2.578045);
  Real Q_recirculation_sensor.Q_lm(start = 154682.69, nominal = 6000.0);
  Real Q_recirculation_sensor.Q_th(start = 9261.017, nominal = 360.0);
  Real Q_recirculation_sensor.Q_lbs(start = 1166.8687, nominal = 45.3592428);
  Real Q_recirculation_sensor.Q_Mlbh(start = 20.417048, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC197_sensor.Q
    (start = 4964.808, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC197_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.P(start = 
    101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.state.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.state.T(start = 
    294.80356, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC197_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.C_in.Q(start = 4964.808, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.C_in.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC197_sensor.C_out.Q(start = -4964.808, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h_in
    (start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h_out
    (start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.Q(start = 4964.808) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC197_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_in
    (start = 997.851) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_out
    (start = 997.851) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho
    (start = 997.851) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC197_sensor.flow_model.Qv_in(start = 4.9755) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC197_sensor.flow_model.Qv_out(start = -4.9755) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC197_sensor.flow_model.Qv(start = 4.9755) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T_in
    (start = 294.80356) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T_out
    (start = 294.80356) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.flow_model.state_in.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.flow_model.state_in.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.flow_model.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.flow_model.state_out.T
    (start = 294.80356, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC197_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC197_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC197_sensor.flow_model.DH(start = CEC197_sensor.flow_model.h_out_0-
    CEC197_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC197_sensor.flow_model.DT(start = CEC197_sensor.flow_model.T_out_0-
    CEC197_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.C_in.Q(start = 4964.808, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC197_sensor.flow_model.C_out.Q(start = -4964.808, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T
    (start = 294.80356) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate CEC197_sensor.Qv(
    start = 4.9755);
  Real CEC197_sensor.Q_lm(start = 298530.0, nominal = 6000.0);
  Real CEC197_sensor.Q_th(start = 17873.309, nominal = 360.0);
  Real CEC197_sensor.Q_lbs(start = 2251.9993, nominal = 45.3592428);
  Real CEC197_sensor.Q_Mlbh(start = 39.4039, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.Q(start = 29138.543, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V422_Flow_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.P(start = 
    2586.242) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase V422_Flow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_Flow_sensor.state.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_Flow_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_Flow_sensor.state.T(start = 
    294.80438, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_Flow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate V422_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.C_in.Q(start = 29138.543, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.C_in.P(
    start = 2586.242);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V422_Flow_sensor.C_out.Q(start = -29138.543, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.C_out.P(
    start = 2586.242);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.h_in
    (start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.h_out
    (start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.flow_model.Q(start = 29138.543) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_in
    (start = 2586.242) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_out
    (start = 2586.242) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V422_Flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho_in
    (start = 341.0937) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho_out
    (start = 341.0937) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho
    (start = 341.0937) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V422_Flow_sensor.flow_model.Qv_in(start = 85.4268) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V422_Flow_sensor.flow_model.Qv_out(start = -85.4268) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V422_Flow_sensor.flow_model.Qv(start = 85.4268) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_Flow_sensor.flow_model.T_in
    (start = 294.80438) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_Flow_sensor.flow_model.T_out
    (start = 294.80438) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V422_Flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_Flow_sensor.flow_model.state_in.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_Flow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_Flow_sensor.flow_model.state_in.T
    (start = 294.80438, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_Flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V422_Flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_Flow_sensor.flow_model.state_out.h
    (start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_Flow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_Flow_sensor.flow_model.state_out.T
    (start = 294.80438, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_Flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V422_Flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power V422_Flow_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    V422_Flow_sensor.flow_model.DH(start = V422_Flow_sensor.flow_model.h_out_0-
    V422_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V422_Flow_sensor.flow_model.DT(start = V422_Flow_sensor.flow_model.T_out_0-
    V422_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.flow_model.C_in.Q(start = 29138.543, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.C_in.P
    (start = 2586.242);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V422_Flow_sensor.flow_model.C_out.Q(start = -29138.543, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.C_out.P
    (start = 2586.242);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.h
    (start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P
    (start = 2586.242) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_Flow_sensor.flow_model.T
    (start = 294.80438) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate V422_Flow_sensor.Qv(
    start = 85.4268);
  Real V422_Flow_sensor.Q_lm(start = 5125608.0, nominal = 6000.0);
  Real V422_Flow_sensor.Q_th(start = 104898.75, nominal = 360.0);
  Real V422_Flow_sensor.Q_lbs(start = 13217.022, nominal = 45.3592428);
  Real V422_Flow_sensor.Q_Mlbh(start = 231.26216, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    TempCond_sensor.Q(start = 1513.7383, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction TempCond_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.P(start = 
    17538.123) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.h(
    start = 171972.25) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase TempCond_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy TempCond_sensor.state.h(
    start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density TempCond_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature TempCond_sensor.state.T(start = 
    314.22363, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure TempCond_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate TempCond_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    TempCond_sensor.C_in.Q(start = 1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.C_in.P(
    start = 17538.123);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction TempCond_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    TempCond_sensor.C_out.Q(start = -1513.7383, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.C_out.P(
    start = 17538.123);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.C_out.h_outflow
    (start = 171972.25);
  Modelica.Media.Interfaces.Types.MassFraction TempCond_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.flow_model.h_in
    (start = 171972.25) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.flow_model.h_out
    (start = 171972.25) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    TempCond_sensor.flow_model.Q(start = 1513.7383) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.P_in
    (start = 17538.123) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.P_out
    (start = 17538.123) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction TempCond_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density TempCond_sensor.flow_model.rho_in
    (start = 991.77325) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density TempCond_sensor.flow_model.rho_out
    (start = 991.77325) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density TempCond_sensor.flow_model.rho
    (start = 991.77325) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    TempCond_sensor.flow_model.Qv_in(start = 1.5262947) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    TempCond_sensor.flow_model.Qv_out(start = -1.5262947) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    TempCond_sensor.flow_model.Qv(start = 1.5262947) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature TempCond_sensor.flow_model.T_in
    (start = 314.22363) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature TempCond_sensor.flow_model.T_out
    (start = 314.22363) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase TempCond_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy TempCond_sensor.flow_model.state_in.h
    (start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density TempCond_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature TempCond_sensor.flow_model.state_in.T
    (start = 314.22363, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure TempCond_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase TempCond_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy TempCond_sensor.flow_model.state_out.h
    (start = 171972.25, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density TempCond_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature TempCond_sensor.flow_model.state_out.T
    (start = 314.22363, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure TempCond_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    TempCond_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power TempCond_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    TempCond_sensor.flow_model.DH(start = TempCond_sensor.flow_model.h_out_0-
    TempCond_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    TempCond_sensor.flow_model.DT(start = TempCond_sensor.flow_model.T_out_0-
    TempCond_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    TempCond_sensor.flow_model.C_in.Q(start = 1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.C_in.P
    (start = 17538.123);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction TempCond_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    TempCond_sensor.flow_model.C_out.Q(start = -1513.7383, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.C_out.P
    (start = 17538.123);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.flow_model.C_out.h_outflow
    (start = 171972.25);
  Modelica.Media.Interfaces.Types.MassFraction TempCond_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy TempCond_sensor.flow_model.h
    (start = 171972.25) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure TempCond_sensor.flow_model.P
    (start = 17538.123) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature TempCond_sensor.flow_model.T
    (start = 314.22363) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature TempCond_sensor.T(
    start = 314.22363);
  Real TempCond_sensor.T_degC(start = 41.073635, nominal = 573.15, unit = "degC");
  Real TempCond_sensor.T_degF(start = 105.93254, nominal = 1063.67, unit = 
    "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.Q(start = 35817.38, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirOutletTemp_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.P(
    start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.h
    (start = 86687.3) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.state.T(
    start = 300.9981, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirOutletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.C_in.Q(start = 35817.38, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirOutletTemp_sensor.C_out.Q(start = -35817.38, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.C_out.h_outflow
    (start = 86687.3);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h_in
    (start = 86687.3) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h_out
    (start = 86687.3) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.Q(start = 35817.38) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_in
    (start = 101695.39) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_out
    (start = 101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirOutletTemp_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_in
    (start = 1.1605986) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_out
    (start = 1.1605986) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho
    (start = 1.1605986) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv_in(start = 30861.125) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv_out(start = -30861.125) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv(start = 30861.125) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T_in
    (start = 300.9981) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T_out
    (start = 300.9981) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.flow_model.state_in.T
    (start = 300.9981, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.flow_model.state_out.T
    (start = 300.9981, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirOutletTemp_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirOutletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirOutletTemp_sensor.flow_model.DH(start = AirOutletTemp_sensor.flow_model.h_out_0
    -AirOutletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirOutletTemp_sensor.flow_model.DT(start = AirOutletTemp_sensor.flow_model.T_out_0
    -AirOutletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.C_in.Q(start = 35817.38, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.C_in.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirOutletTemp_sensor.flow_model.C_out.Q(start = -35817.38, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.C_out.P
    (start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.C_out.h_outflow
    (start = 86687.3);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h
    (start = 86687.3) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P
    (start = 101695.39) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T
    (start = 300.9981) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.T(
    start = 300.9981);
  Real AirOutletTemp_sensor.T_degC(start = 27.84812, nominal = 573.15, unit = 
    "degC");
  Real AirOutletTemp_sensor.T_degF(start = 82.12662, nominal = 1063.67, unit = 
    "degF");
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy pressureCut.h_in(
    start = 90834.72) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy pressureCut.h_out(
    start = 90834.72) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate pressureCut.Q(
    start = 29138.543) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure pressureCut.P_in(start = 
    2586.242) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure pressureCut.P_out(start = 
    101695.39) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction pressureCut.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density pressureCut.rho_in(start = 
    341.0937) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density pressureCut.rho_out(start = 
    997.851) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density pressureCut.rho(start = 
    669.47235) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    pressureCut.Qv_in(start = 85.4268) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    pressureCut.Qv_out(start = -29.201294) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    pressureCut.Qv(start = 57.31405) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature pressureCut.T_in(
    start = 294.80438) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature pressureCut.T_out(
    start = 294.80356) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase pressureCut.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy pressureCut.state_in.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density pressureCut.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature pressureCut.state_in.T(start = 
    294.80438, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure pressureCut.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase pressureCut.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy pressureCut.state_out.h(
    start = 90834.72, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density pressureCut.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature pressureCut.state_out.T(start = 
    294.80356, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure pressureCut.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure pressureCut.DP(
    start = 99109.15);
  MetroscopeModelingLibrary.Utilities.Units.Power pressureCut.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy pressureCut.DH(
    start = pressureCut.h_out_0-pressureCut.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    pressureCut.DT(start = pressureCut.T_out_0-pressureCut.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    pressureCut.C_in.Q(start = 29138.543, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure pressureCut.C_in.P(start = 
    2586.242);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy pressureCut.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction pressureCut.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    pressureCut.C_out.Q(start = -29138.543, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure pressureCut.C_out.P(
    start = 101695.39);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy pressureCut.C_out.h_outflow
    (start = 90834.72);
  Modelica.Media.Interfaces.Types.MassFraction pressureCut.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy pressureCut.h(
    start = 90834.72) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    pressureCut.DP_input(start = 99109.15);
  Real CoolingTower_bypass.Q;
  Real CoolingTower_bypass.Q_th;
  Real CoolingTower_bypass.Q_lbs;
  Real CoolingTower_bypass.Q_Mlbh;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    CoolingTower_bypass.DP_input(start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.C_in.Q(start = 500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.C_in.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower_bypass.C_out.Q(start = -500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_sensor.Q(start = CoolingTower_bypass.flow_sensor.Q_0,
     nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower_bypass.flow_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.P
    (start = CoolingTower_bypass.flow_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.h
    (start = CoolingTower_bypass.flow_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower_bypass.flow_sensor.state.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower_bypass.flow_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower_bypass.flow_sensor.state.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower_bypass.flow_sensor.state.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower_bypass.flow_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower_bypass.flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_sensor.C_in.Q(start = CoolingTower_bypass.flow_sensor.Q_0,
     nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.C_in.P
    (start = CoolingTower_bypass.flow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.flow_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower_bypass.flow_sensor.C_out.Q(start =  -CoolingTower_bypass.flow_sensor.Q_0,
     nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.C_out.P
    (start = CoolingTower_bypass.flow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.flow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.flow_model.h_in
    (start = CoolingTower_bypass.flow_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.flow_model.h_out
    (start = CoolingTower_bypass.flow_sensor.flow_model.h_out_0) 
    "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_sensor.flow_model.Q(start = CoolingTower_bypass.flow_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.P_in
    (start = CoolingTower_bypass.flow_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.P_out
    (start = CoolingTower_bypass.flow_sensor.flow_model.P_out_0) 
    "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower_bypass.flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_sensor.flow_model.rho_in
    (start = CoolingTower_bypass.flow_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_sensor.flow_model.rho_out
    (start = CoolingTower_bypass.flow_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_sensor.flow_model.rho
    (start = CoolingTower_bypass.flow_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower_bypass.flow_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower_bypass.flow_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower_bypass.flow_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower_bypass.flow_sensor.flow_model.T_in
    (start = CoolingTower_bypass.flow_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower_bypass.flow_sensor.flow_model.T_out
    (start = CoolingTower_bypass.flow_sensor.flow_model.T_out_0) 
    "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower_bypass.flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower_bypass.flow_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower_bypass.flow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower_bypass.flow_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower_bypass.flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower_bypass.flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower_bypass.flow_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower_bypass.flow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower_bypass.flow_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower_bypass.flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower_bypass.flow_sensor.flow_model.DP(start = CoolingTower_bypass.flow_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower_bypass.flow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower_bypass.flow_sensor.flow_model.DH(start = CoolingTower_bypass.flow_sensor.flow_model.h_out_0
    -CoolingTower_bypass.flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower_bypass.flow_sensor.flow_model.DT(start = CoolingTower_bypass.flow_sensor.flow_model.T_out_0
    -CoolingTower_bypass.flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_sensor.flow_model.C_in.Q(start = CoolingTower_bypass.flow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.C_in.P
    (start = CoolingTower_bypass.flow_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower_bypass.flow_sensor.flow_model.C_out.Q(start =  -
    CoolingTower_bypass.flow_sensor.flow_model.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.C_out.P
    (start = CoolingTower_bypass.flow_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.flow_model.C_out.h_outflow
    (start = CoolingTower_bypass.flow_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_sensor.flow_model.h
    (start = CoolingTower_bypass.flow_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_sensor.flow_model.P
    (start = CoolingTower_bypass.flow_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower_bypass.flow_sensor.flow_model.T
    (start = CoolingTower_bypass.flow_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate CoolingTower_bypass.flow_sensor.Qv
    (start = CoolingTower_bypass.flow_sensor.Qv_0);
  Real CoolingTower_bypass.flow_sensor.Q_lm(start = CoolingTower_bypass.flow_sensor.Qv_0
    *60000, nominal = 6000.0);
  Real CoolingTower_bypass.flow_sensor.Q_th(start = CoolingTower_bypass.flow_sensor.Q_0
    *3.6, nominal = 360.0);
  Real CoolingTower_bypass.flow_sensor.Q_lbs(start = CoolingTower_bypass.flow_sensor.Q_0
    *0.453592428, nominal = 45.3592428);
  Real CoolingTower_bypass.flow_sensor.Q_Mlbh(start = CoolingTower_bypass.flow_sensor.Q_0
    *0.0079366414387, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_model.h_in
    (start = CoolingTower_bypass.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_model.h_out
    (start = CoolingTower_bypass.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_model.Q(start = CoolingTower_bypass.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_model.P_in
    (start = CoolingTower_bypass.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_model.P_out
    (start = CoolingTower_bypass.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower_bypass.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_model.rho_in
    (start = CoolingTower_bypass.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_model.rho_out
    (start = CoolingTower_bypass.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower_bypass.flow_model.rho
    (start = CoolingTower_bypass.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower_bypass.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower_bypass.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower_bypass.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower_bypass.flow_model.T_in
    (start = CoolingTower_bypass.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower_bypass.flow_model.T_out
    (start = CoolingTower_bypass.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower_bypass.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower_bypass.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower_bypass.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower_bypass.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower_bypass.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower_bypass.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower_bypass.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower_bypass.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower_bypass.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower_bypass.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower_bypass.flow_model.DP(start = CoolingTower_bypass.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower_bypass.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower_bypass.flow_model.DH(start = CoolingTower_bypass.flow_model.h_out_0
    -CoolingTower_bypass.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower_bypass.flow_model.DT(start = CoolingTower_bypass.flow_model.T_out_0
    -CoolingTower_bypass.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower_bypass.flow_model.C_in.Q(start = CoolingTower_bypass.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_model.C_in.P
    (start = CoolingTower_bypass.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower_bypass.flow_model.C_out.Q(start =  -CoolingTower_bypass.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower_bypass.flow_model.C_out.P
    (start = CoolingTower_bypass.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_model.C_out.h_outflow
    (start = CoolingTower_bypass.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower_bypass.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower_bypass.flow_model.h
    (start = CoolingTower_bypass.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    CoolingTower_bypass.flow_model.DP_input(start = 0);

// Equations and algorithms

  // Component cooling_sink
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      cooling_sink.C_in.P = cooling_sink.P_in;
      cooling_sink.C_in.Q = cooling_sink.Q_in;
      inStream(cooling_sink.C_in.h_outflow) = cooling_sink.h_in;
      inStream(cooling_sink.C_in.Xi_outflow) = cooling_sink.Xi_in;
      cooling_sink.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (cooling_sink.P_in, cooling_sink.h_in, cooling_sink.Xi_in, 0, 0);
      cooling_sink.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        cooling_sink.state_in);
      cooling_sink.Qv_in = cooling_sink.Q_in/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        cooling_sink.state_in);
      cooling_sink.C_in.h_outflow = 0;
      cooling_sink.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component turbine_outlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      turbine_outlet.C_out.P = turbine_outlet.P_out;
      turbine_outlet.C_out.Q = turbine_outlet.Q_out;
      turbine_outlet.C_out.h_outflow = turbine_outlet.h_out;
      turbine_outlet.C_out.Xi_outflow = turbine_outlet.Xi_out;
      turbine_outlet.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (turbine_outlet.P_out, turbine_outlet.h_out, turbine_outlet.Xi_out, 0, 0);
      turbine_outlet.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        turbine_outlet.state_out);
      turbine_outlet.Qv_out = turbine_outlet.Q_out/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        turbine_outlet.state_out);
    // end of extends 

  // Component condensate_sink
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      condensate_sink.C_in.P = condensate_sink.P_in;
      condensate_sink.C_in.Q = condensate_sink.Q_in;
      inStream(condensate_sink.C_in.h_outflow) = condensate_sink.h_in;
      inStream(condensate_sink.C_in.Xi_outflow) = condensate_sink.Xi_in;
      condensate_sink.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (condensate_sink.P_in, condensate_sink.h_in, condensate_sink.Xi_in, 0, 0);
      condensate_sink.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        condensate_sink.state_in);
      condensate_sink.Qv_in = condensate_sink.Q_in/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        condensate_sink.state_in);
      condensate_sink.C_in.h_outflow = 0;
      condensate_sink.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component LOA.cold_side_pipe
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.Pipe
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.cold_side_pipe.h_in = inStream(LOA.cold_side_pipe.C_in.h_outflow);
      LOA.cold_side_pipe.h_out = LOA.cold_side_pipe.C_out.h_outflow;
      LOA.cold_side_pipe.Q = LOA.cold_side_pipe.C_in.Q;
      LOA.cold_side_pipe.P_in = LOA.cold_side_pipe.C_in.P;
      LOA.cold_side_pipe.P_out = LOA.cold_side_pipe.C_out.P;
      LOA.cold_side_pipe.Xi = inStream(LOA.cold_side_pipe.C_in.Xi_outflow);
      LOA.cold_side_pipe.C_in.h_outflow = 1000000.0;
      LOA.cold_side_pipe.C_in.Xi_outflow = zeros(0);
      LOA.cold_side_pipe.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side_pipe.P_in, LOA.cold_side_pipe.h_in, LOA.cold_side_pipe.Xi,
         0, 0);
      LOA.cold_side_pipe.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side_pipe.P_out, LOA.cold_side_pipe.h_out, LOA.cold_side_pipe.Xi,
         0, 0);
      LOA.cold_side_pipe.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side_pipe.state_in);
      LOA.cold_side_pipe.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side_pipe.state_out);
      LOA.cold_side_pipe.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.cold_side_pipe.state_in);
      LOA.cold_side_pipe.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.cold_side_pipe.state_out);
      LOA.cold_side_pipe.rho = (LOA.cold_side_pipe.rho_in+LOA.cold_side_pipe.rho_out)
        /2;
      LOA.cold_side_pipe.Qv_in = LOA.cold_side_pipe.Q/LOA.cold_side_pipe.rho_in;
      LOA.cold_side_pipe.Qv_out =  -LOA.cold_side_pipe.Q/LOA.cold_side_pipe.rho_out;
      LOA.cold_side_pipe.Qv = (LOA.cold_side_pipe.Qv_in-LOA.cold_side_pipe.Qv_out)
        /2;
      LOA.cold_side_pipe.P_out-LOA.cold_side_pipe.P_in = LOA.cold_side_pipe.DP;
      LOA.cold_side_pipe.Q*(LOA.cold_side_pipe.h_out-LOA.cold_side_pipe.h_in) = 
        LOA.cold_side_pipe.W;
      LOA.cold_side_pipe.h_out-LOA.cold_side_pipe.h_in = LOA.cold_side_pipe.DH;
      LOA.cold_side_pipe.T_out-LOA.cold_side_pipe.T_in = LOA.cold_side_pipe.DT;
      LOA.cold_side_pipe.C_in.Q+LOA.cold_side_pipe.C_out.Q = 0;
      LOA.cold_side_pipe.C_out.Xi_outflow = inStream(LOA.cold_side_pipe.C_in.Xi_outflow);
      assert(LOA.cold_side_pipe.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.cold_side_pipe.h = LOA.cold_side_pipe.h_in;
      LOA.cold_side_pipe.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.Pipe
    equation
      if ( not LOA.cold_side_pipe.faulty) then 
        LOA.cold_side_pipe.fouling = 0;
      end if;
      LOA.cold_side_pipe.DP_f =  -(1+LOA.cold_side_pipe.fouling/100)*
        LOA.cold_side_pipe.Kfr*LOA.cold_side_pipe.Q*abs(LOA.cold_side_pipe.Q)/
        LOA.cold_side_pipe.rho_in;
      LOA.cold_side_pipe.DP_z =  -LOA.cold_side_pipe.rho_in*9.80665*
        LOA.cold_side_pipe.delta_z;
      LOA.cold_side_pipe.DP = LOA.cold_side_pipe.DP_f+LOA.cold_side_pipe.DP_z;
    // end of extends 

  // Component LOA.hot_side
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.hot_side.h_in = inStream(LOA.hot_side.C_in.h_outflow);
      LOA.hot_side.h_out = LOA.hot_side.C_out.h_outflow;
      LOA.hot_side.Q = LOA.hot_side.C_in.Q;
      LOA.hot_side.P_in = LOA.hot_side.C_in.P;
      LOA.hot_side.P_out = LOA.hot_side.C_out.P;
      LOA.hot_side.Xi = inStream(LOA.hot_side.C_in.Xi_outflow);
      LOA.hot_side.C_in.h_outflow = 1000000.0;
      LOA.hot_side.C_in.Xi_outflow = zeros(0);
      LOA.hot_side.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.hot_side.P_in, LOA.hot_side.h_in, LOA.hot_side.Xi, 0, 0);
      LOA.hot_side.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.hot_side.P_out, LOA.hot_side.h_out, LOA.hot_side.Xi, 0, 0);
      LOA.hot_side.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        LOA.hot_side.state_in);
      LOA.hot_side.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.hot_side.state_out);
      LOA.hot_side.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.hot_side.state_in);
      LOA.hot_side.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.hot_side.state_out);
      LOA.hot_side.rho = (LOA.hot_side.rho_in+LOA.hot_side.rho_out)/2;
      LOA.hot_side.Qv_in = LOA.hot_side.Q/LOA.hot_side.rho_in;
      LOA.hot_side.Qv_out =  -LOA.hot_side.Q/LOA.hot_side.rho_out;
      LOA.hot_side.Qv = (LOA.hot_side.Qv_in-LOA.hot_side.Qv_out)/2;
      LOA.hot_side.P_out-LOA.hot_side.P_in = LOA.hot_side.DP;
      LOA.hot_side.Q*(LOA.hot_side.h_out-LOA.hot_side.h_in) = LOA.hot_side.W;
      LOA.hot_side.h_out-LOA.hot_side.h_in = LOA.hot_side.DH;
      LOA.hot_side.T_out-LOA.hot_side.T_in = LOA.hot_side.DT;
      LOA.hot_side.C_in.Q+LOA.hot_side.C_out.Q = 0;
      LOA.hot_side.C_out.Xi_outflow = inStream(LOA.hot_side.C_in.Xi_outflow);
      assert(LOA.hot_side.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPFlowModel
    equation
      LOA.hot_side.P = LOA.hot_side.P_in;
      LOA.hot_side.DP = 0;
    // end of extends 
  equation
    LOA.hot_side.W = LOA.hot_side.W_input;

  // Component LOA.cold_side
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.cold_side.h_in = inStream(LOA.cold_side.C_in.h_outflow);
      LOA.cold_side.h_out = LOA.cold_side.C_out.h_outflow;
      LOA.cold_side.Q = LOA.cold_side.C_in.Q;
      LOA.cold_side.P_in = LOA.cold_side.C_in.P;
      LOA.cold_side.P_out = LOA.cold_side.C_out.P;
      LOA.cold_side.Xi = inStream(LOA.cold_side.C_in.Xi_outflow);
      LOA.cold_side.C_in.h_outflow = 1000000.0;
      LOA.cold_side.C_in.Xi_outflow = zeros(0);
      LOA.cold_side.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side.P_in, LOA.cold_side.h_in, LOA.cold_side.Xi, 0, 0);
      LOA.cold_side.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side.P_out, LOA.cold_side.h_out, LOA.cold_side.Xi, 0, 0);
      LOA.cold_side.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side.state_in);
      LOA.cold_side.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side.state_out);
      LOA.cold_side.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.cold_side.state_in);
      LOA.cold_side.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.cold_side.state_out);
      LOA.cold_side.rho = (LOA.cold_side.rho_in+LOA.cold_side.rho_out)/2;
      LOA.cold_side.Qv_in = LOA.cold_side.Q/LOA.cold_side.rho_in;
      LOA.cold_side.Qv_out =  -LOA.cold_side.Q/LOA.cold_side.rho_out;
      LOA.cold_side.Qv = (LOA.cold_side.Qv_in-LOA.cold_side.Qv_out)/2;
      LOA.cold_side.P_out-LOA.cold_side.P_in = LOA.cold_side.DP;
      LOA.cold_side.Q*(LOA.cold_side.h_out-LOA.cold_side.h_in) = LOA.cold_side.W;
      LOA.cold_side.h_out-LOA.cold_side.h_in = LOA.cold_side.DH;
      LOA.cold_side.T_out-LOA.cold_side.T_in = LOA.cold_side.DT;
      LOA.cold_side.C_in.Q+LOA.cold_side.C_out.Q = 0;
      LOA.cold_side.C_out.Xi_outflow = inStream(LOA.cold_side.C_in.Xi_outflow);
      assert(LOA.cold_side.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPFlowModel
    equation
      LOA.cold_side.P = LOA.cold_side.P_in;
      LOA.cold_side.DP = 0;
    // end of extends 
  equation
    LOA.cold_side.W = LOA.cold_side.W_input;

  // Component LOA.water_height_pipe
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.Pipe
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.water_height_pipe.h_in = inStream(LOA.water_height_pipe.C_in.h_outflow);
      LOA.water_height_pipe.h_out = LOA.water_height_pipe.C_out.h_outflow;
      LOA.water_height_pipe.Q = LOA.water_height_pipe.C_in.Q;
      LOA.water_height_pipe.P_in = LOA.water_height_pipe.C_in.P;
      LOA.water_height_pipe.P_out = LOA.water_height_pipe.C_out.P;
      LOA.water_height_pipe.Xi = inStream(LOA.water_height_pipe.C_in.Xi_outflow);
      LOA.water_height_pipe.C_in.h_outflow = 1000000.0;
      LOA.water_height_pipe.C_in.Xi_outflow = zeros(0);
      LOA.water_height_pipe.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.water_height_pipe.P_in, LOA.water_height_pipe.h_in, 
        LOA.water_height_pipe.Xi, 0, 0);
      LOA.water_height_pipe.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.water_height_pipe.P_out, LOA.water_height_pipe.h_out, 
        LOA.water_height_pipe.Xi, 0, 0);
      LOA.water_height_pipe.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.water_height_pipe.state_in);
      LOA.water_height_pipe.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.water_height_pipe.state_out);
      LOA.water_height_pipe.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.water_height_pipe.state_in);
      LOA.water_height_pipe.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.water_height_pipe.state_out);
      LOA.water_height_pipe.rho = (LOA.water_height_pipe.rho_in+LOA.water_height_pipe.rho_out)
        /2;
      LOA.water_height_pipe.Qv_in = LOA.water_height_pipe.Q/LOA.water_height_pipe.rho_in;
      LOA.water_height_pipe.Qv_out =  -LOA.water_height_pipe.Q/LOA.water_height_pipe.rho_out;
      LOA.water_height_pipe.Qv = (LOA.water_height_pipe.Qv_in-LOA.water_height_pipe.Qv_out)
        /2;
      LOA.water_height_pipe.P_out-LOA.water_height_pipe.P_in = LOA.water_height_pipe.DP;
      LOA.water_height_pipe.Q*(LOA.water_height_pipe.h_out-LOA.water_height_pipe.h_in)
         = LOA.water_height_pipe.W;
      LOA.water_height_pipe.h_out-LOA.water_height_pipe.h_in = LOA.water_height_pipe.DH;
      LOA.water_height_pipe.T_out-LOA.water_height_pipe.T_in = LOA.water_height_pipe.DT;
      LOA.water_height_pipe.C_in.Q+LOA.water_height_pipe.C_out.Q = 0;
      LOA.water_height_pipe.C_out.Xi_outflow = inStream(LOA.water_height_pipe.C_in.Xi_outflow);
      assert(LOA.water_height_pipe.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.water_height_pipe.h = LOA.water_height_pipe.h_in;
      LOA.water_height_pipe.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.Pipe
    equation
      if ( not LOA.water_height_pipe.faulty) then 
        LOA.water_height_pipe.fouling = 0;
      end if;
      LOA.water_height_pipe.DP_f =  -(1+LOA.water_height_pipe.fouling/100)*
        LOA.water_height_pipe.Kfr*LOA.water_height_pipe.Q*abs(LOA.water_height_pipe.Q)
        /LOA.water_height_pipe.rho_in;
      LOA.water_height_pipe.DP_z =  -LOA.water_height_pipe.rho_in*9.80665*
        LOA.water_height_pipe.delta_z;
      LOA.water_height_pipe.DP = LOA.water_height_pipe.DP_f+LOA.water_height_pipe.DP_z;
    // end of extends 

  // Component LOA.incondensables_in
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.incondensables_in.h_in = inStream(LOA.incondensables_in.C_in.h_outflow);
      LOA.incondensables_in.h_out = LOA.incondensables_in.C_out.h_outflow;
      LOA.incondensables_in.Q = LOA.incondensables_in.C_in.Q;
      LOA.incondensables_in.P_in = LOA.incondensables_in.C_in.P;
      LOA.incondensables_in.P_out = LOA.incondensables_in.C_out.P;
      LOA.incondensables_in.Xi = inStream(LOA.incondensables_in.C_in.Xi_outflow);
      LOA.incondensables_in.C_in.h_outflow = 1000000.0;
      LOA.incondensables_in.C_in.Xi_outflow = zeros(0);
      LOA.incondensables_in.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_in.P_in, LOA.incondensables_in.h_in, 
        LOA.incondensables_in.Xi, 0, 0);
      LOA.incondensables_in.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_in.P_out, LOA.incondensables_in.h_out, 
        LOA.incondensables_in.Xi, 0, 0);
      LOA.incondensables_in.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_in.state_in);
      LOA.incondensables_in.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_in.state_out);
      LOA.incondensables_in.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_in.state_in);
      LOA.incondensables_in.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_in.state_out);
      LOA.incondensables_in.rho = (LOA.incondensables_in.rho_in+LOA.incondensables_in.rho_out)
        /2;
      LOA.incondensables_in.Qv_in = LOA.incondensables_in.Q/LOA.incondensables_in.rho_in;
      LOA.incondensables_in.Qv_out =  -LOA.incondensables_in.Q/LOA.incondensables_in.rho_out;
      LOA.incondensables_in.Qv = (LOA.incondensables_in.Qv_in-LOA.incondensables_in.Qv_out)
        /2;
      LOA.incondensables_in.P_out-LOA.incondensables_in.P_in = LOA.incondensables_in.DP;
      LOA.incondensables_in.Q*(LOA.incondensables_in.h_out-LOA.incondensables_in.h_in)
         = LOA.incondensables_in.W;
      LOA.incondensables_in.h_out-LOA.incondensables_in.h_in = LOA.incondensables_in.DH;
      LOA.incondensables_in.T_out-LOA.incondensables_in.T_in = LOA.incondensables_in.DT;
      LOA.incondensables_in.C_in.Q+LOA.incondensables_in.C_out.Q = 0;
      LOA.incondensables_in.C_out.Xi_outflow = inStream(LOA.incondensables_in.C_in.Xi_outflow);
      assert(LOA.incondensables_in.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.incondensables_in.h = LOA.incondensables_in.h_in;
      LOA.incondensables_in.DH = 0;
    // end of extends 
  equation
    LOA.incondensables_in.DP = LOA.incondensables_in.DP_input;

  // Component LOA.incondensables_out
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.incondensables_out.h_in = inStream(LOA.incondensables_out.C_in.h_outflow);
      LOA.incondensables_out.h_out = LOA.incondensables_out.C_out.h_outflow;
      LOA.incondensables_out.Q = LOA.incondensables_out.C_in.Q;
      LOA.incondensables_out.P_in = LOA.incondensables_out.C_in.P;
      LOA.incondensables_out.P_out = LOA.incondensables_out.C_out.P;
      LOA.incondensables_out.Xi = inStream(LOA.incondensables_out.C_in.Xi_outflow);
      LOA.incondensables_out.C_in.h_outflow = 1000000.0;
      LOA.incondensables_out.C_in.Xi_outflow = zeros(0);
      LOA.incondensables_out.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_out.P_in, LOA.incondensables_out.h_in, 
        LOA.incondensables_out.Xi, 0, 0);
      LOA.incondensables_out.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_out.P_out, LOA.incondensables_out.h_out, 
        LOA.incondensables_out.Xi, 0, 0);
      LOA.incondensables_out.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_out.state_in);
      LOA.incondensables_out.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_out.state_out);
      LOA.incondensables_out.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_out.state_in);
      LOA.incondensables_out.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_out.state_out);
      LOA.incondensables_out.rho = (LOA.incondensables_out.rho_in+
        LOA.incondensables_out.rho_out)/2;
      LOA.incondensables_out.Qv_in = LOA.incondensables_out.Q/LOA.incondensables_out.rho_in;
      LOA.incondensables_out.Qv_out =  -LOA.incondensables_out.Q/
        LOA.incondensables_out.rho_out;
      LOA.incondensables_out.Qv = (LOA.incondensables_out.Qv_in-LOA.incondensables_out.Qv_out)
        /2;
      LOA.incondensables_out.P_out-LOA.incondensables_out.P_in = 
        LOA.incondensables_out.DP;
      LOA.incondensables_out.Q*(LOA.incondensables_out.h_out-LOA.incondensables_out.h_in)
         = LOA.incondensables_out.W;
      LOA.incondensables_out.h_out-LOA.incondensables_out.h_in = 
        LOA.incondensables_out.DH;
      LOA.incondensables_out.T_out-LOA.incondensables_out.T_in = 
        LOA.incondensables_out.DT;
      LOA.incondensables_out.C_in.Q+LOA.incondensables_out.C_out.Q = 0;
      LOA.incondensables_out.C_out.Xi_outflow = inStream(LOA.incondensables_out.C_in.Xi_outflow);
      assert(LOA.incondensables_out.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.incondensables_out.h = LOA.incondensables_out.h_in;
      LOA.incondensables_out.DH = 0;
    // end of extends 
  equation
    LOA.incondensables_out.DP = LOA.incondensables_out.DP_input;

  // Component LOA
  // class MetroscopeModelingLibrary.WaterSteam.HeatExchangers.Condenser
  equation
    if ( not LOA.faulty) then 
      LOA.fouling = 0;
      LOA.air_intake = 0;
      LOA.Qv_cold_in_decrease = 0;
    end if;
    LOA.Q_cold = LOA.cold_side.Q;
    LOA.T_cold_in = LOA.cold_side.T_in;
    LOA.T_cold_out = LOA.cold_side.T_out;
    LOA.cold_side.Qv = LOA.Qv_cold_in*(1-LOA.Qv_cold_in_decrease/100);
    LOA.Q_hot = LOA.hot_side.Q;
    LOA.T_hot_in = LOA.hot_side.T_in;
    LOA.T_hot_out = LOA.hot_side.T_out;
    LOA.cold_side.W = LOA.W;
    LOA.P_tot = LOA.incondensables_in.P_in;
    LOA.hot_side.W+LOA.cold_side.W = 0;
    LOA.cold_side_pipe.delta_z = 0;
    LOA.cold_side_pipe.Kfr = LOA.Kfr_cold;
    LOA.water_height_pipe.delta_z =  -LOA.water_height;
    LOA.water_height_pipe.Kfr = 0;
    LOA.water_height_pipe.DP = LOA.water_height_DP;
    LOA.P_incond = LOA.P_offset+LOA.R*(LOA.C_incond+LOA.air_intake)*LOA.Tsat;
    LOA.incondensables_in.DP =  -LOA.P_incond;
    LOA.incondensables_out.DP = LOA.P_incond;
    assert(LOA.T_hot_in-LOA.Tsat < 0.1, "The steam admitted in the condenser in superheated",
       AssertionLevel.warning);
    LOA.Psat = LOA.hot_side.P_in;
    LOA.Tsat = Modelica.Media.Water.WaterIF97_ph.saturationTemperature_Unique9(
      LOA.Psat);
    LOA.hot_side.h_out = Modelica.Media.Water.WaterIF97_ph.bubbleEnthalpy_Unique7
      (
      Modelica.Media.Water.WaterIF97_ph.setSat_p_Unique8(LOA.Psat));
    0 = LOA.Tsat-LOA.T_cold_out-(LOA.Tsat-LOA.T_cold_in)*exp(LOA.Kth*(1-
      LOA.fouling/100)*LOA.S*((LOA.T_cold_in-LOA.T_cold_out)/LOA.W));
    LOA.cold_side_pipe.C_in.P = LOA.C_cold_in.P;
    LOA.C_cold_in.Q-LOA.cold_side_pipe.C_in.Q = 0.0;
    LOA.cold_side.C_out.P = LOA.C_cold_out.P;
    LOA.C_cold_out.Q-LOA.cold_side.C_out.Q = 0.0;
    LOA.incondensables_in.C_in.P = LOA.C_hot_in.P;
    LOA.C_hot_in.Q-LOA.incondensables_in.C_in.Q = 0.0;
    LOA.water_height_pipe.C_out.P = LOA.C_hot_out.P;
    LOA.C_hot_out.Q-LOA.water_height_pipe.C_out.Q = 0.0;
    LOA.cold_side_pipe.C_out.P = LOA.cold_side.C_in.P;
    LOA.cold_side.C_in.Q+LOA.cold_side_pipe.C_out.Q = 0.0;
    LOA.incondensables_in.C_out.P = LOA.hot_side.C_in.P;
    LOA.hot_side.C_in.Q+LOA.incondensables_in.C_out.Q = 0.0;
    LOA.incondensables_out.C_in.P = LOA.hot_side.C_out.P;
    LOA.hot_side.C_out.Q+LOA.incondensables_out.C_in.Q = 0.0;
    LOA.water_height_pipe.C_in.P = LOA.incondensables_out.C_out.P;
    LOA.incondensables_out.C_out.Q+LOA.water_height_pipe.C_in.Q = 0.0;

  // Component VCT178_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      VCT178_sensor.flow_model.h_in = inStream(VCT178_sensor.flow_model.C_in.h_outflow);
      VCT178_sensor.flow_model.h_out = VCT178_sensor.flow_model.C_out.h_outflow;
      VCT178_sensor.flow_model.Q = VCT178_sensor.flow_model.C_in.Q;
      VCT178_sensor.flow_model.P_in = VCT178_sensor.flow_model.C_in.P;
      VCT178_sensor.flow_model.P_out = VCT178_sensor.flow_model.C_out.P;
      VCT178_sensor.flow_model.Xi = inStream(VCT178_sensor.flow_model.C_in.Xi_outflow);
      VCT178_sensor.flow_model.C_in.h_outflow = 1000000.0;
      VCT178_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      VCT178_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (VCT178_sensor.flow_model.P_in, VCT178_sensor.flow_model.h_in, 
        VCT178_sensor.flow_model.Xi, 0, 0);
      VCT178_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (VCT178_sensor.flow_model.P_out, VCT178_sensor.flow_model.h_out, 
        VCT178_sensor.flow_model.Xi, 0, 0);
      VCT178_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        VCT178_sensor.flow_model.state_in);
      VCT178_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        VCT178_sensor.flow_model.state_out);
      VCT178_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        VCT178_sensor.flow_model.state_in);
      VCT178_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        VCT178_sensor.flow_model.state_out);
      VCT178_sensor.flow_model.rho = (VCT178_sensor.flow_model.rho_in+
        VCT178_sensor.flow_model.rho_out)/2;
      VCT178_sensor.flow_model.Qv_in = VCT178_sensor.flow_model.Q/
        VCT178_sensor.flow_model.rho_in;
      VCT178_sensor.flow_model.Qv_out =  -VCT178_sensor.flow_model.Q/
        VCT178_sensor.flow_model.rho_out;
      VCT178_sensor.flow_model.Qv = (VCT178_sensor.flow_model.Qv_in-
        VCT178_sensor.flow_model.Qv_out)/2;
      VCT178_sensor.flow_model.P_out-VCT178_sensor.flow_model.P_in = 
        VCT178_sensor.flow_model.DP;
      VCT178_sensor.flow_model.Q*(VCT178_sensor.flow_model.h_out-
        VCT178_sensor.flow_model.h_in) = VCT178_sensor.flow_model.W;
      VCT178_sensor.flow_model.h_out-VCT178_sensor.flow_model.h_in = 
        VCT178_sensor.flow_model.DH;
      VCT178_sensor.flow_model.T_out-VCT178_sensor.flow_model.T_in = 
        VCT178_sensor.flow_model.DT;
      VCT178_sensor.flow_model.C_in.Q+VCT178_sensor.flow_model.C_out.Q = 0;
      VCT178_sensor.flow_model.C_out.Xi_outflow = inStream(VCT178_sensor.flow_model.C_in.Xi_outflow);
      assert(VCT178_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      VCT178_sensor.flow_model.P = VCT178_sensor.flow_model.P_in;
      VCT178_sensor.flow_model.h = VCT178_sensor.flow_model.h_in;
      VCT178_sensor.flow_model.T = VCT178_sensor.flow_model.T_in;
      VCT178_sensor.flow_model.DP = 0;
      VCT178_sensor.flow_model.DH = 0;
    // end of extends 

  // Component VCT178_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not VCT178_sensor.faulty_flow_rate) then 
        VCT178_sensor.mass_flow_rate_bias = 0;
      end if;
      VCT178_sensor.P = VCT178_sensor.C_in.P;
      VCT178_sensor.Q = VCT178_sensor.C_in.Q+VCT178_sensor.mass_flow_rate_bias;
      VCT178_sensor.Xi = inStream(VCT178_sensor.C_in.Xi_outflow);
      VCT178_sensor.h = inStream(VCT178_sensor.C_in.h_outflow);
      VCT178_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (VCT178_sensor.P, VCT178_sensor.h, VCT178_sensor.Xi, 0, 0);
      assert(VCT178_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      VCT178_sensor.P_barA = VCT178_sensor.P*1E-05;
      VCT178_sensor.P_psiA = VCT178_sensor.P*0.000145038;
      VCT178_sensor.P_MPaA = VCT178_sensor.P*1E-06;
      VCT178_sensor.P_kPaA = VCT178_sensor.P*0.001;
      VCT178_sensor.P_barG = VCT178_sensor.P_barA-1;
      VCT178_sensor.P_psiG = VCT178_sensor.P_psiA-14.50377377;
      VCT178_sensor.P_MPaG = VCT178_sensor.P_MPaA-0.1;
      VCT178_sensor.P_kPaG = VCT178_sensor.P_kPaA-100;
      VCT178_sensor.P_mbar = VCT178_sensor.P*0.01;
      VCT178_sensor.P_inHg = VCT178_sensor.P*0.0002953006;
    // end of extends 
  equation
    VCT178_sensor.flow_model.C_in.P = VCT178_sensor.C_in.P;
    VCT178_sensor.C_in.Q-VCT178_sensor.flow_model.C_in.Q = 0.0;
    VCT178_sensor.flow_model.C_out.P = VCT178_sensor.C_out.P;
    VCT178_sensor.C_out.Q-VCT178_sensor.flow_model.C_out.Q = 0.0;

  // Component Hotside_Temp_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Hotside_Temp_sensor.flow_model.h_in = inStream(Hotside_Temp_sensor.flow_model.C_in.h_outflow);
      Hotside_Temp_sensor.flow_model.h_out = Hotside_Temp_sensor.flow_model.C_out.h_outflow;
      Hotside_Temp_sensor.flow_model.Q = Hotside_Temp_sensor.flow_model.C_in.Q;
      Hotside_Temp_sensor.flow_model.P_in = Hotside_Temp_sensor.flow_model.C_in.P;
      Hotside_Temp_sensor.flow_model.P_out = Hotside_Temp_sensor.flow_model.C_out.P;
      Hotside_Temp_sensor.flow_model.Xi = inStream(Hotside_Temp_sensor.flow_model.C_in.Xi_outflow);
      Hotside_Temp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Hotside_Temp_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Hotside_Temp_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Temp_sensor.flow_model.P_in, Hotside_Temp_sensor.flow_model.h_in,
         Hotside_Temp_sensor.flow_model.Xi, 0, 0);
      Hotside_Temp_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Temp_sensor.flow_model.P_out, Hotside_Temp_sensor.flow_model.h_out,
         Hotside_Temp_sensor.flow_model.Xi, 0, 0);
      Hotside_Temp_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Temp_sensor.flow_model.state_in);
      Hotside_Temp_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Temp_sensor.flow_model.state_out);
      Hotside_Temp_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Temp_sensor.flow_model.state_in);
      Hotside_Temp_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Temp_sensor.flow_model.state_out);
      Hotside_Temp_sensor.flow_model.rho = (Hotside_Temp_sensor.flow_model.rho_in
        +Hotside_Temp_sensor.flow_model.rho_out)/2;
      Hotside_Temp_sensor.flow_model.Qv_in = Hotside_Temp_sensor.flow_model.Q/
        Hotside_Temp_sensor.flow_model.rho_in;
      Hotside_Temp_sensor.flow_model.Qv_out =  -Hotside_Temp_sensor.flow_model.Q
        /Hotside_Temp_sensor.flow_model.rho_out;
      Hotside_Temp_sensor.flow_model.Qv = (Hotside_Temp_sensor.flow_model.Qv_in-
        Hotside_Temp_sensor.flow_model.Qv_out)/2;
      Hotside_Temp_sensor.flow_model.P_out-Hotside_Temp_sensor.flow_model.P_in
         = Hotside_Temp_sensor.flow_model.DP;
      Hotside_Temp_sensor.flow_model.Q*(Hotside_Temp_sensor.flow_model.h_out-
        Hotside_Temp_sensor.flow_model.h_in) = Hotside_Temp_sensor.flow_model.W;
      Hotside_Temp_sensor.flow_model.h_out-Hotside_Temp_sensor.flow_model.h_in
         = Hotside_Temp_sensor.flow_model.DH;
      Hotside_Temp_sensor.flow_model.T_out-Hotside_Temp_sensor.flow_model.T_in
         = Hotside_Temp_sensor.flow_model.DT;
      Hotside_Temp_sensor.flow_model.C_in.Q+Hotside_Temp_sensor.flow_model.C_out.Q
         = 0;
      Hotside_Temp_sensor.flow_model.C_out.Xi_outflow = inStream(
        Hotside_Temp_sensor.flow_model.C_in.Xi_outflow);
      assert(Hotside_Temp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Hotside_Temp_sensor.flow_model.P = Hotside_Temp_sensor.flow_model.P_in;
      Hotside_Temp_sensor.flow_model.h = Hotside_Temp_sensor.flow_model.h_in;
      Hotside_Temp_sensor.flow_model.T = Hotside_Temp_sensor.flow_model.T_in;
      Hotside_Temp_sensor.flow_model.DP = 0;
      Hotside_Temp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Hotside_Temp_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Hotside_Temp_sensor.faulty_flow_rate) then 
        Hotside_Temp_sensor.mass_flow_rate_bias = 0;
      end if;
      Hotside_Temp_sensor.P = Hotside_Temp_sensor.C_in.P;
      Hotside_Temp_sensor.Q = Hotside_Temp_sensor.C_in.Q+Hotside_Temp_sensor.mass_flow_rate_bias;
      Hotside_Temp_sensor.Xi = inStream(Hotside_Temp_sensor.C_in.Xi_outflow);
      Hotside_Temp_sensor.h = inStream(Hotside_Temp_sensor.C_in.h_outflow);
      Hotside_Temp_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Temp_sensor.P, Hotside_Temp_sensor.h, Hotside_Temp_sensor.Xi, 0,
         0);
      assert(Hotside_Temp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      Hotside_Temp_sensor.T = Hotside_Temp_sensor.flow_model.T;
      Hotside_Temp_sensor.T_degC+273.15 = Hotside_Temp_sensor.T;
      Hotside_Temp_sensor.T_degF = Hotside_Temp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    Hotside_Temp_sensor.flow_model.C_in.P = Hotside_Temp_sensor.C_in.P;
    Hotside_Temp_sensor.C_in.Q-Hotside_Temp_sensor.flow_model.C_in.Q = 0.0;
    Hotside_Temp_sensor.flow_model.C_out.P = Hotside_Temp_sensor.C_out.P;
    Hotside_Temp_sensor.C_out.Q-Hotside_Temp_sensor.flow_model.C_out.Q = 0.0;

  // Component Hotside_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Hotside_Flow_sensor.flow_model.h_in = inStream(Hotside_Flow_sensor.flow_model.C_in.h_outflow);
      Hotside_Flow_sensor.flow_model.h_out = Hotside_Flow_sensor.flow_model.C_out.h_outflow;
      Hotside_Flow_sensor.flow_model.Q = Hotside_Flow_sensor.flow_model.C_in.Q;
      Hotside_Flow_sensor.flow_model.P_in = Hotside_Flow_sensor.flow_model.C_in.P;
      Hotside_Flow_sensor.flow_model.P_out = Hotside_Flow_sensor.flow_model.C_out.P;
      Hotside_Flow_sensor.flow_model.Xi = inStream(Hotside_Flow_sensor.flow_model.C_in.Xi_outflow);
      Hotside_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Hotside_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Hotside_Flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Flow_sensor.flow_model.P_in, Hotside_Flow_sensor.flow_model.h_in,
         Hotside_Flow_sensor.flow_model.Xi, 0, 0);
      Hotside_Flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Flow_sensor.flow_model.P_out, Hotside_Flow_sensor.flow_model.h_out,
         Hotside_Flow_sensor.flow_model.Xi, 0, 0);
      Hotside_Flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Flow_sensor.flow_model.state_in);
      Hotside_Flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Flow_sensor.flow_model.state_out);
      Hotside_Flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Flow_sensor.flow_model.state_in);
      Hotside_Flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Flow_sensor.flow_model.state_out);
      Hotside_Flow_sensor.flow_model.rho = (Hotside_Flow_sensor.flow_model.rho_in
        +Hotside_Flow_sensor.flow_model.rho_out)/2;
      Hotside_Flow_sensor.flow_model.Qv_in = Hotside_Flow_sensor.flow_model.Q/
        Hotside_Flow_sensor.flow_model.rho_in;
      Hotside_Flow_sensor.flow_model.Qv_out =  -Hotside_Flow_sensor.flow_model.Q
        /Hotside_Flow_sensor.flow_model.rho_out;
      Hotside_Flow_sensor.flow_model.Qv = (Hotside_Flow_sensor.flow_model.Qv_in-
        Hotside_Flow_sensor.flow_model.Qv_out)/2;
      Hotside_Flow_sensor.flow_model.P_out-Hotside_Flow_sensor.flow_model.P_in
         = Hotside_Flow_sensor.flow_model.DP;
      Hotside_Flow_sensor.flow_model.Q*(Hotside_Flow_sensor.flow_model.h_out-
        Hotside_Flow_sensor.flow_model.h_in) = Hotside_Flow_sensor.flow_model.W;
      Hotside_Flow_sensor.flow_model.h_out-Hotside_Flow_sensor.flow_model.h_in
         = Hotside_Flow_sensor.flow_model.DH;
      Hotside_Flow_sensor.flow_model.T_out-Hotside_Flow_sensor.flow_model.T_in
         = Hotside_Flow_sensor.flow_model.DT;
      Hotside_Flow_sensor.flow_model.C_in.Q+Hotside_Flow_sensor.flow_model.C_out.Q
         = 0;
      Hotside_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(
        Hotside_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(Hotside_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Hotside_Flow_sensor.flow_model.P = Hotside_Flow_sensor.flow_model.P_in;
      Hotside_Flow_sensor.flow_model.h = Hotside_Flow_sensor.flow_model.h_in;
      Hotside_Flow_sensor.flow_model.T = Hotside_Flow_sensor.flow_model.T_in;
      Hotside_Flow_sensor.flow_model.DP = 0;
      Hotside_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Hotside_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Hotside_Flow_sensor.faulty_flow_rate) then 
        Hotside_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      Hotside_Flow_sensor.P = Hotside_Flow_sensor.C_in.P;
      Hotside_Flow_sensor.Q = Hotside_Flow_sensor.C_in.Q+Hotside_Flow_sensor.mass_flow_rate_bias;
      Hotside_Flow_sensor.Xi = inStream(Hotside_Flow_sensor.C_in.Xi_outflow);
      Hotside_Flow_sensor.h = inStream(Hotside_Flow_sensor.C_in.h_outflow);
      Hotside_Flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Flow_sensor.P, Hotside_Flow_sensor.h, Hotside_Flow_sensor.Xi, 0,
         0);
      assert(Hotside_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Hotside_Flow_sensor.Qv = Hotside_Flow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Flow_sensor.state);
      Hotside_Flow_sensor.Q_lm = Hotside_Flow_sensor.Qv*60000;
      Hotside_Flow_sensor.Q_th = Hotside_Flow_sensor.Q*3.6;
      Hotside_Flow_sensor.Q_lbs = Hotside_Flow_sensor.Q*0.453592428;
      Hotside_Flow_sensor.Q_Mlbh = Hotside_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Hotside_Flow_sensor.flow_model.C_in.P = Hotside_Flow_sensor.C_in.P;
    Hotside_Flow_sensor.C_in.Q-Hotside_Flow_sensor.flow_model.C_in.Q = 0.0;
    Hotside_Flow_sensor.flow_model.C_out.P = Hotside_Flow_sensor.C_out.P;
    Hotside_Flow_sensor.C_out.Q-Hotside_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component Coldside_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Coldside_Flow_sensor.flow_model.h_in = inStream(Coldside_Flow_sensor.flow_model.C_in.h_outflow);
      Coldside_Flow_sensor.flow_model.h_out = Coldside_Flow_sensor.flow_model.C_out.h_outflow;
      Coldside_Flow_sensor.flow_model.Q = Coldside_Flow_sensor.flow_model.C_in.Q;
      Coldside_Flow_sensor.flow_model.P_in = Coldside_Flow_sensor.flow_model.C_in.P;
      Coldside_Flow_sensor.flow_model.P_out = Coldside_Flow_sensor.flow_model.C_out.P;
      Coldside_Flow_sensor.flow_model.Xi = inStream(Coldside_Flow_sensor.flow_model.C_in.Xi_outflow);
      Coldside_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Coldside_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Coldside_Flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Flow_sensor.flow_model.P_in, Coldside_Flow_sensor.flow_model.h_in,
         Coldside_Flow_sensor.flow_model.Xi, 0, 0);
      Coldside_Flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Flow_sensor.flow_model.P_out, Coldside_Flow_sensor.flow_model.h_out,
         Coldside_Flow_sensor.flow_model.Xi, 0, 0);
      Coldside_Flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Flow_sensor.flow_model.state_in);
      Coldside_Flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Flow_sensor.flow_model.state_out);
      Coldside_Flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Flow_sensor.flow_model.state_in);
      Coldside_Flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Flow_sensor.flow_model.state_out);
      Coldside_Flow_sensor.flow_model.rho = (Coldside_Flow_sensor.flow_model.rho_in
        +Coldside_Flow_sensor.flow_model.rho_out)/2;
      Coldside_Flow_sensor.flow_model.Qv_in = Coldside_Flow_sensor.flow_model.Q/
        Coldside_Flow_sensor.flow_model.rho_in;
      Coldside_Flow_sensor.flow_model.Qv_out =  -Coldside_Flow_sensor.flow_model.Q
        /Coldside_Flow_sensor.flow_model.rho_out;
      Coldside_Flow_sensor.flow_model.Qv = (Coldside_Flow_sensor.flow_model.Qv_in
        -Coldside_Flow_sensor.flow_model.Qv_out)/2;
      Coldside_Flow_sensor.flow_model.P_out-Coldside_Flow_sensor.flow_model.P_in
         = Coldside_Flow_sensor.flow_model.DP;
      Coldside_Flow_sensor.flow_model.Q*(Coldside_Flow_sensor.flow_model.h_out-
        Coldside_Flow_sensor.flow_model.h_in) = Coldside_Flow_sensor.flow_model.W;
      Coldside_Flow_sensor.flow_model.h_out-Coldside_Flow_sensor.flow_model.h_in
         = Coldside_Flow_sensor.flow_model.DH;
      Coldside_Flow_sensor.flow_model.T_out-Coldside_Flow_sensor.flow_model.T_in
         = Coldside_Flow_sensor.flow_model.DT;
      Coldside_Flow_sensor.flow_model.C_in.Q+Coldside_Flow_sensor.flow_model.C_out.Q
         = 0;
      Coldside_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(
        Coldside_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(Coldside_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Coldside_Flow_sensor.flow_model.P = Coldside_Flow_sensor.flow_model.P_in;
      Coldside_Flow_sensor.flow_model.h = Coldside_Flow_sensor.flow_model.h_in;
      Coldside_Flow_sensor.flow_model.T = Coldside_Flow_sensor.flow_model.T_in;
      Coldside_Flow_sensor.flow_model.DP = 0;
      Coldside_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Coldside_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Coldside_Flow_sensor.faulty_flow_rate) then 
        Coldside_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      Coldside_Flow_sensor.P = Coldside_Flow_sensor.C_in.P;
      Coldside_Flow_sensor.Q = Coldside_Flow_sensor.C_in.Q+Coldside_Flow_sensor.mass_flow_rate_bias;
      Coldside_Flow_sensor.Xi = inStream(Coldside_Flow_sensor.C_in.Xi_outflow);
      Coldside_Flow_sensor.h = inStream(Coldside_Flow_sensor.C_in.h_outflow);
      Coldside_Flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Flow_sensor.P, Coldside_Flow_sensor.h, Coldside_Flow_sensor.Xi,
         0, 0);
      assert(Coldside_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Coldside_Flow_sensor.Qv = Coldside_Flow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Flow_sensor.state);
      Coldside_Flow_sensor.Q_lm = Coldside_Flow_sensor.Qv*60000;
      Coldside_Flow_sensor.Q_th = Coldside_Flow_sensor.Q*3.6;
      Coldside_Flow_sensor.Q_lbs = Coldside_Flow_sensor.Q*0.453592428;
      Coldside_Flow_sensor.Q_Mlbh = Coldside_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Coldside_Flow_sensor.flow_model.C_in.P = Coldside_Flow_sensor.C_in.P;
    Coldside_Flow_sensor.C_in.Q-Coldside_Flow_sensor.flow_model.C_in.Q = 0.0;
    Coldside_Flow_sensor.flow_model.C_out.P = Coldside_Flow_sensor.C_out.P;
    Coldside_Flow_sensor.C_out.Q-Coldside_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component CEC502_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC502_sensor.flow_model.h_in = inStream(CEC502_sensor.flow_model.C_in.h_outflow);
      CEC502_sensor.flow_model.h_out = CEC502_sensor.flow_model.C_out.h_outflow;
      CEC502_sensor.flow_model.Q = CEC502_sensor.flow_model.C_in.Q;
      CEC502_sensor.flow_model.P_in = CEC502_sensor.flow_model.C_in.P;
      CEC502_sensor.flow_model.P_out = CEC502_sensor.flow_model.C_out.P;
      CEC502_sensor.flow_model.Xi = inStream(CEC502_sensor.flow_model.C_in.Xi_outflow);
      CEC502_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC502_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC502_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC502_sensor.flow_model.P_in, CEC502_sensor.flow_model.h_in, 
        CEC502_sensor.flow_model.Xi, 0, 0);
      CEC502_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC502_sensor.flow_model.P_out, CEC502_sensor.flow_model.h_out, 
        CEC502_sensor.flow_model.Xi, 0, 0);
      CEC502_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC502_sensor.flow_model.state_in);
      CEC502_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC502_sensor.flow_model.state_out);
      CEC502_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC502_sensor.flow_model.state_in);
      CEC502_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC502_sensor.flow_model.state_out);
      CEC502_sensor.flow_model.rho = (CEC502_sensor.flow_model.rho_in+
        CEC502_sensor.flow_model.rho_out)/2;
      CEC502_sensor.flow_model.Qv_in = CEC502_sensor.flow_model.Q/
        CEC502_sensor.flow_model.rho_in;
      CEC502_sensor.flow_model.Qv_out =  -CEC502_sensor.flow_model.Q/
        CEC502_sensor.flow_model.rho_out;
      CEC502_sensor.flow_model.Qv = (CEC502_sensor.flow_model.Qv_in-
        CEC502_sensor.flow_model.Qv_out)/2;
      CEC502_sensor.flow_model.P_out-CEC502_sensor.flow_model.P_in = 
        CEC502_sensor.flow_model.DP;
      CEC502_sensor.flow_model.Q*(CEC502_sensor.flow_model.h_out-
        CEC502_sensor.flow_model.h_in) = CEC502_sensor.flow_model.W;
      CEC502_sensor.flow_model.h_out-CEC502_sensor.flow_model.h_in = 
        CEC502_sensor.flow_model.DH;
      CEC502_sensor.flow_model.T_out-CEC502_sensor.flow_model.T_in = 
        CEC502_sensor.flow_model.DT;
      CEC502_sensor.flow_model.C_in.Q+CEC502_sensor.flow_model.C_out.Q = 0;
      CEC502_sensor.flow_model.C_out.Xi_outflow = inStream(CEC502_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC502_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC502_sensor.flow_model.P = CEC502_sensor.flow_model.P_in;
      CEC502_sensor.flow_model.h = CEC502_sensor.flow_model.h_in;
      CEC502_sensor.flow_model.T = CEC502_sensor.flow_model.T_in;
      CEC502_sensor.flow_model.DP = 0;
      CEC502_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC502_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC502_sensor.faulty_flow_rate) then 
        CEC502_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC502_sensor.P = CEC502_sensor.C_in.P;
      CEC502_sensor.Q = CEC502_sensor.C_in.Q+CEC502_sensor.mass_flow_rate_bias;
      CEC502_sensor.Xi = inStream(CEC502_sensor.C_in.Xi_outflow);
      CEC502_sensor.h = inStream(CEC502_sensor.C_in.h_outflow);
      CEC502_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC502_sensor.P, CEC502_sensor.h, CEC502_sensor.Xi, 0, 0);
      assert(CEC502_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC502_sensor.T = CEC502_sensor.flow_model.T;
      CEC502_sensor.T_degC+273.15 = CEC502_sensor.T;
      CEC502_sensor.T_degF = CEC502_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC502_sensor.flow_model.C_in.P = CEC502_sensor.C_in.P;
    CEC502_sensor.C_in.Q-CEC502_sensor.flow_model.C_in.Q = 0.0;
    CEC502_sensor.flow_model.C_out.P = CEC502_sensor.C_out.P;
    CEC502_sensor.C_out.Q-CEC502_sensor.flow_model.C_out.Q = 0.0;

  // Component Coldside_Press_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Coldside_Press_sensor.flow_model.h_in = inStream(Coldside_Press_sensor.flow_model.C_in.h_outflow);
      Coldside_Press_sensor.flow_model.h_out = Coldside_Press_sensor.flow_model.C_out.h_outflow;
      Coldside_Press_sensor.flow_model.Q = Coldside_Press_sensor.flow_model.C_in.Q;
      Coldside_Press_sensor.flow_model.P_in = Coldside_Press_sensor.flow_model.C_in.P;
      Coldside_Press_sensor.flow_model.P_out = Coldside_Press_sensor.flow_model.C_out.P;
      Coldside_Press_sensor.flow_model.Xi = inStream(Coldside_Press_sensor.flow_model.C_in.Xi_outflow);
      Coldside_Press_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Coldside_Press_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Coldside_Press_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Press_sensor.flow_model.P_in, Coldside_Press_sensor.flow_model.h_in,
         Coldside_Press_sensor.flow_model.Xi, 0, 0);
      Coldside_Press_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Press_sensor.flow_model.P_out, Coldside_Press_sensor.flow_model.h_out,
         Coldside_Press_sensor.flow_model.Xi, 0, 0);
      Coldside_Press_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Press_sensor.flow_model.state_in);
      Coldside_Press_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Press_sensor.flow_model.state_out);
      Coldside_Press_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Press_sensor.flow_model.state_in);
      Coldside_Press_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Press_sensor.flow_model.state_out);
      Coldside_Press_sensor.flow_model.rho = (Coldside_Press_sensor.flow_model.rho_in
        +Coldside_Press_sensor.flow_model.rho_out)/2;
      Coldside_Press_sensor.flow_model.Qv_in = Coldside_Press_sensor.flow_model.Q
        /Coldside_Press_sensor.flow_model.rho_in;
      Coldside_Press_sensor.flow_model.Qv_out =  -Coldside_Press_sensor.flow_model.Q
        /Coldside_Press_sensor.flow_model.rho_out;
      Coldside_Press_sensor.flow_model.Qv = (Coldside_Press_sensor.flow_model.Qv_in
        -Coldside_Press_sensor.flow_model.Qv_out)/2;
      Coldside_Press_sensor.flow_model.P_out-Coldside_Press_sensor.flow_model.P_in
         = Coldside_Press_sensor.flow_model.DP;
      Coldside_Press_sensor.flow_model.Q*(Coldside_Press_sensor.flow_model.h_out
        -Coldside_Press_sensor.flow_model.h_in) = Coldside_Press_sensor.flow_model.W;
      Coldside_Press_sensor.flow_model.h_out-Coldside_Press_sensor.flow_model.h_in
         = Coldside_Press_sensor.flow_model.DH;
      Coldside_Press_sensor.flow_model.T_out-Coldside_Press_sensor.flow_model.T_in
         = Coldside_Press_sensor.flow_model.DT;
      Coldside_Press_sensor.flow_model.C_in.Q+Coldside_Press_sensor.flow_model.C_out.Q
         = 0;
      Coldside_Press_sensor.flow_model.C_out.Xi_outflow = inStream(
        Coldside_Press_sensor.flow_model.C_in.Xi_outflow);
      assert(Coldside_Press_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Coldside_Press_sensor.flow_model.P = Coldside_Press_sensor.flow_model.P_in;
      Coldside_Press_sensor.flow_model.h = Coldside_Press_sensor.flow_model.h_in;
      Coldside_Press_sensor.flow_model.T = Coldside_Press_sensor.flow_model.T_in;
      Coldside_Press_sensor.flow_model.DP = 0;
      Coldside_Press_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Coldside_Press_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Coldside_Press_sensor.faulty_flow_rate) then 
        Coldside_Press_sensor.mass_flow_rate_bias = 0;
      end if;
      Coldside_Press_sensor.P = Coldside_Press_sensor.C_in.P;
      Coldside_Press_sensor.Q = Coldside_Press_sensor.C_in.Q+Coldside_Press_sensor.mass_flow_rate_bias;
      Coldside_Press_sensor.Xi = inStream(Coldside_Press_sensor.C_in.Xi_outflow);
      Coldside_Press_sensor.h = inStream(Coldside_Press_sensor.C_in.h_outflow);
      Coldside_Press_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Press_sensor.P, Coldside_Press_sensor.h, Coldside_Press_sensor.Xi,
         0, 0);
      assert(Coldside_Press_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Coldside_Press_sensor.P_barA = Coldside_Press_sensor.P*1E-05;
      Coldside_Press_sensor.P_psiA = Coldside_Press_sensor.P*0.000145038;
      Coldside_Press_sensor.P_MPaA = Coldside_Press_sensor.P*1E-06;
      Coldside_Press_sensor.P_kPaA = Coldside_Press_sensor.P*0.001;
      Coldside_Press_sensor.P_barG = Coldside_Press_sensor.P_barA-1;
      Coldside_Press_sensor.P_psiG = Coldside_Press_sensor.P_psiA-14.50377377;
      Coldside_Press_sensor.P_MPaG = Coldside_Press_sensor.P_MPaA-0.1;
      Coldside_Press_sensor.P_kPaG = Coldside_Press_sensor.P_kPaA-100;
      Coldside_Press_sensor.P_mbar = Coldside_Press_sensor.P*0.01;
      Coldside_Press_sensor.P_inHg = Coldside_Press_sensor.P*0.0002953006;
    // end of extends 
  equation
    Coldside_Press_sensor.flow_model.C_in.P = Coldside_Press_sensor.C_in.P;
    Coldside_Press_sensor.C_in.Q-Coldside_Press_sensor.flow_model.C_in.Q = 0.0;
    Coldside_Press_sensor.flow_model.C_out.P = Coldside_Press_sensor.C_out.P;
    Coldside_Press_sensor.C_out.Q-Coldside_Press_sensor.flow_model.C_out.Q = 0.0;

  // Component CEC507_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC507_sensor.flow_model.h_in = inStream(CEC507_sensor.flow_model.C_in.h_outflow);
      CEC507_sensor.flow_model.h_out = CEC507_sensor.flow_model.C_out.h_outflow;
      CEC507_sensor.flow_model.Q = CEC507_sensor.flow_model.C_in.Q;
      CEC507_sensor.flow_model.P_in = CEC507_sensor.flow_model.C_in.P;
      CEC507_sensor.flow_model.P_out = CEC507_sensor.flow_model.C_out.P;
      CEC507_sensor.flow_model.Xi = inStream(CEC507_sensor.flow_model.C_in.Xi_outflow);
      CEC507_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC507_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC507_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC507_sensor.flow_model.P_in, CEC507_sensor.flow_model.h_in, 
        CEC507_sensor.flow_model.Xi, 0, 0);
      CEC507_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC507_sensor.flow_model.P_out, CEC507_sensor.flow_model.h_out, 
        CEC507_sensor.flow_model.Xi, 0, 0);
      CEC507_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC507_sensor.flow_model.state_in);
      CEC507_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC507_sensor.flow_model.state_out);
      CEC507_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC507_sensor.flow_model.state_in);
      CEC507_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC507_sensor.flow_model.state_out);
      CEC507_sensor.flow_model.rho = (CEC507_sensor.flow_model.rho_in+
        CEC507_sensor.flow_model.rho_out)/2;
      CEC507_sensor.flow_model.Qv_in = CEC507_sensor.flow_model.Q/
        CEC507_sensor.flow_model.rho_in;
      CEC507_sensor.flow_model.Qv_out =  -CEC507_sensor.flow_model.Q/
        CEC507_sensor.flow_model.rho_out;
      CEC507_sensor.flow_model.Qv = (CEC507_sensor.flow_model.Qv_in-
        CEC507_sensor.flow_model.Qv_out)/2;
      CEC507_sensor.flow_model.P_out-CEC507_sensor.flow_model.P_in = 
        CEC507_sensor.flow_model.DP;
      CEC507_sensor.flow_model.Q*(CEC507_sensor.flow_model.h_out-
        CEC507_sensor.flow_model.h_in) = CEC507_sensor.flow_model.W;
      CEC507_sensor.flow_model.h_out-CEC507_sensor.flow_model.h_in = 
        CEC507_sensor.flow_model.DH;
      CEC507_sensor.flow_model.T_out-CEC507_sensor.flow_model.T_in = 
        CEC507_sensor.flow_model.DT;
      CEC507_sensor.flow_model.C_in.Q+CEC507_sensor.flow_model.C_out.Q = 0;
      CEC507_sensor.flow_model.C_out.Xi_outflow = inStream(CEC507_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC507_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC507_sensor.flow_model.P = CEC507_sensor.flow_model.P_in;
      CEC507_sensor.flow_model.h = CEC507_sensor.flow_model.h_in;
      CEC507_sensor.flow_model.T = CEC507_sensor.flow_model.T_in;
      CEC507_sensor.flow_model.DP = 0;
      CEC507_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC507_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC507_sensor.faulty_flow_rate) then 
        CEC507_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC507_sensor.P = CEC507_sensor.C_in.P;
      CEC507_sensor.Q = CEC507_sensor.C_in.Q+CEC507_sensor.mass_flow_rate_bias;
      CEC507_sensor.Xi = inStream(CEC507_sensor.C_in.Xi_outflow);
      CEC507_sensor.h = inStream(CEC507_sensor.C_in.h_outflow);
      CEC507_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC507_sensor.P, CEC507_sensor.h, CEC507_sensor.Xi, 0, 0);
      assert(CEC507_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC507_sensor.T = CEC507_sensor.flow_model.T;
      CEC507_sensor.T_degC+273.15 = CEC507_sensor.T;
      CEC507_sensor.T_degF = CEC507_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC507_sensor.flow_model.C_in.P = CEC507_sensor.C_in.P;
    CEC507_sensor.C_in.Q-CEC507_sensor.flow_model.C_in.Q = 0.0;
    CEC507_sensor.flow_model.C_out.P = CEC507_sensor.C_out.P;
    CEC507_sensor.C_out.Q-CEC507_sensor.flow_model.C_out.Q = 0.0;

  // Component CoolingTower.hot_side_cooling
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.hot_side_cooling.h_in = inStream(CoolingTower.hot_side_cooling.C_in.h_outflow);
      CoolingTower.hot_side_cooling.h_out = CoolingTower.hot_side_cooling.C_out.h_outflow;
      CoolingTower.hot_side_cooling.Q = CoolingTower.hot_side_cooling.C_in.Q;
      CoolingTower.hot_side_cooling.P_in = CoolingTower.hot_side_cooling.C_in.P;
      CoolingTower.hot_side_cooling.P_out = CoolingTower.hot_side_cooling.C_out.P;
      CoolingTower.hot_side_cooling.Xi = inStream(CoolingTower.hot_side_cooling.C_in.Xi_outflow);
      CoolingTower.hot_side_cooling.C_in.h_outflow = 1000000.0;
      CoolingTower.hot_side_cooling.C_in.Xi_outflow = zeros(0);
      CoolingTower.hot_side_cooling.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.hot_side_cooling.P_in, CoolingTower.hot_side_cooling.h_in,
         CoolingTower.hot_side_cooling.Xi, 0, 0);
      CoolingTower.hot_side_cooling.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.hot_side_cooling.P_out, CoolingTower.hot_side_cooling.h_out,
         CoolingTower.hot_side_cooling.Xi, 0, 0);
      CoolingTower.hot_side_cooling.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.hot_side_cooling.state_in);
      CoolingTower.hot_side_cooling.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.hot_side_cooling.state_out);
      CoolingTower.hot_side_cooling.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.hot_side_cooling.state_in);
      CoolingTower.hot_side_cooling.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.hot_side_cooling.state_out);
      CoolingTower.hot_side_cooling.rho = (CoolingTower.hot_side_cooling.rho_in+
        CoolingTower.hot_side_cooling.rho_out)/2;
      CoolingTower.hot_side_cooling.Qv_in = CoolingTower.hot_side_cooling.Q/
        CoolingTower.hot_side_cooling.rho_in;
      CoolingTower.hot_side_cooling.Qv_out =  -CoolingTower.hot_side_cooling.Q/
        CoolingTower.hot_side_cooling.rho_out;
      CoolingTower.hot_side_cooling.Qv = (CoolingTower.hot_side_cooling.Qv_in-
        CoolingTower.hot_side_cooling.Qv_out)/2;
      CoolingTower.hot_side_cooling.P_out-CoolingTower.hot_side_cooling.P_in = 
        CoolingTower.hot_side_cooling.DP;
      CoolingTower.hot_side_cooling.Q*(CoolingTower.hot_side_cooling.h_out-
        CoolingTower.hot_side_cooling.h_in) = CoolingTower.hot_side_cooling.W;
      CoolingTower.hot_side_cooling.h_out-CoolingTower.hot_side_cooling.h_in = 
        CoolingTower.hot_side_cooling.DH;
      CoolingTower.hot_side_cooling.T_out-CoolingTower.hot_side_cooling.T_in = 
        CoolingTower.hot_side_cooling.DT;
      CoolingTower.hot_side_cooling.C_in.Q+CoolingTower.hot_side_cooling.C_out.Q
         = 0;
      CoolingTower.hot_side_cooling.C_out.Xi_outflow = inStream(CoolingTower.hot_side_cooling.C_in.Xi_outflow);
      assert(CoolingTower.hot_side_cooling.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.hot_side_cooling.P = CoolingTower.hot_side_cooling.P_in;
      CoolingTower.hot_side_cooling.h = CoolingTower.hot_side_cooling.h_in;
      CoolingTower.hot_side_cooling.T = CoolingTower.hot_side_cooling.T_in;
      CoolingTower.hot_side_cooling.DP = 0;
      CoolingTower.hot_side_cooling.DH = 0;
    // end of extends 

  // Component CoolingTower.Air_inlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.Air_inlet.C_in.P = CoolingTower.Air_inlet.P_in;
      CoolingTower.Air_inlet.C_in.Q = CoolingTower.Air_inlet.Q_in;
      inStream(CoolingTower.Air_inlet.C_in.h_outflow) = CoolingTower.Air_inlet.h_in;
      inStream(CoolingTower.Air_inlet.C_in.Xi_outflow) = CoolingTower.Air_inlet.Xi_in;
      CoolingTower.Air_inlet.state_in = setState_phX_Unique10(CoolingTower.Air_inlet.P_in,
         CoolingTower.Air_inlet.h_in, CoolingTower.Air_inlet.Xi_in);
      CoolingTower.Air_inlet.T_in = temperature_Unique28(
        CoolingTower.Air_inlet.state_in);
      CoolingTower.Air_inlet.Qv_in = CoolingTower.Air_inlet.Q_in/
        density_Unique29(
        CoolingTower.Air_inlet.state_in);
      CoolingTower.Air_inlet.C_in.h_outflow = 0;
      CoolingTower.Air_inlet.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    CoolingTower.Air_inlet.Xi_in[1] = massFraction_pTphi_Unique31(
      CoolingTower.Air_inlet.P_in, CoolingTower.Air_inlet.T_in, CoolingTower.Air_inlet.relative_humidity);

  // Component CoolingTower.Air_outlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.Air_outlet.C_out.P = CoolingTower.Air_outlet.P_out;
      CoolingTower.Air_outlet.C_out.Q = CoolingTower.Air_outlet.Q_out;
      CoolingTower.Air_outlet.C_out.h_outflow = CoolingTower.Air_outlet.h_out;
      CoolingTower.Air_outlet.C_out.Xi_outflow = CoolingTower.Air_outlet.Xi_out;
      CoolingTower.Air_outlet.state_out = setState_phX_Unique10(CoolingTower.Air_outlet.P_out,
         CoolingTower.Air_outlet.h_out, CoolingTower.Air_outlet.Xi_out);
      CoolingTower.Air_outlet.T_out = temperature_Unique28(
        CoolingTower.Air_outlet.state_out);
      CoolingTower.Air_outlet.Qv_out = CoolingTower.Air_outlet.Q_out/
        density_Unique29(
        CoolingTower.Air_outlet.state_out);
    // end of extends 
  equation
    CoolingTower.Air_outlet.Xi_out[1] = massFraction_pTphi_Unique31(
      CoolingTower.Air_outlet.P_out, CoolingTower.Air_outlet.T_out, 
      CoolingTower.Air_outlet.relative_humidity);

  // Component CoolingTower.inputflowmodel
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.inputflowmodel.h_in = inStream(CoolingTower.inputflowmodel.C_in.h_outflow);
      CoolingTower.inputflowmodel.h_out = CoolingTower.inputflowmodel.C_out.h_outflow;
      CoolingTower.inputflowmodel.Q = CoolingTower.inputflowmodel.C_in.Q;
      CoolingTower.inputflowmodel.P_in = CoolingTower.inputflowmodel.C_in.P;
      CoolingTower.inputflowmodel.P_out = CoolingTower.inputflowmodel.C_out.P;
      CoolingTower.inputflowmodel.Xi = inStream(CoolingTower.inputflowmodel.C_in.Xi_outflow);
      CoolingTower.inputflowmodel.C_in.h_outflow = 1000000.0;
      CoolingTower.inputflowmodel.C_in.Xi_outflow = zeros(1);
      CoolingTower.inputflowmodel.state_in = setState_phX_Unique10(
        CoolingTower.inputflowmodel.P_in, CoolingTower.inputflowmodel.h_in, 
        CoolingTower.inputflowmodel.Xi);
      CoolingTower.inputflowmodel.state_out = setState_phX_Unique10(
        CoolingTower.inputflowmodel.P_out, CoolingTower.inputflowmodel.h_out, 
        CoolingTower.inputflowmodel.Xi);
      CoolingTower.inputflowmodel.T_in = temperature_Unique28(
        CoolingTower.inputflowmodel.state_in);
      CoolingTower.inputflowmodel.T_out = temperature_Unique28(
        CoolingTower.inputflowmodel.state_out);
      CoolingTower.inputflowmodel.rho_in = density_Unique29(
        CoolingTower.inputflowmodel.state_in);
      CoolingTower.inputflowmodel.rho_out = density_Unique29(
        CoolingTower.inputflowmodel.state_out);
      CoolingTower.inputflowmodel.rho = (CoolingTower.inputflowmodel.rho_in+
        CoolingTower.inputflowmodel.rho_out)/2;
      CoolingTower.inputflowmodel.Qv_in = CoolingTower.inputflowmodel.Q/
        CoolingTower.inputflowmodel.rho_in;
      CoolingTower.inputflowmodel.Qv_out =  -CoolingTower.inputflowmodel.Q/
        CoolingTower.inputflowmodel.rho_out;
      CoolingTower.inputflowmodel.Qv = (CoolingTower.inputflowmodel.Qv_in-
        CoolingTower.inputflowmodel.Qv_out)/2;
      CoolingTower.inputflowmodel.P_out-CoolingTower.inputflowmodel.P_in = 
        CoolingTower.inputflowmodel.DP;
      CoolingTower.inputflowmodel.Q*(CoolingTower.inputflowmodel.h_out-
        CoolingTower.inputflowmodel.h_in) = CoolingTower.inputflowmodel.W;
      CoolingTower.inputflowmodel.h_out-CoolingTower.inputflowmodel.h_in = 
        CoolingTower.inputflowmodel.DH;
      CoolingTower.inputflowmodel.T_out-CoolingTower.inputflowmodel.T_in = 
        CoolingTower.inputflowmodel.DT;
      CoolingTower.inputflowmodel.C_in.Q+CoolingTower.inputflowmodel.C_out.Q = 0;
      CoolingTower.inputflowmodel.C_out.Xi_outflow = inStream(CoolingTower.inputflowmodel.C_in.Xi_outflow);
      assert(CoolingTower.inputflowmodel.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.inputflowmodel.P = CoolingTower.inputflowmodel.P_in;
      CoolingTower.inputflowmodel.h = CoolingTower.inputflowmodel.h_in;
      CoolingTower.inputflowmodel.T = CoolingTower.inputflowmodel.T_in;
      CoolingTower.inputflowmodel.DP = 0;
      CoolingTower.inputflowmodel.DH = 0;
    // end of extends 

  // Component CoolingTower.outputflowmodel
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.outputflowmodel.h_in = inStream(CoolingTower.outputflowmodel.C_in.h_outflow);
      CoolingTower.outputflowmodel.h_out = CoolingTower.outputflowmodel.C_out.h_outflow;
      CoolingTower.outputflowmodel.Q = CoolingTower.outputflowmodel.C_in.Q;
      CoolingTower.outputflowmodel.P_in = CoolingTower.outputflowmodel.C_in.P;
      CoolingTower.outputflowmodel.P_out = CoolingTower.outputflowmodel.C_out.P;
      CoolingTower.outputflowmodel.Xi = inStream(CoolingTower.outputflowmodel.C_in.Xi_outflow);
      CoolingTower.outputflowmodel.C_in.h_outflow = 1000000.0;
      CoolingTower.outputflowmodel.C_in.Xi_outflow = zeros(1);
      CoolingTower.outputflowmodel.state_in = setState_phX_Unique10(
        CoolingTower.outputflowmodel.P_in, CoolingTower.outputflowmodel.h_in, 
        CoolingTower.outputflowmodel.Xi);
      CoolingTower.outputflowmodel.state_out = setState_phX_Unique10(
        CoolingTower.outputflowmodel.P_out, CoolingTower.outputflowmodel.h_out, 
        CoolingTower.outputflowmodel.Xi);
      CoolingTower.outputflowmodel.T_in = temperature_Unique28(
        CoolingTower.outputflowmodel.state_in);
      CoolingTower.outputflowmodel.T_out = temperature_Unique28(
        CoolingTower.outputflowmodel.state_out);
      CoolingTower.outputflowmodel.rho_in = density_Unique29(
        CoolingTower.outputflowmodel.state_in);
      CoolingTower.outputflowmodel.rho_out = density_Unique29(
        CoolingTower.outputflowmodel.state_out);
      CoolingTower.outputflowmodel.rho = (CoolingTower.outputflowmodel.rho_in+
        CoolingTower.outputflowmodel.rho_out)/2;
      CoolingTower.outputflowmodel.Qv_in = CoolingTower.outputflowmodel.Q/
        CoolingTower.outputflowmodel.rho_in;
      CoolingTower.outputflowmodel.Qv_out =  -CoolingTower.outputflowmodel.Q/
        CoolingTower.outputflowmodel.rho_out;
      CoolingTower.outputflowmodel.Qv = (CoolingTower.outputflowmodel.Qv_in-
        CoolingTower.outputflowmodel.Qv_out)/2;
      CoolingTower.outputflowmodel.P_out-CoolingTower.outputflowmodel.P_in = 
        CoolingTower.outputflowmodel.DP;
      CoolingTower.outputflowmodel.Q*(CoolingTower.outputflowmodel.h_out-
        CoolingTower.outputflowmodel.h_in) = CoolingTower.outputflowmodel.W;
      CoolingTower.outputflowmodel.h_out-CoolingTower.outputflowmodel.h_in = 
        CoolingTower.outputflowmodel.DH;
      CoolingTower.outputflowmodel.T_out-CoolingTower.outputflowmodel.T_in = 
        CoolingTower.outputflowmodel.DT;
      CoolingTower.outputflowmodel.C_in.Q+CoolingTower.outputflowmodel.C_out.Q
         = 0;
      CoolingTower.outputflowmodel.C_out.Xi_outflow = inStream(CoolingTower.outputflowmodel.C_in.Xi_outflow);
      assert(CoolingTower.outputflowmodel.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.outputflowmodel.P = CoolingTower.outputflowmodel.P_in;
      CoolingTower.outputflowmodel.h = CoolingTower.outputflowmodel.h_in;
      CoolingTower.outputflowmodel.T = CoolingTower.outputflowmodel.T_in;
      CoolingTower.outputflowmodel.DP = 0;
      CoolingTower.outputflowmodel.DH = 0;
    // end of extends 

  // Component CoolingTower.pipe
  // class MetroscopeModelingLibrary.MoistAir.Pipes.Pipe
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.pipe.h_in = inStream(CoolingTower.pipe.C_in.h_outflow);
      CoolingTower.pipe.h_out = CoolingTower.pipe.C_out.h_outflow;
      CoolingTower.pipe.Q = CoolingTower.pipe.C_in.Q;
      CoolingTower.pipe.P_in = CoolingTower.pipe.C_in.P;
      CoolingTower.pipe.P_out = CoolingTower.pipe.C_out.P;
      CoolingTower.pipe.Xi = inStream(CoolingTower.pipe.C_in.Xi_outflow);
      CoolingTower.pipe.C_in.h_outflow = 1000000.0;
      CoolingTower.pipe.C_in.Xi_outflow = zeros(1);
      CoolingTower.pipe.state_in = setState_phX_Unique10(CoolingTower.pipe.P_in,
         CoolingTower.pipe.h_in, CoolingTower.pipe.Xi);
      CoolingTower.pipe.state_out = setState_phX_Unique10(CoolingTower.pipe.P_out,
         CoolingTower.pipe.h_out, CoolingTower.pipe.Xi);
      CoolingTower.pipe.T_in = temperature_Unique28(
        CoolingTower.pipe.state_in);
      CoolingTower.pipe.T_out = temperature_Unique28(
        CoolingTower.pipe.state_out);
      CoolingTower.pipe.rho_in = density_Unique29(
        CoolingTower.pipe.state_in);
      CoolingTower.pipe.rho_out = density_Unique29(
        CoolingTower.pipe.state_out);
      CoolingTower.pipe.rho = (CoolingTower.pipe.rho_in+CoolingTower.pipe.rho_out)
        /2;
      CoolingTower.pipe.Qv_in = CoolingTower.pipe.Q/CoolingTower.pipe.rho_in;
      CoolingTower.pipe.Qv_out =  -CoolingTower.pipe.Q/CoolingTower.pipe.rho_out;
      CoolingTower.pipe.Qv = (CoolingTower.pipe.Qv_in-CoolingTower.pipe.Qv_out)/2;
      CoolingTower.pipe.P_out-CoolingTower.pipe.P_in = CoolingTower.pipe.DP;
      CoolingTower.pipe.Q*(CoolingTower.pipe.h_out-CoolingTower.pipe.h_in) = 
        CoolingTower.pipe.W;
      CoolingTower.pipe.h_out-CoolingTower.pipe.h_in = CoolingTower.pipe.DH;
      CoolingTower.pipe.T_out-CoolingTower.pipe.T_in = CoolingTower.pipe.DT;
      CoolingTower.pipe.C_in.Q+CoolingTower.pipe.C_out.Q = 0;
      CoolingTower.pipe.C_out.Xi_outflow = inStream(CoolingTower.pipe.C_in.Xi_outflow);
      assert(CoolingTower.pipe.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      CoolingTower.pipe.h = CoolingTower.pipe.h_in;
      CoolingTower.pipe.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.Pipe
    equation
      if ( not CoolingTower.pipe.faulty) then 
        CoolingTower.pipe.fouling = 0;
      end if;
      CoolingTower.pipe.DP_f =  -(1+CoolingTower.pipe.fouling/100)*
        CoolingTower.pipe.Kfr*CoolingTower.pipe.Q*abs(CoolingTower.pipe.Q)/
        CoolingTower.pipe.rho_in;
      CoolingTower.pipe.DP_z =  -CoolingTower.pipe.rho_in*9.80665*
        CoolingTower.pipe.delta_z;
      CoolingTower.pipe.DP = CoolingTower.pipe.DP_f+CoolingTower.pipe.DP_z;
    // end of extends 

  // Component CoolingTower.Water_inlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.Water_inlet.C_in.P = CoolingTower.Water_inlet.P_in;
      CoolingTower.Water_inlet.C_in.Q = CoolingTower.Water_inlet.Q_in;
      inStream(CoolingTower.Water_inlet.C_in.h_outflow) = CoolingTower.Water_inlet.h_in;
      inStream(CoolingTower.Water_inlet.C_in.Xi_outflow) = CoolingTower.Water_inlet.Xi_in;
      CoolingTower.Water_inlet.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.Water_inlet.P_in, CoolingTower.Water_inlet.h_in, 
        CoolingTower.Water_inlet.Xi_in, 0, 0);
      CoolingTower.Water_inlet.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.Water_inlet.state_in);
      CoolingTower.Water_inlet.Qv_in = CoolingTower.Water_inlet.Q_in/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.Water_inlet.state_in);
      CoolingTower.Water_inlet.C_in.h_outflow = 0;
      CoolingTower.Water_inlet.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component CoolingTower.Water_outlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.Water_outlet.C_out.P = CoolingTower.Water_outlet.P_out;
      CoolingTower.Water_outlet.C_out.Q = CoolingTower.Water_outlet.Q_out;
      CoolingTower.Water_outlet.C_out.h_outflow = CoolingTower.Water_outlet.h_out;
      CoolingTower.Water_outlet.C_out.Xi_outflow = CoolingTower.Water_outlet.Xi_out;
      CoolingTower.Water_outlet.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.Water_outlet.P_out, CoolingTower.Water_outlet.h_out, 
        CoolingTower.Water_outlet.Xi_out, 0, 0);
      CoolingTower.Water_outlet.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.Water_outlet.state_out);
      CoolingTower.Water_outlet.Qv_out = CoolingTower.Water_outlet.Q_out/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.Water_outlet.state_out);
    // end of extends 

  // Component CoolingTower
  // class MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerMerkel
  equation
    if ( not CoolingTower.faulty) then 
      CoolingTower.fouling = 0;
    end if;
    CoolingTower.Q_cold_in = CoolingTower.Air_inlet.Q_in;
    CoolingTower.Q_cold_out = CoolingTower.Air_outlet.Q_out;
    CoolingTower.Q_hot_in = CoolingTower.Water_inlet.Q_in;
    CoolingTower.Q_hot_out = CoolingTower.Water_outlet.Q_out;
    CoolingTower.T_hot_in = CoolingTower.Water_inlet.T_in;
    CoolingTower.T_hot_out = CoolingTower.Water_outlet.T_out;
    CoolingTower.P_in = CoolingTower.Air_inlet.P_in;
    CoolingTower.P_out = CoolingTower.Air_outlet.P_out;
    CoolingTower.T_cold_in = CoolingTower.Air_inlet.T_in;
    CoolingTower.T_cold_out = CoolingTower.Air_outlet.T_out;
    CoolingTower.cp = Modelica.Media.Water.WaterIF97_ph.specificHeatCapacityCp_Unique40
      (
      CoolingTower.hot_side_cooling.state_in);
    CoolingTower.W = CoolingTower.Q_hot_in*CoolingTower.cp*(CoolingTower.T_hot_in
      -CoolingTower.T_hot_out);
    CoolingTower.Qv_evap = CoolingTower.Q_evap/1000;
    CoolingTower.Q_evap =  -(CoolingTower.Q_cold_out+CoolingTower.Q_cold_in);
    CoolingTower.Ratio = CoolingTower.Q_evap/CoolingTower.W;
    CoolingTower.Q_hot_in*CoolingTower.cp*(CoolingTower.T_hot_in-
      CoolingTower.T_hot_out)+CoolingTower.Q_cold_in*(CoolingTower.i_initial-
      CoolingTower.i_final) = 0;
    CoolingTower.T1 = CoolingTower.T_hot_out+0.1*(CoolingTower.T_hot_in-
      CoolingTower.T_hot_out);
    CoolingTower.T2 = CoolingTower.T_hot_out+0.4*(CoolingTower.T_hot_in-
      CoolingTower.T_hot_out);
    CoolingTower.T3 = CoolingTower.T_hot_out+0.6*(CoolingTower.T_hot_in-
      CoolingTower.T_hot_out);
    CoolingTower.T4 = CoolingTower.T_hot_out+0.9*(CoolingTower.T_hot_in-
      CoolingTower.T_hot_out);
    CoolingTower.i_initial = CoolingTower.Air_inlet.h_in;
    CoolingTower.i_final = CoolingTower.Air_outlet.h_out;
    CoolingTower.Air_outlet.relative_humidity = 1;
    CoolingTower.Air_outlet.Q_out*(1-CoolingTower.Air_outlet.Xi_out[1]) =  -
      CoolingTower.Air_inlet.Q_in*(1-CoolingTower.Air_inlet.Xi_in[1]);
    CoolingTower.Water_outlet.P_out = CoolingTower.Water_inlet.P_in;
    CoolingTower.Q_hot_out =  -(CoolingTower.Q_hot_in-CoolingTower.Q_evap);
    CoolingTower.i1 = h_pTX_Unique41(CoolingTower.P_in, CoolingTower.T1, {
      massFraction_pTphi_Unique31(CoolingTower.P_in, CoolingTower.T1, 1)})-(
      CoolingTower.i_initial+0.1*(CoolingTower.i_final-CoolingTower.i_initial));
    CoolingTower.i2 = h_pTX_Unique41(CoolingTower.P_in, CoolingTower.T2, {
      massFraction_pTphi_Unique31(CoolingTower.P_in, CoolingTower.T2, 1)})-(
      CoolingTower.i_initial+0.4*(CoolingTower.i_final-CoolingTower.i_initial));
    CoolingTower.i3 = h_pTX_Unique41(CoolingTower.P_in, CoolingTower.T3, {
      massFraction_pTphi_Unique31(CoolingTower.P_in, CoolingTower.T3, 1)})-(
      CoolingTower.i_initial+0.6*(CoolingTower.i_final-CoolingTower.i_initial));
    CoolingTower.i4 = h_pTX_Unique41(CoolingTower.P_in, CoolingTower.T4, {
      massFraction_pTphi_Unique31(CoolingTower.P_in, CoolingTower.T4, 1)})-(
      CoolingTower.i_initial+0.9*(CoolingTower.i_final-CoolingTower.i_initial));
    CoolingTower.iTot = 1/CoolingTower.i1+1/CoolingTower.i2+1/CoolingTower.i3+1/
      CoolingTower.i4;
    CoolingTower.Afr*CoolingTower.hd*(1-CoolingTower.fouling/100)*
      CoolingTower.afi*CoolingTower.Lfi/CoolingTower.Q_hot_in = CoolingTower.cp*
      CoolingTower.iTot*((CoolingTower.T_hot_in-CoolingTower.T_hot_out)/4);
    CoolingTower.rho_air_inlet = CoolingTower.inputflowmodel.rho_in;
    CoolingTower.rho_air_outlet = CoolingTower.outputflowmodel.rho_out;
    CoolingTower.pipe.Kfr = 0;
    CoolingTower.pipe.delta_z = 0;
    CoolingTower.Air_inlet.P_in = CoolingTower.Air_outlet.P_out;
    CoolingTower.deltaP_fan = CoolingTower.W_fan*CoolingTower.eta_fan/(abs(
      CoolingTower.V_inlet)*CoolingTower.Afr);
    if (CoolingTower.configuration == "natural") then 
      0.25*(CoolingTower.rho_air_inlet+CoolingTower.rho_air_outlet)*
        CoolingTower.Cf*abs(CoolingTower.V_inlet)*CoolingTower.V_inlet = (
        CoolingTower.rho_air_inlet-CoolingTower.rho_air_outlet)*CoolingTower.g*
        CoolingTower.Lfi;
      CoolingTower.Q_cold_in = CoolingTower.V_inlet*CoolingTower.Afr*
        CoolingTower.rho_air_inlet*(1-CoolingTower.Air_inlet.Xi_in[1]);
    elseif (CoolingTower.configuration == "mechanical") then 
      0.25*(CoolingTower.rho_air_inlet+CoolingTower.rho_air_outlet)*
        CoolingTower.Cf*abs(CoolingTower.V_inlet)*CoolingTower.V_inlet = 
        CoolingTower.W_fan*CoolingTower.eta_fan/(abs(CoolingTower.V_inlet)*
        CoolingTower.Afr);
      CoolingTower.Q_cold_in = CoolingTower.V_inlet*CoolingTower.Afr*
        CoolingTower.rho_air_inlet*(1-CoolingTower.Air_inlet.Xi_in[1]);
    end if;
    CoolingTower.inputflowmodel.C_out.P = CoolingTower.Air_inlet.C_in.P;
    CoolingTower.Air_inlet.C_in.Q+CoolingTower.inputflowmodel.C_out.Q = 0.0;
    CoolingTower.outputflowmodel.C_in.P = CoolingTower.Air_outlet.C_out.P;
    CoolingTower.Air_outlet.C_out.Q+CoolingTower.outputflowmodel.C_in.Q = 0.0;
    CoolingTower.pipe.C_in.P = CoolingTower.C_cold_in.P;
    CoolingTower.C_cold_in.Q-CoolingTower.pipe.C_in.Q = 0.0;
    CoolingTower.outputflowmodel.C_out.P = CoolingTower.C_cold_out.P;
    CoolingTower.C_cold_out.Q-CoolingTower.outputflowmodel.C_out.Q = 0.0;
    CoolingTower.hot_side_cooling.C_in.P = CoolingTower.C_hot_in.P;
    CoolingTower.C_hot_in.Q-CoolingTower.hot_side_cooling.C_in.Q = 0.0;
    CoolingTower.Water_outlet.C_out.P = CoolingTower.C_hot_out.P;
    CoolingTower.C_hot_out.Q-CoolingTower.Water_outlet.C_out.Q = 0.0;
    CoolingTower.hot_side_cooling.C_out.P = CoolingTower.Water_inlet.C_in.P;
    CoolingTower.Water_inlet.C_in.Q+CoolingTower.hot_side_cooling.C_out.Q = 0.0;
    CoolingTower.pipe.C_out.P = CoolingTower.inputflowmodel.C_in.P;
    CoolingTower.inputflowmodel.C_in.Q+CoolingTower.pipe.C_out.Q = 0.0;

  // Component CEC194_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC194_sensor.flow_model.h_in = inStream(CEC194_sensor.flow_model.C_in.h_outflow);
      CEC194_sensor.flow_model.h_out = CEC194_sensor.flow_model.C_out.h_outflow;
      CEC194_sensor.flow_model.Q = CEC194_sensor.flow_model.C_in.Q;
      CEC194_sensor.flow_model.P_in = CEC194_sensor.flow_model.C_in.P;
      CEC194_sensor.flow_model.P_out = CEC194_sensor.flow_model.C_out.P;
      CEC194_sensor.flow_model.Xi = inStream(CEC194_sensor.flow_model.C_in.Xi_outflow);
      CEC194_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC194_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC194_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC194_sensor.flow_model.P_in, CEC194_sensor.flow_model.h_in, 
        CEC194_sensor.flow_model.Xi, 0, 0);
      CEC194_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC194_sensor.flow_model.P_out, CEC194_sensor.flow_model.h_out, 
        CEC194_sensor.flow_model.Xi, 0, 0);
      CEC194_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC194_sensor.flow_model.state_in);
      CEC194_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC194_sensor.flow_model.state_out);
      CEC194_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC194_sensor.flow_model.state_in);
      CEC194_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC194_sensor.flow_model.state_out);
      CEC194_sensor.flow_model.rho = (CEC194_sensor.flow_model.rho_in+
        CEC194_sensor.flow_model.rho_out)/2;
      CEC194_sensor.flow_model.Qv_in = CEC194_sensor.flow_model.Q/
        CEC194_sensor.flow_model.rho_in;
      CEC194_sensor.flow_model.Qv_out =  -CEC194_sensor.flow_model.Q/
        CEC194_sensor.flow_model.rho_out;
      CEC194_sensor.flow_model.Qv = (CEC194_sensor.flow_model.Qv_in-
        CEC194_sensor.flow_model.Qv_out)/2;
      CEC194_sensor.flow_model.P_out-CEC194_sensor.flow_model.P_in = 
        CEC194_sensor.flow_model.DP;
      CEC194_sensor.flow_model.Q*(CEC194_sensor.flow_model.h_out-
        CEC194_sensor.flow_model.h_in) = CEC194_sensor.flow_model.W;
      CEC194_sensor.flow_model.h_out-CEC194_sensor.flow_model.h_in = 
        CEC194_sensor.flow_model.DH;
      CEC194_sensor.flow_model.T_out-CEC194_sensor.flow_model.T_in = 
        CEC194_sensor.flow_model.DT;
      CEC194_sensor.flow_model.C_in.Q+CEC194_sensor.flow_model.C_out.Q = 0;
      CEC194_sensor.flow_model.C_out.Xi_outflow = inStream(CEC194_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC194_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC194_sensor.flow_model.P = CEC194_sensor.flow_model.P_in;
      CEC194_sensor.flow_model.h = CEC194_sensor.flow_model.h_in;
      CEC194_sensor.flow_model.T = CEC194_sensor.flow_model.T_in;
      CEC194_sensor.flow_model.DP = 0;
      CEC194_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC194_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC194_sensor.faulty_flow_rate) then 
        CEC194_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC194_sensor.P = CEC194_sensor.C_in.P;
      CEC194_sensor.Q = CEC194_sensor.C_in.Q+CEC194_sensor.mass_flow_rate_bias;
      CEC194_sensor.Xi = inStream(CEC194_sensor.C_in.Xi_outflow);
      CEC194_sensor.h = inStream(CEC194_sensor.C_in.h_outflow);
      CEC194_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC194_sensor.P, CEC194_sensor.h, CEC194_sensor.Xi, 0, 0);
      assert(CEC194_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC194_sensor.T = CEC194_sensor.flow_model.T;
      CEC194_sensor.T_degC+273.15 = CEC194_sensor.T;
      CEC194_sensor.T_degF = CEC194_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC194_sensor.flow_model.C_in.P = CEC194_sensor.C_in.P;
    CEC194_sensor.C_in.Q-CEC194_sensor.flow_model.C_in.Q = 0.0;
    CEC194_sensor.flow_model.C_out.P = CEC194_sensor.C_out.P;
    CEC194_sensor.C_out.Q-CEC194_sensor.flow_model.C_out.Q = 0.0;

  // Component flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      flow_sensor.flow_model.h_in = inStream(flow_sensor.flow_model.C_in.h_outflow);
      flow_sensor.flow_model.h_out = flow_sensor.flow_model.C_out.h_outflow;
      flow_sensor.flow_model.Q = flow_sensor.flow_model.C_in.Q;
      flow_sensor.flow_model.P_in = flow_sensor.flow_model.C_in.P;
      flow_sensor.flow_model.P_out = flow_sensor.flow_model.C_out.P;
      flow_sensor.flow_model.Xi = inStream(flow_sensor.flow_model.C_in.Xi_outflow);
      flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (flow_sensor.flow_model.P_in, flow_sensor.flow_model.h_in, 
        flow_sensor.flow_model.Xi, 0, 0);
      flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (flow_sensor.flow_model.P_out, flow_sensor.flow_model.h_out, 
        flow_sensor.flow_model.Xi, 0, 0);
      flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        flow_sensor.flow_model.state_in);
      flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        flow_sensor.flow_model.state_out);
      flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        flow_sensor.flow_model.state_in);
      flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        flow_sensor.flow_model.state_out);
      flow_sensor.flow_model.rho = (flow_sensor.flow_model.rho_in+
        flow_sensor.flow_model.rho_out)/2;
      flow_sensor.flow_model.Qv_in = flow_sensor.flow_model.Q/flow_sensor.flow_model.rho_in;
      flow_sensor.flow_model.Qv_out =  -flow_sensor.flow_model.Q/
        flow_sensor.flow_model.rho_out;
      flow_sensor.flow_model.Qv = (flow_sensor.flow_model.Qv_in-flow_sensor.flow_model.Qv_out)
        /2;
      flow_sensor.flow_model.P_out-flow_sensor.flow_model.P_in = 
        flow_sensor.flow_model.DP;
      flow_sensor.flow_model.Q*(flow_sensor.flow_model.h_out-flow_sensor.flow_model.h_in)
         = flow_sensor.flow_model.W;
      flow_sensor.flow_model.h_out-flow_sensor.flow_model.h_in = 
        flow_sensor.flow_model.DH;
      flow_sensor.flow_model.T_out-flow_sensor.flow_model.T_in = 
        flow_sensor.flow_model.DT;
      flow_sensor.flow_model.C_in.Q+flow_sensor.flow_model.C_out.Q = 0;
      flow_sensor.flow_model.C_out.Xi_outflow = inStream(flow_sensor.flow_model.C_in.Xi_outflow);
      assert(flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      flow_sensor.flow_model.P = flow_sensor.flow_model.P_in;
      flow_sensor.flow_model.h = flow_sensor.flow_model.h_in;
      flow_sensor.flow_model.T = flow_sensor.flow_model.T_in;
      flow_sensor.flow_model.DP = 0;
      flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not flow_sensor.faulty_flow_rate) then 
        flow_sensor.mass_flow_rate_bias = 0;
      end if;
      flow_sensor.P = flow_sensor.C_in.P;
      flow_sensor.Q = flow_sensor.C_in.Q+flow_sensor.mass_flow_rate_bias;
      flow_sensor.Xi = inStream(flow_sensor.C_in.Xi_outflow);
      flow_sensor.h = inStream(flow_sensor.C_in.h_outflow);
      flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (flow_sensor.P, flow_sensor.h, flow_sensor.Xi, 0, 0);
      assert(flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      flow_sensor.Qv = flow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        flow_sensor.state);
      flow_sensor.Q_lm = flow_sensor.Qv*60000;
      flow_sensor.Q_th = flow_sensor.Q*3.6;
      flow_sensor.Q_lbs = flow_sensor.Q*0.453592428;
      flow_sensor.Q_Mlbh = flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    flow_sensor.flow_model.C_in.P = flow_sensor.C_in.P;
    flow_sensor.C_in.Q-flow_sensor.flow_model.C_in.Q = 0.0;
    flow_sensor.flow_model.C_out.P = flow_sensor.C_out.P;
    flow_sensor.C_out.Q-flow_sensor.flow_model.C_out.Q = 0.0;

  // Component BIL177_AVG_sensor
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      BIL177_AVG_sensor.C_out.P = BIL177_AVG_sensor.P_out;
      BIL177_AVG_sensor.C_out.Q = BIL177_AVG_sensor.Q_out;
      BIL177_AVG_sensor.C_out.h_outflow = BIL177_AVG_sensor.h_out;
      BIL177_AVG_sensor.C_out.Xi_outflow = BIL177_AVG_sensor.Xi_out;
      BIL177_AVG_sensor.state_out = setState_phX_Unique10(BIL177_AVG_sensor.P_out,
         BIL177_AVG_sensor.h_out, BIL177_AVG_sensor.Xi_out);
      BIL177_AVG_sensor.T_out = temperature_Unique28(
        BIL177_AVG_sensor.state_out);
      BIL177_AVG_sensor.Qv_out = BIL177_AVG_sensor.Q_out/density_Unique29(
        BIL177_AVG_sensor.state_out);
    // end of extends 
  equation
    BIL177_AVG_sensor.Xi_out[1] = massFraction_pTphi_Unique31(BIL177_AVG_sensor.P_out,
       BIL177_AVG_sensor.T_out, BIL177_AVG_sensor.relative_humidity);

  // Component sink
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      sink.C_in.P = sink.P_in;
      sink.C_in.Q = sink.Q_in;
      inStream(sink.C_in.h_outflow) = sink.h_in;
      inStream(sink.C_in.Xi_outflow) = sink.Xi_in;
      sink.state_in = setState_phX_Unique10(sink.P_in, sink.h_in, sink.Xi_in);
      sink.T_in = temperature_Unique28(
        sink.state_in);
      sink.Qv_in = sink.Q_in/density_Unique29(
        sink.state_in);
      sink.C_in.h_outflow = 0;
      sink.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    sink.Xi_in[1] = massFraction_pTphi_Unique31(sink.P_in, sink.T_in, 
      sink.relative_humidity);

  // Component AirInlet_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirInlet_Flow_sensor.flow_model.h_in = inStream(AirInlet_Flow_sensor.flow_model.C_in.h_outflow);
      AirInlet_Flow_sensor.flow_model.h_out = AirInlet_Flow_sensor.flow_model.C_out.h_outflow;
      AirInlet_Flow_sensor.flow_model.Q = AirInlet_Flow_sensor.flow_model.C_in.Q;
      AirInlet_Flow_sensor.flow_model.P_in = AirInlet_Flow_sensor.flow_model.C_in.P;
      AirInlet_Flow_sensor.flow_model.P_out = AirInlet_Flow_sensor.flow_model.C_out.P;
      AirInlet_Flow_sensor.flow_model.Xi = inStream(AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow);
      AirInlet_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirInlet_Flow_sensor.flow_model.state_in = setState_phX_Unique10(
        AirInlet_Flow_sensor.flow_model.P_in, AirInlet_Flow_sensor.flow_model.h_in,
         AirInlet_Flow_sensor.flow_model.Xi);
      AirInlet_Flow_sensor.flow_model.state_out = setState_phX_Unique10(
        AirInlet_Flow_sensor.flow_model.P_out, AirInlet_Flow_sensor.flow_model.h_out,
         AirInlet_Flow_sensor.flow_model.Xi);
      AirInlet_Flow_sensor.flow_model.T_in = temperature_Unique28(
        AirInlet_Flow_sensor.flow_model.state_in);
      AirInlet_Flow_sensor.flow_model.T_out = temperature_Unique28(
        AirInlet_Flow_sensor.flow_model.state_out);
      AirInlet_Flow_sensor.flow_model.rho_in = density_Unique29(
        AirInlet_Flow_sensor.flow_model.state_in);
      AirInlet_Flow_sensor.flow_model.rho_out = density_Unique29(
        AirInlet_Flow_sensor.flow_model.state_out);
      AirInlet_Flow_sensor.flow_model.rho = (AirInlet_Flow_sensor.flow_model.rho_in
        +AirInlet_Flow_sensor.flow_model.rho_out)/2;
      AirInlet_Flow_sensor.flow_model.Qv_in = AirInlet_Flow_sensor.flow_model.Q/
        AirInlet_Flow_sensor.flow_model.rho_in;
      AirInlet_Flow_sensor.flow_model.Qv_out =  -AirInlet_Flow_sensor.flow_model.Q
        /AirInlet_Flow_sensor.flow_model.rho_out;
      AirInlet_Flow_sensor.flow_model.Qv = (AirInlet_Flow_sensor.flow_model.Qv_in
        -AirInlet_Flow_sensor.flow_model.Qv_out)/2;
      AirInlet_Flow_sensor.flow_model.P_out-AirInlet_Flow_sensor.flow_model.P_in
         = AirInlet_Flow_sensor.flow_model.DP;
      AirInlet_Flow_sensor.flow_model.Q*(AirInlet_Flow_sensor.flow_model.h_out-
        AirInlet_Flow_sensor.flow_model.h_in) = AirInlet_Flow_sensor.flow_model.W;
      AirInlet_Flow_sensor.flow_model.h_out-AirInlet_Flow_sensor.flow_model.h_in
         = AirInlet_Flow_sensor.flow_model.DH;
      AirInlet_Flow_sensor.flow_model.T_out-AirInlet_Flow_sensor.flow_model.T_in
         = AirInlet_Flow_sensor.flow_model.DT;
      AirInlet_Flow_sensor.flow_model.C_in.Q+AirInlet_Flow_sensor.flow_model.C_out.Q
         = 0;
      AirInlet_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(AirInlet_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirInlet_Flow_sensor.flow_model.P = AirInlet_Flow_sensor.flow_model.P_in;
      AirInlet_Flow_sensor.flow_model.h = AirInlet_Flow_sensor.flow_model.h_in;
      AirInlet_Flow_sensor.flow_model.T = AirInlet_Flow_sensor.flow_model.T_in;
      AirInlet_Flow_sensor.flow_model.DP = 0;
      AirInlet_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirInlet_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirInlet_Flow_sensor.faulty_flow_rate) then 
        AirInlet_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      AirInlet_Flow_sensor.P = AirInlet_Flow_sensor.C_in.P;
      AirInlet_Flow_sensor.Q = AirInlet_Flow_sensor.C_in.Q+AirInlet_Flow_sensor.mass_flow_rate_bias;
      AirInlet_Flow_sensor.Xi = inStream(AirInlet_Flow_sensor.C_in.Xi_outflow);
      AirInlet_Flow_sensor.h = inStream(AirInlet_Flow_sensor.C_in.h_outflow);
      AirInlet_Flow_sensor.state = setState_phX_Unique10(AirInlet_Flow_sensor.P,
         AirInlet_Flow_sensor.h, AirInlet_Flow_sensor.Xi);
      assert(AirInlet_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      AirInlet_Flow_sensor.Qv = AirInlet_Flow_sensor.Q/density_Unique29(
        AirInlet_Flow_sensor.state);
      AirInlet_Flow_sensor.Q_lm = AirInlet_Flow_sensor.Qv*60000;
      AirInlet_Flow_sensor.Q_th = AirInlet_Flow_sensor.Q*3.6;
      AirInlet_Flow_sensor.Q_lbs = AirInlet_Flow_sensor.Q*0.453592428;
      AirInlet_Flow_sensor.Q_Mlbh = AirInlet_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    AirInlet_Flow_sensor.flow_model.C_in.P = AirInlet_Flow_sensor.C_in.P;
    AirInlet_Flow_sensor.C_in.Q-AirInlet_Flow_sensor.flow_model.C_in.Q = 0.0;
    AirInlet_Flow_sensor.flow_model.C_out.P = AirInlet_Flow_sensor.C_out.P;
    AirInlet_Flow_sensor.C_out.Q-AirInlet_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component BIL176_AVG_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      BIL176_AVG_sensor.flow_model.h_in = inStream(BIL176_AVG_sensor.flow_model.C_in.h_outflow);
      BIL176_AVG_sensor.flow_model.h_out = BIL176_AVG_sensor.flow_model.C_out.h_outflow;
      BIL176_AVG_sensor.flow_model.Q = BIL176_AVG_sensor.flow_model.C_in.Q;
      BIL176_AVG_sensor.flow_model.P_in = BIL176_AVG_sensor.flow_model.C_in.P;
      BIL176_AVG_sensor.flow_model.P_out = BIL176_AVG_sensor.flow_model.C_out.P;
      BIL176_AVG_sensor.flow_model.Xi = inStream(BIL176_AVG_sensor.flow_model.C_in.Xi_outflow);
      BIL176_AVG_sensor.flow_model.C_in.h_outflow = 1000000.0;
      BIL176_AVG_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      BIL176_AVG_sensor.flow_model.state_in = setState_phX_Unique10(
        BIL176_AVG_sensor.flow_model.P_in, BIL176_AVG_sensor.flow_model.h_in, 
        BIL176_AVG_sensor.flow_model.Xi);
      BIL176_AVG_sensor.flow_model.state_out = setState_phX_Unique10(
        BIL176_AVG_sensor.flow_model.P_out, BIL176_AVG_sensor.flow_model.h_out, 
        BIL176_AVG_sensor.flow_model.Xi);
      BIL176_AVG_sensor.flow_model.T_in = temperature_Unique28(
        BIL176_AVG_sensor.flow_model.state_in);
      BIL176_AVG_sensor.flow_model.T_out = temperature_Unique28(
        BIL176_AVG_sensor.flow_model.state_out);
      BIL176_AVG_sensor.flow_model.rho_in = density_Unique29(
        BIL176_AVG_sensor.flow_model.state_in);
      BIL176_AVG_sensor.flow_model.rho_out = density_Unique29(
        BIL176_AVG_sensor.flow_model.state_out);
      BIL176_AVG_sensor.flow_model.rho = (BIL176_AVG_sensor.flow_model.rho_in+
        BIL176_AVG_sensor.flow_model.rho_out)/2;
      BIL176_AVG_sensor.flow_model.Qv_in = BIL176_AVG_sensor.flow_model.Q/
        BIL176_AVG_sensor.flow_model.rho_in;
      BIL176_AVG_sensor.flow_model.Qv_out =  -BIL176_AVG_sensor.flow_model.Q/
        BIL176_AVG_sensor.flow_model.rho_out;
      BIL176_AVG_sensor.flow_model.Qv = (BIL176_AVG_sensor.flow_model.Qv_in-
        BIL176_AVG_sensor.flow_model.Qv_out)/2;
      BIL176_AVG_sensor.flow_model.P_out-BIL176_AVG_sensor.flow_model.P_in = 
        BIL176_AVG_sensor.flow_model.DP;
      BIL176_AVG_sensor.flow_model.Q*(BIL176_AVG_sensor.flow_model.h_out-
        BIL176_AVG_sensor.flow_model.h_in) = BIL176_AVG_sensor.flow_model.W;
      BIL176_AVG_sensor.flow_model.h_out-BIL176_AVG_sensor.flow_model.h_in = 
        BIL176_AVG_sensor.flow_model.DH;
      BIL176_AVG_sensor.flow_model.T_out-BIL176_AVG_sensor.flow_model.T_in = 
        BIL176_AVG_sensor.flow_model.DT;
      BIL176_AVG_sensor.flow_model.C_in.Q+BIL176_AVG_sensor.flow_model.C_out.Q
         = 0;
      BIL176_AVG_sensor.flow_model.C_out.Xi_outflow = inStream(BIL176_AVG_sensor.flow_model.C_in.Xi_outflow);
      assert(BIL176_AVG_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      BIL176_AVG_sensor.flow_model.P = BIL176_AVG_sensor.flow_model.P_in;
      BIL176_AVG_sensor.flow_model.h = BIL176_AVG_sensor.flow_model.h_in;
      BIL176_AVG_sensor.flow_model.T = BIL176_AVG_sensor.flow_model.T_in;
      BIL176_AVG_sensor.flow_model.DP = 0;
      BIL176_AVG_sensor.flow_model.DH = 0;
    // end of extends 

  // Component BIL176_AVG_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not BIL176_AVG_sensor.faulty_flow_rate) then 
        BIL176_AVG_sensor.mass_flow_rate_bias = 0;
      end if;
      BIL176_AVG_sensor.P = BIL176_AVG_sensor.C_in.P;
      BIL176_AVG_sensor.Q = BIL176_AVG_sensor.C_in.Q+BIL176_AVG_sensor.mass_flow_rate_bias;
      BIL176_AVG_sensor.Xi = inStream(BIL176_AVG_sensor.C_in.Xi_outflow);
      BIL176_AVG_sensor.h = inStream(BIL176_AVG_sensor.C_in.h_outflow);
      BIL176_AVG_sensor.state = setState_phX_Unique10(BIL176_AVG_sensor.P, 
        BIL176_AVG_sensor.h, BIL176_AVG_sensor.Xi);
      assert(BIL176_AVG_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      BIL176_AVG_sensor.T = BIL176_AVG_sensor.flow_model.T;
      BIL176_AVG_sensor.T_degC+273.15 = BIL176_AVG_sensor.T;
      BIL176_AVG_sensor.T_degF = BIL176_AVG_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    BIL176_AVG_sensor.flow_model.C_in.P = BIL176_AVG_sensor.C_in.P;
    BIL176_AVG_sensor.C_in.Q-BIL176_AVG_sensor.flow_model.C_in.Q = 0.0;
    BIL176_AVG_sensor.flow_model.C_out.P = BIL176_AVG_sensor.C_out.P;
    BIL176_AVG_sensor.C_out.Q-BIL176_AVG_sensor.flow_model.C_out.Q = 0.0;

  // Component AirInlet_Press_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirInlet_Press_sensor.flow_model.h_in = inStream(AirInlet_Press_sensor.flow_model.C_in.h_outflow);
      AirInlet_Press_sensor.flow_model.h_out = AirInlet_Press_sensor.flow_model.C_out.h_outflow;
      AirInlet_Press_sensor.flow_model.Q = AirInlet_Press_sensor.flow_model.C_in.Q;
      AirInlet_Press_sensor.flow_model.P_in = AirInlet_Press_sensor.flow_model.C_in.P;
      AirInlet_Press_sensor.flow_model.P_out = AirInlet_Press_sensor.flow_model.C_out.P;
      AirInlet_Press_sensor.flow_model.Xi = inStream(AirInlet_Press_sensor.flow_model.C_in.Xi_outflow);
      AirInlet_Press_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirInlet_Press_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirInlet_Press_sensor.flow_model.state_in = setState_phX_Unique10(
        AirInlet_Press_sensor.flow_model.P_in, AirInlet_Press_sensor.flow_model.h_in,
         AirInlet_Press_sensor.flow_model.Xi);
      AirInlet_Press_sensor.flow_model.state_out = setState_phX_Unique10(
        AirInlet_Press_sensor.flow_model.P_out, AirInlet_Press_sensor.flow_model.h_out,
         AirInlet_Press_sensor.flow_model.Xi);
      AirInlet_Press_sensor.flow_model.T_in = temperature_Unique28(
        AirInlet_Press_sensor.flow_model.state_in);
      AirInlet_Press_sensor.flow_model.T_out = temperature_Unique28(
        AirInlet_Press_sensor.flow_model.state_out);
      AirInlet_Press_sensor.flow_model.rho_in = density_Unique29(
        AirInlet_Press_sensor.flow_model.state_in);
      AirInlet_Press_sensor.flow_model.rho_out = density_Unique29(
        AirInlet_Press_sensor.flow_model.state_out);
      AirInlet_Press_sensor.flow_model.rho = (AirInlet_Press_sensor.flow_model.rho_in
        +AirInlet_Press_sensor.flow_model.rho_out)/2;
      AirInlet_Press_sensor.flow_model.Qv_in = AirInlet_Press_sensor.flow_model.Q
        /AirInlet_Press_sensor.flow_model.rho_in;
      AirInlet_Press_sensor.flow_model.Qv_out =  -AirInlet_Press_sensor.flow_model.Q
        /AirInlet_Press_sensor.flow_model.rho_out;
      AirInlet_Press_sensor.flow_model.Qv = (AirInlet_Press_sensor.flow_model.Qv_in
        -AirInlet_Press_sensor.flow_model.Qv_out)/2;
      AirInlet_Press_sensor.flow_model.P_out-AirInlet_Press_sensor.flow_model.P_in
         = AirInlet_Press_sensor.flow_model.DP;
      AirInlet_Press_sensor.flow_model.Q*(AirInlet_Press_sensor.flow_model.h_out
        -AirInlet_Press_sensor.flow_model.h_in) = AirInlet_Press_sensor.flow_model.W;
      AirInlet_Press_sensor.flow_model.h_out-AirInlet_Press_sensor.flow_model.h_in
         = AirInlet_Press_sensor.flow_model.DH;
      AirInlet_Press_sensor.flow_model.T_out-AirInlet_Press_sensor.flow_model.T_in
         = AirInlet_Press_sensor.flow_model.DT;
      AirInlet_Press_sensor.flow_model.C_in.Q+AirInlet_Press_sensor.flow_model.C_out.Q
         = 0;
      AirInlet_Press_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirInlet_Press_sensor.flow_model.C_in.Xi_outflow);
      assert(AirInlet_Press_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirInlet_Press_sensor.flow_model.P = AirInlet_Press_sensor.flow_model.P_in;
      AirInlet_Press_sensor.flow_model.h = AirInlet_Press_sensor.flow_model.h_in;
      AirInlet_Press_sensor.flow_model.T = AirInlet_Press_sensor.flow_model.T_in;
      AirInlet_Press_sensor.flow_model.DP = 0;
      AirInlet_Press_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirInlet_Press_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirInlet_Press_sensor.faulty_flow_rate) then 
        AirInlet_Press_sensor.mass_flow_rate_bias = 0;
      end if;
      AirInlet_Press_sensor.P = AirInlet_Press_sensor.C_in.P;
      AirInlet_Press_sensor.Q = AirInlet_Press_sensor.C_in.Q+AirInlet_Press_sensor.mass_flow_rate_bias;
      AirInlet_Press_sensor.Xi = inStream(AirInlet_Press_sensor.C_in.Xi_outflow);
      AirInlet_Press_sensor.h = inStream(AirInlet_Press_sensor.C_in.h_outflow);
      AirInlet_Press_sensor.state = setState_phX_Unique10(AirInlet_Press_sensor.P,
         AirInlet_Press_sensor.h, AirInlet_Press_sensor.Xi);
      assert(AirInlet_Press_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      AirInlet_Press_sensor.P_barA = AirInlet_Press_sensor.P*1E-05;
      AirInlet_Press_sensor.P_psiA = AirInlet_Press_sensor.P*0.000145038;
      AirInlet_Press_sensor.P_MPaA = AirInlet_Press_sensor.P*1E-06;
      AirInlet_Press_sensor.P_kPaA = AirInlet_Press_sensor.P*0.001;
      AirInlet_Press_sensor.P_barG = AirInlet_Press_sensor.P_barA-1;
      AirInlet_Press_sensor.P_psiG = AirInlet_Press_sensor.P_psiA-14.50377377;
      AirInlet_Press_sensor.P_MPaG = AirInlet_Press_sensor.P_MPaA-0.1;
      AirInlet_Press_sensor.P_kPaG = AirInlet_Press_sensor.P_kPaA-100;
      AirInlet_Press_sensor.P_mbar = AirInlet_Press_sensor.P*0.01;
      AirInlet_Press_sensor.P_inHg = AirInlet_Press_sensor.P*0.0002953006;
    // end of extends 
  equation
    AirInlet_Press_sensor.flow_model.C_in.P = AirInlet_Press_sensor.C_in.P;
    AirInlet_Press_sensor.C_in.Q-AirInlet_Press_sensor.flow_model.C_in.Q = 0.0;
    AirInlet_Press_sensor.flow_model.C_out.P = AirInlet_Press_sensor.C_out.P;
    AirInlet_Press_sensor.C_out.Q-AirInlet_Press_sensor.flow_model.C_out.Q = 0.0;

  // Component source1
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      source1.C_out.P = source1.P_out;
      source1.C_out.Q = source1.Q_out;
      source1.C_out.h_outflow = source1.h_out;
      source1.C_out.Xi_outflow = source1.Xi_out;
      source1.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (source1.P_out, source1.h_out, source1.Xi_out, 0, 0);
      source1.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        source1.state_out);
      source1.Qv_out = source1.Q_out/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        source1.state_out);
    // end of extends 

  // Component V423_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V423_valve.h_in = inStream(V423_valve.C_in.h_outflow);
      V423_valve.h_out = V423_valve.C_out.h_outflow;
      V423_valve.Q = V423_valve.C_in.Q;
      V423_valve.P_in = V423_valve.C_in.P;
      V423_valve.P_out = V423_valve.C_out.P;
      V423_valve.Xi = inStream(V423_valve.C_in.Xi_outflow);
      V423_valve.C_in.h_outflow = 1000000.0;
      V423_valve.C_in.Xi_outflow = zeros(0);
      V423_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V423_valve.P_in, V423_valve.h_in, V423_valve.Xi, 0, 0);
      V423_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V423_valve.P_out, V423_valve.h_out, V423_valve.Xi, 0, 0);
      V423_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V423_valve.state_in);
      V423_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V423_valve.state_out);
      V423_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V423_valve.state_in);
      V423_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V423_valve.state_out);
      V423_valve.rho = (V423_valve.rho_in+V423_valve.rho_out)/2;
      V423_valve.Qv_in = V423_valve.Q/V423_valve.rho_in;
      V423_valve.Qv_out =  -V423_valve.Q/V423_valve.rho_out;
      V423_valve.Qv = (V423_valve.Qv_in-V423_valve.Qv_out)/2;
      V423_valve.P_out-V423_valve.P_in = V423_valve.DP;
      V423_valve.Q*(V423_valve.h_out-V423_valve.h_in) = V423_valve.W;
      V423_valve.h_out-V423_valve.h_in = V423_valve.DH;
      V423_valve.T_out-V423_valve.T_in = V423_valve.DT;
      V423_valve.C_in.Q+V423_valve.C_out.Q = 0;
      V423_valve.C_out.Xi_outflow = inStream(V423_valve.C_in.Xi_outflow);
      assert(V423_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V423_valve.h = V423_valve.h_in;
      V423_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V423_valve.DP*V423_valve.Cv*abs(V423_valve.Cv) =  -1733000000000.0*abs(
        V423_valve.Q)*V423_valve.Q/V423_valve.rho_in^2;
      V423_valve.Cv = V423_valve.Opening*V423_valve.Cv_max;
    // end of extends 

  // Component V422_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V422_valve.h_in = inStream(V422_valve.C_in.h_outflow);
      V422_valve.h_out = V422_valve.C_out.h_outflow;
      V422_valve.Q = V422_valve.C_in.Q;
      V422_valve.P_in = V422_valve.C_in.P;
      V422_valve.P_out = V422_valve.C_out.P;
      V422_valve.Xi = inStream(V422_valve.C_in.Xi_outflow);
      V422_valve.C_in.h_outflow = 1000000.0;
      V422_valve.C_in.Xi_outflow = zeros(0);
      V422_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_valve.P_in, V422_valve.h_in, V422_valve.Xi, 0, 0);
      V422_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_valve.P_out, V422_valve.h_out, V422_valve.Xi, 0, 0);
      V422_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V422_valve.state_in);
      V422_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V422_valve.state_out);
      V422_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V422_valve.state_in);
      V422_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V422_valve.state_out);
      V422_valve.rho = (V422_valve.rho_in+V422_valve.rho_out)/2;
      V422_valve.Qv_in = V422_valve.Q/V422_valve.rho_in;
      V422_valve.Qv_out =  -V422_valve.Q/V422_valve.rho_out;
      V422_valve.Qv = (V422_valve.Qv_in-V422_valve.Qv_out)/2;
      V422_valve.P_out-V422_valve.P_in = V422_valve.DP;
      V422_valve.Q*(V422_valve.h_out-V422_valve.h_in) = V422_valve.W;
      V422_valve.h_out-V422_valve.h_in = V422_valve.DH;
      V422_valve.T_out-V422_valve.T_in = V422_valve.DT;
      V422_valve.C_in.Q+V422_valve.C_out.Q = 0;
      V422_valve.C_out.Xi_outflow = inStream(V422_valve.C_in.Xi_outflow);
      assert(V422_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V422_valve.h = V422_valve.h_in;
      V422_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V422_valve.DP*V422_valve.Cv*abs(V422_valve.Cv) =  -1733000000000.0*abs(
        V422_valve.Q)*V422_valve.Q/V422_valve.rho_in^2;
      V422_valve.Cv = V422_valve.Opening*V422_valve.Cv_max;
    // end of extends 

  // Component SP189_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    SP189_sensor.Opening_pc = SP189_sensor.Opening*100;

  // Component CEC195_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    CEC195_sensor.Opening_pc = CEC195_sensor.Opening*100;

  // Component Q_reject_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_reject_sensor.flow_model.h_in = inStream(Q_reject_sensor.flow_model.C_in.h_outflow);
      Q_reject_sensor.flow_model.h_out = Q_reject_sensor.flow_model.C_out.h_outflow;
      Q_reject_sensor.flow_model.Q = Q_reject_sensor.flow_model.C_in.Q;
      Q_reject_sensor.flow_model.P_in = Q_reject_sensor.flow_model.C_in.P;
      Q_reject_sensor.flow_model.P_out = Q_reject_sensor.flow_model.C_out.P;
      Q_reject_sensor.flow_model.Xi = inStream(Q_reject_sensor.flow_model.C_in.Xi_outflow);
      Q_reject_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_reject_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_reject_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_sensor.flow_model.P_in, Q_reject_sensor.flow_model.h_in, 
        Q_reject_sensor.flow_model.Xi, 0, 0);
      Q_reject_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_sensor.flow_model.P_out, Q_reject_sensor.flow_model.h_out, 
        Q_reject_sensor.flow_model.Xi, 0, 0);
      Q_reject_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_sensor.flow_model.state_in);
      Q_reject_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_sensor.flow_model.state_out);
      Q_reject_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_sensor.flow_model.state_in);
      Q_reject_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_sensor.flow_model.state_out);
      Q_reject_sensor.flow_model.rho = (Q_reject_sensor.flow_model.rho_in+
        Q_reject_sensor.flow_model.rho_out)/2;
      Q_reject_sensor.flow_model.Qv_in = Q_reject_sensor.flow_model.Q/
        Q_reject_sensor.flow_model.rho_in;
      Q_reject_sensor.flow_model.Qv_out =  -Q_reject_sensor.flow_model.Q/
        Q_reject_sensor.flow_model.rho_out;
      Q_reject_sensor.flow_model.Qv = (Q_reject_sensor.flow_model.Qv_in-
        Q_reject_sensor.flow_model.Qv_out)/2;
      Q_reject_sensor.flow_model.P_out-Q_reject_sensor.flow_model.P_in = 
        Q_reject_sensor.flow_model.DP;
      Q_reject_sensor.flow_model.Q*(Q_reject_sensor.flow_model.h_out-
        Q_reject_sensor.flow_model.h_in) = Q_reject_sensor.flow_model.W;
      Q_reject_sensor.flow_model.h_out-Q_reject_sensor.flow_model.h_in = 
        Q_reject_sensor.flow_model.DH;
      Q_reject_sensor.flow_model.T_out-Q_reject_sensor.flow_model.T_in = 
        Q_reject_sensor.flow_model.DT;
      Q_reject_sensor.flow_model.C_in.Q+Q_reject_sensor.flow_model.C_out.Q = 0;
      Q_reject_sensor.flow_model.C_out.Xi_outflow = inStream(Q_reject_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_reject_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_reject_sensor.flow_model.P = Q_reject_sensor.flow_model.P_in;
      Q_reject_sensor.flow_model.h = Q_reject_sensor.flow_model.h_in;
      Q_reject_sensor.flow_model.T = Q_reject_sensor.flow_model.T_in;
      Q_reject_sensor.flow_model.DP = 0;
      Q_reject_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_reject_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_reject_sensor.faulty_flow_rate) then 
        Q_reject_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_reject_sensor.P = Q_reject_sensor.C_in.P;
      Q_reject_sensor.Q = Q_reject_sensor.C_in.Q+Q_reject_sensor.mass_flow_rate_bias;
      Q_reject_sensor.Xi = inStream(Q_reject_sensor.C_in.Xi_outflow);
      Q_reject_sensor.h = inStream(Q_reject_sensor.C_in.h_outflow);
      Q_reject_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_sensor.P, Q_reject_sensor.h, Q_reject_sensor.Xi, 0, 0);
      assert(Q_reject_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Q_reject_sensor.Qv = Q_reject_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_sensor.state);
      Q_reject_sensor.Q_lm = Q_reject_sensor.Qv*60000;
      Q_reject_sensor.Q_th = Q_reject_sensor.Q*3.6;
      Q_reject_sensor.Q_lbs = Q_reject_sensor.Q*0.453592428;
      Q_reject_sensor.Q_Mlbh = Q_reject_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Q_reject_sensor.flow_model.C_in.P = Q_reject_sensor.C_in.P;
    Q_reject_sensor.C_in.Q-Q_reject_sensor.flow_model.C_in.Q = 0.0;
    Q_reject_sensor.flow_model.C_out.P = Q_reject_sensor.C_out.P;
    Q_reject_sensor.C_out.Q-Q_reject_sensor.flow_model.C_out.Q = 0.0;

  // Component Q_reject_press_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_reject_press_sensor.flow_model.h_in = inStream(Q_reject_press_sensor.flow_model.C_in.h_outflow);
      Q_reject_press_sensor.flow_model.h_out = Q_reject_press_sensor.flow_model.C_out.h_outflow;
      Q_reject_press_sensor.flow_model.Q = Q_reject_press_sensor.flow_model.C_in.Q;
      Q_reject_press_sensor.flow_model.P_in = Q_reject_press_sensor.flow_model.C_in.P;
      Q_reject_press_sensor.flow_model.P_out = Q_reject_press_sensor.flow_model.C_out.P;
      Q_reject_press_sensor.flow_model.Xi = inStream(Q_reject_press_sensor.flow_model.C_in.Xi_outflow);
      Q_reject_press_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_reject_press_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_reject_press_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.flow_model.P_in, Q_reject_press_sensor.flow_model.h_in,
         Q_reject_press_sensor.flow_model.Xi, 0, 0);
      Q_reject_press_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.flow_model.P_out, Q_reject_press_sensor.flow_model.h_out,
         Q_reject_press_sensor.flow_model.Xi, 0, 0);
      Q_reject_press_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_press_sensor.flow_model.state_in);
      Q_reject_press_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_press_sensor.flow_model.state_out);
      Q_reject_press_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_press_sensor.flow_model.state_in);
      Q_reject_press_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_press_sensor.flow_model.state_out);
      Q_reject_press_sensor.flow_model.rho = (Q_reject_press_sensor.flow_model.rho_in
        +Q_reject_press_sensor.flow_model.rho_out)/2;
      Q_reject_press_sensor.flow_model.Qv_in = Q_reject_press_sensor.flow_model.Q
        /Q_reject_press_sensor.flow_model.rho_in;
      Q_reject_press_sensor.flow_model.Qv_out =  -Q_reject_press_sensor.flow_model.Q
        /Q_reject_press_sensor.flow_model.rho_out;
      Q_reject_press_sensor.flow_model.Qv = (Q_reject_press_sensor.flow_model.Qv_in
        -Q_reject_press_sensor.flow_model.Qv_out)/2;
      Q_reject_press_sensor.flow_model.P_out-Q_reject_press_sensor.flow_model.P_in
         = Q_reject_press_sensor.flow_model.DP;
      Q_reject_press_sensor.flow_model.Q*(Q_reject_press_sensor.flow_model.h_out
        -Q_reject_press_sensor.flow_model.h_in) = Q_reject_press_sensor.flow_model.W;
      Q_reject_press_sensor.flow_model.h_out-Q_reject_press_sensor.flow_model.h_in
         = Q_reject_press_sensor.flow_model.DH;
      Q_reject_press_sensor.flow_model.T_out-Q_reject_press_sensor.flow_model.T_in
         = Q_reject_press_sensor.flow_model.DT;
      Q_reject_press_sensor.flow_model.C_in.Q+Q_reject_press_sensor.flow_model.C_out.Q
         = 0;
      Q_reject_press_sensor.flow_model.C_out.Xi_outflow = inStream(
        Q_reject_press_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_reject_press_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_reject_press_sensor.flow_model.P = Q_reject_press_sensor.flow_model.P_in;
      Q_reject_press_sensor.flow_model.h = Q_reject_press_sensor.flow_model.h_in;
      Q_reject_press_sensor.flow_model.T = Q_reject_press_sensor.flow_model.T_in;
      Q_reject_press_sensor.flow_model.DP = 0;
      Q_reject_press_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_reject_press_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_reject_press_sensor.faulty_flow_rate) then 
        Q_reject_press_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_reject_press_sensor.P = Q_reject_press_sensor.C_in.P;
      Q_reject_press_sensor.Q = Q_reject_press_sensor.C_in.Q+Q_reject_press_sensor.mass_flow_rate_bias;
      Q_reject_press_sensor.Xi = inStream(Q_reject_press_sensor.C_in.Xi_outflow);
      Q_reject_press_sensor.h = inStream(Q_reject_press_sensor.C_in.h_outflow);
      Q_reject_press_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.P, Q_reject_press_sensor.h, Q_reject_press_sensor.Xi,
         0, 0);
      assert(Q_reject_press_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Q_reject_press_sensor.P_barA = Q_reject_press_sensor.P*1E-05;
      Q_reject_press_sensor.P_psiA = Q_reject_press_sensor.P*0.000145038;
      Q_reject_press_sensor.P_MPaA = Q_reject_press_sensor.P*1E-06;
      Q_reject_press_sensor.P_kPaA = Q_reject_press_sensor.P*0.001;
      Q_reject_press_sensor.P_barG = Q_reject_press_sensor.P_barA-1;
      Q_reject_press_sensor.P_psiG = Q_reject_press_sensor.P_psiA-14.50377377;
      Q_reject_press_sensor.P_MPaG = Q_reject_press_sensor.P_MPaA-0.1;
      Q_reject_press_sensor.P_kPaG = Q_reject_press_sensor.P_kPaA-100;
      Q_reject_press_sensor.P_mbar = Q_reject_press_sensor.P*0.01;
      Q_reject_press_sensor.P_inHg = Q_reject_press_sensor.P*0.0002953006;
    // end of extends 
  equation
    Q_reject_press_sensor.flow_model.C_in.P = Q_reject_press_sensor.C_in.P;
    Q_reject_press_sensor.C_in.Q-Q_reject_press_sensor.flow_model.C_in.Q = 0.0;
    Q_reject_press_sensor.flow_model.C_out.P = Q_reject_press_sensor.C_out.P;
    Q_reject_press_sensor.C_out.Q-Q_reject_press_sensor.flow_model.C_out.Q = 0.0;

  // Component Pump
  // class MetroscopeModelingLibrary.WaterSteam.Machines.Pump
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Pump.h_in = inStream(Pump.C_in.h_outflow);
      Pump.h_out = Pump.C_out.h_outflow;
      Pump.Q = Pump.C_in.Q;
      Pump.P_in = Pump.C_in.P;
      Pump.P_out = Pump.C_out.P;
      Pump.Xi = inStream(Pump.C_in.Xi_outflow);
      Pump.C_in.h_outflow = 1000000.0;
      Pump.C_in.Xi_outflow = zeros(0);
      Pump.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        Pump.P_in, Pump.h_in, Pump.Xi, 0, 0);
      Pump.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        Pump.P_out, Pump.h_out, Pump.Xi, 0, 0);
      Pump.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        Pump.state_in);
      Pump.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        Pump.state_out);
      Pump.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        Pump.state_in);
      Pump.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        Pump.state_out);
      Pump.rho = (Pump.rho_in+Pump.rho_out)/2;
      Pump.Qv_in = Pump.Q/Pump.rho_in;
      Pump.Qv_out =  -Pump.Q/Pump.rho_out;
      Pump.Qv = (Pump.Qv_in-Pump.Qv_out)/2;
      Pump.P_out-Pump.P_in = Pump.DP;
      Pump.Q*(Pump.h_out-Pump.h_in) = Pump.W;
      Pump.h_out-Pump.h_in = Pump.DH;
      Pump.T_out-Pump.T_in = Pump.DT;
      Pump.C_in.Q+Pump.C_out.Q = 0;
      Pump.C_out.Xi_outflow = inStream(Pump.C_in.Xi_outflow);
      assert(Pump.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Machines.Pump
    equation
      Pump.R = Pump.VRot/Pump.VRotn;
      Pump.hn = Pump.a1*Pump.Qv^2+Pump.a2*Pump.Qv*Pump.R+Pump.a3*Pump.R^2;
      Pump.rh = noEvent(max((if Pump.R > 1E-05 then Pump.b1*Pump.Qv^2/Pump.R^2+
        Pump.b2*Pump.Qv/Pump.R+Pump.b3 else Pump.b3), Pump.rh_min));
      Pump.DP = Pump.rho*9.80665*Pump.hn;
      Pump.DH = 9.80665*Pump.hn/Pump.rh;
      Pump.Wm = Pump.C_power.W;
      Pump.Wm = Pump.W/Pump.rm;
      Pump.Wh = Pump.Qv*Pump.DP/Pump.rh;
    // end of extends 

  // Component CEC809_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC809_sensor.flow_model.h_in = inStream(CEC809_sensor.flow_model.C_in.h_outflow);
      CEC809_sensor.flow_model.h_out = CEC809_sensor.flow_model.C_out.h_outflow;
      CEC809_sensor.flow_model.Q = CEC809_sensor.flow_model.C_in.Q;
      CEC809_sensor.flow_model.P_in = CEC809_sensor.flow_model.C_in.P;
      CEC809_sensor.flow_model.P_out = CEC809_sensor.flow_model.C_out.P;
      CEC809_sensor.flow_model.Xi = inStream(CEC809_sensor.flow_model.C_in.Xi_outflow);
      CEC809_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC809_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC809_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC809_sensor.flow_model.P_in, CEC809_sensor.flow_model.h_in, 
        CEC809_sensor.flow_model.Xi, 0, 0);
      CEC809_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC809_sensor.flow_model.P_out, CEC809_sensor.flow_model.h_out, 
        CEC809_sensor.flow_model.Xi, 0, 0);
      CEC809_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC809_sensor.flow_model.state_in);
      CEC809_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC809_sensor.flow_model.state_out);
      CEC809_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC809_sensor.flow_model.state_in);
      CEC809_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC809_sensor.flow_model.state_out);
      CEC809_sensor.flow_model.rho = (CEC809_sensor.flow_model.rho_in+
        CEC809_sensor.flow_model.rho_out)/2;
      CEC809_sensor.flow_model.Qv_in = CEC809_sensor.flow_model.Q/
        CEC809_sensor.flow_model.rho_in;
      CEC809_sensor.flow_model.Qv_out =  -CEC809_sensor.flow_model.Q/
        CEC809_sensor.flow_model.rho_out;
      CEC809_sensor.flow_model.Qv = (CEC809_sensor.flow_model.Qv_in-
        CEC809_sensor.flow_model.Qv_out)/2;
      CEC809_sensor.flow_model.P_out-CEC809_sensor.flow_model.P_in = 
        CEC809_sensor.flow_model.DP;
      CEC809_sensor.flow_model.Q*(CEC809_sensor.flow_model.h_out-
        CEC809_sensor.flow_model.h_in) = CEC809_sensor.flow_model.W;
      CEC809_sensor.flow_model.h_out-CEC809_sensor.flow_model.h_in = 
        CEC809_sensor.flow_model.DH;
      CEC809_sensor.flow_model.T_out-CEC809_sensor.flow_model.T_in = 
        CEC809_sensor.flow_model.DT;
      CEC809_sensor.flow_model.C_in.Q+CEC809_sensor.flow_model.C_out.Q = 0;
      CEC809_sensor.flow_model.C_out.Xi_outflow = inStream(CEC809_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC809_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC809_sensor.flow_model.P = CEC809_sensor.flow_model.P_in;
      CEC809_sensor.flow_model.h = CEC809_sensor.flow_model.h_in;
      CEC809_sensor.flow_model.T = CEC809_sensor.flow_model.T_in;
      CEC809_sensor.flow_model.DP = 0;
      CEC809_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC809_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC809_sensor.faulty_flow_rate) then 
        CEC809_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC809_sensor.P = CEC809_sensor.C_in.P;
      CEC809_sensor.Q = CEC809_sensor.C_in.Q+CEC809_sensor.mass_flow_rate_bias;
      CEC809_sensor.Xi = inStream(CEC809_sensor.C_in.Xi_outflow);
      CEC809_sensor.h = inStream(CEC809_sensor.C_in.h_outflow);
      CEC809_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC809_sensor.P, CEC809_sensor.h, CEC809_sensor.Xi, 0, 0);
      assert(CEC809_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC809_sensor.T = CEC809_sensor.flow_model.T;
      CEC809_sensor.T_degC+273.15 = CEC809_sensor.T;
      CEC809_sensor.T_degF = CEC809_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC809_sensor.flow_model.C_in.P = CEC809_sensor.C_in.P;
    CEC809_sensor.C_in.Q-CEC809_sensor.flow_model.C_in.Q = 0.0;
    CEC809_sensor.flow_model.C_out.P = CEC809_sensor.C_out.P;
    CEC809_sensor.C_out.Q-CEC809_sensor.flow_model.C_out.Q = 0.0;

  // Component Press1_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Press1_sensor.flow_model.h_in = inStream(Press1_sensor.flow_model.C_in.h_outflow);
      Press1_sensor.flow_model.h_out = Press1_sensor.flow_model.C_out.h_outflow;
      Press1_sensor.flow_model.Q = Press1_sensor.flow_model.C_in.Q;
      Press1_sensor.flow_model.P_in = Press1_sensor.flow_model.C_in.P;
      Press1_sensor.flow_model.P_out = Press1_sensor.flow_model.C_out.P;
      Press1_sensor.flow_model.Xi = inStream(Press1_sensor.flow_model.C_in.Xi_outflow);
      Press1_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Press1_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Press1_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.flow_model.P_in, Press1_sensor.flow_model.h_in, 
        Press1_sensor.flow_model.Xi, 0, 0);
      Press1_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.flow_model.P_out, Press1_sensor.flow_model.h_out, 
        Press1_sensor.flow_model.Xi, 0, 0);
      Press1_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press1_sensor.flow_model.state_in);
      Press1_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press1_sensor.flow_model.state_out);
      Press1_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press1_sensor.flow_model.state_in);
      Press1_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press1_sensor.flow_model.state_out);
      Press1_sensor.flow_model.rho = (Press1_sensor.flow_model.rho_in+
        Press1_sensor.flow_model.rho_out)/2;
      Press1_sensor.flow_model.Qv_in = Press1_sensor.flow_model.Q/
        Press1_sensor.flow_model.rho_in;
      Press1_sensor.flow_model.Qv_out =  -Press1_sensor.flow_model.Q/
        Press1_sensor.flow_model.rho_out;
      Press1_sensor.flow_model.Qv = (Press1_sensor.flow_model.Qv_in-
        Press1_sensor.flow_model.Qv_out)/2;
      Press1_sensor.flow_model.P_out-Press1_sensor.flow_model.P_in = 
        Press1_sensor.flow_model.DP;
      Press1_sensor.flow_model.Q*(Press1_sensor.flow_model.h_out-
        Press1_sensor.flow_model.h_in) = Press1_sensor.flow_model.W;
      Press1_sensor.flow_model.h_out-Press1_sensor.flow_model.h_in = 
        Press1_sensor.flow_model.DH;
      Press1_sensor.flow_model.T_out-Press1_sensor.flow_model.T_in = 
        Press1_sensor.flow_model.DT;
      Press1_sensor.flow_model.C_in.Q+Press1_sensor.flow_model.C_out.Q = 0;
      Press1_sensor.flow_model.C_out.Xi_outflow = inStream(Press1_sensor.flow_model.C_in.Xi_outflow);
      assert(Press1_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Press1_sensor.flow_model.P = Press1_sensor.flow_model.P_in;
      Press1_sensor.flow_model.h = Press1_sensor.flow_model.h_in;
      Press1_sensor.flow_model.T = Press1_sensor.flow_model.T_in;
      Press1_sensor.flow_model.DP = 0;
      Press1_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Press1_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Press1_sensor.faulty_flow_rate) then 
        Press1_sensor.mass_flow_rate_bias = 0;
      end if;
      Press1_sensor.P = Press1_sensor.C_in.P;
      Press1_sensor.Q = Press1_sensor.C_in.Q+Press1_sensor.mass_flow_rate_bias;
      Press1_sensor.Xi = inStream(Press1_sensor.C_in.Xi_outflow);
      Press1_sensor.h = inStream(Press1_sensor.C_in.h_outflow);
      Press1_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.P, Press1_sensor.h, Press1_sensor.Xi, 0, 0);
      assert(Press1_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Press1_sensor.P_barA = Press1_sensor.P*1E-05;
      Press1_sensor.P_psiA = Press1_sensor.P*0.000145038;
      Press1_sensor.P_MPaA = Press1_sensor.P*1E-06;
      Press1_sensor.P_kPaA = Press1_sensor.P*0.001;
      Press1_sensor.P_barG = Press1_sensor.P_barA-1;
      Press1_sensor.P_psiG = Press1_sensor.P_psiA-14.50377377;
      Press1_sensor.P_MPaG = Press1_sensor.P_MPaA-0.1;
      Press1_sensor.P_kPaG = Press1_sensor.P_kPaA-100;
      Press1_sensor.P_mbar = Press1_sensor.P*0.01;
      Press1_sensor.P_inHg = Press1_sensor.P*0.0002953006;
    // end of extends 
  equation
    Press1_sensor.flow_model.C_in.P = Press1_sensor.C_in.P;
    Press1_sensor.C_in.Q-Press1_sensor.flow_model.C_in.Q = 0.0;
    Press1_sensor.flow_model.C_out.P = Press1_sensor.C_out.P;
    Press1_sensor.C_out.Q-Press1_sensor.flow_model.C_out.Q = 0.0;

  // Component source
  // class MetroscopeModelingLibrary.Power.BoundaryConditions.Source
  equation
    source.W_out = source.C_out.W;

  // Component V421_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V421_valve.h_in = inStream(V421_valve.C_in.h_outflow);
      V421_valve.h_out = V421_valve.C_out.h_outflow;
      V421_valve.Q = V421_valve.C_in.Q;
      V421_valve.P_in = V421_valve.C_in.P;
      V421_valve.P_out = V421_valve.C_out.P;
      V421_valve.Xi = inStream(V421_valve.C_in.Xi_outflow);
      V421_valve.C_in.h_outflow = 1000000.0;
      V421_valve.C_in.Xi_outflow = zeros(0);
      V421_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V421_valve.P_in, V421_valve.h_in, V421_valve.Xi, 0, 0);
      V421_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V421_valve.P_out, V421_valve.h_out, V421_valve.Xi, 0, 0);
      V421_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V421_valve.state_in);
      V421_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V421_valve.state_out);
      V421_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V421_valve.state_in);
      V421_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V421_valve.state_out);
      V421_valve.rho = (V421_valve.rho_in+V421_valve.rho_out)/2;
      V421_valve.Qv_in = V421_valve.Q/V421_valve.rho_in;
      V421_valve.Qv_out =  -V421_valve.Q/V421_valve.rho_out;
      V421_valve.Qv = (V421_valve.Qv_in-V421_valve.Qv_out)/2;
      V421_valve.P_out-V421_valve.P_in = V421_valve.DP;
      V421_valve.Q*(V421_valve.h_out-V421_valve.h_in) = V421_valve.W;
      V421_valve.h_out-V421_valve.h_in = V421_valve.DH;
      V421_valve.T_out-V421_valve.T_in = V421_valve.DT;
      V421_valve.C_in.Q+V421_valve.C_out.Q = 0;
      V421_valve.C_out.Xi_outflow = inStream(V421_valve.C_in.Xi_outflow);
      assert(V421_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V421_valve.h = V421_valve.h_in;
      V421_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V421_valve.DP*V421_valve.Cv*abs(V421_valve.Cv) =  -1733000000000.0*abs(
        V421_valve.Q)*V421_valve.Q/V421_valve.rho_in^2;
      V421_valve.Cv = V421_valve.Opening*V421_valve.Cv_max;
    // end of extends 

  // Component CEC191_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    CEC191_sensor.Opening_pc = CEC191_sensor.Opening*100;

  // Component Q_recirculation_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_recirculation_sensor.flow_model.h_in = inStream(Q_recirculation_sensor.flow_model.C_in.h_outflow);
      Q_recirculation_sensor.flow_model.h_out = Q_recirculation_sensor.flow_model.C_out.h_outflow;
      Q_recirculation_sensor.flow_model.Q = Q_recirculation_sensor.flow_model.C_in.Q;
      Q_recirculation_sensor.flow_model.P_in = Q_recirculation_sensor.flow_model.C_in.P;
      Q_recirculation_sensor.flow_model.P_out = Q_recirculation_sensor.flow_model.C_out.P;
      Q_recirculation_sensor.flow_model.Xi = inStream(Q_recirculation_sensor.flow_model.C_in.Xi_outflow);
      Q_recirculation_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_recirculation_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_recirculation_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.flow_model.P_in, Q_recirculation_sensor.flow_model.h_in,
         Q_recirculation_sensor.flow_model.Xi, 0, 0);
      Q_recirculation_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.flow_model.P_out, Q_recirculation_sensor.flow_model.h_out,
         Q_recirculation_sensor.flow_model.Xi, 0, 0);
      Q_recirculation_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_recirculation_sensor.flow_model.state_in);
      Q_recirculation_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_recirculation_sensor.flow_model.state_out);
      Q_recirculation_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.flow_model.state_in);
      Q_recirculation_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.flow_model.state_out);
      Q_recirculation_sensor.flow_model.rho = (Q_recirculation_sensor.flow_model.rho_in
        +Q_recirculation_sensor.flow_model.rho_out)/2;
      Q_recirculation_sensor.flow_model.Qv_in = Q_recirculation_sensor.flow_model.Q
        /Q_recirculation_sensor.flow_model.rho_in;
      Q_recirculation_sensor.flow_model.Qv_out =  -Q_recirculation_sensor.flow_model.Q
        /Q_recirculation_sensor.flow_model.rho_out;
      Q_recirculation_sensor.flow_model.Qv = (Q_recirculation_sensor.flow_model.Qv_in
        -Q_recirculation_sensor.flow_model.Qv_out)/2;
      Q_recirculation_sensor.flow_model.P_out-Q_recirculation_sensor.flow_model.P_in
         = Q_recirculation_sensor.flow_model.DP;
      Q_recirculation_sensor.flow_model.Q*(Q_recirculation_sensor.flow_model.h_out
        -Q_recirculation_sensor.flow_model.h_in) = Q_recirculation_sensor.flow_model.W;
      Q_recirculation_sensor.flow_model.h_out-Q_recirculation_sensor.flow_model.h_in
         = Q_recirculation_sensor.flow_model.DH;
      Q_recirculation_sensor.flow_model.T_out-Q_recirculation_sensor.flow_model.T_in
         = Q_recirculation_sensor.flow_model.DT;
      Q_recirculation_sensor.flow_model.C_in.Q+Q_recirculation_sensor.flow_model.C_out.Q
         = 0;
      Q_recirculation_sensor.flow_model.C_out.Xi_outflow = inStream(
        Q_recirculation_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_recirculation_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_recirculation_sensor.flow_model.P = Q_recirculation_sensor.flow_model.P_in;
      Q_recirculation_sensor.flow_model.h = Q_recirculation_sensor.flow_model.h_in;
      Q_recirculation_sensor.flow_model.T = Q_recirculation_sensor.flow_model.T_in;
      Q_recirculation_sensor.flow_model.DP = 0;
      Q_recirculation_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_recirculation_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_recirculation_sensor.faulty_flow_rate) then 
        Q_recirculation_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_recirculation_sensor.P = Q_recirculation_sensor.C_in.P;
      Q_recirculation_sensor.Q = Q_recirculation_sensor.C_in.Q+Q_recirculation_sensor.mass_flow_rate_bias;
      Q_recirculation_sensor.Xi = inStream(Q_recirculation_sensor.C_in.Xi_outflow);
      Q_recirculation_sensor.h = inStream(Q_recirculation_sensor.C_in.h_outflow);
      Q_recirculation_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.P, Q_recirculation_sensor.h, Q_recirculation_sensor.Xi,
         0, 0);
      assert(Q_recirculation_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Q_recirculation_sensor.Qv = Q_recirculation_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.state);
      Q_recirculation_sensor.Q_lm = Q_recirculation_sensor.Qv*60000;
      Q_recirculation_sensor.Q_th = Q_recirculation_sensor.Q*3.6;
      Q_recirculation_sensor.Q_lbs = Q_recirculation_sensor.Q*0.453592428;
      Q_recirculation_sensor.Q_Mlbh = Q_recirculation_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Q_recirculation_sensor.flow_model.C_in.P = Q_recirculation_sensor.C_in.P;
    Q_recirculation_sensor.C_in.Q-Q_recirculation_sensor.flow_model.C_in.Q = 0.0;
    Q_recirculation_sensor.flow_model.C_out.P = Q_recirculation_sensor.C_out.P;
    Q_recirculation_sensor.C_out.Q-Q_recirculation_sensor.flow_model.C_out.Q = 
      0.0;

  // Component CEC197_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC197_sensor.flow_model.h_in = inStream(CEC197_sensor.flow_model.C_in.h_outflow);
      CEC197_sensor.flow_model.h_out = CEC197_sensor.flow_model.C_out.h_outflow;
      CEC197_sensor.flow_model.Q = CEC197_sensor.flow_model.C_in.Q;
      CEC197_sensor.flow_model.P_in = CEC197_sensor.flow_model.C_in.P;
      CEC197_sensor.flow_model.P_out = CEC197_sensor.flow_model.C_out.P;
      CEC197_sensor.flow_model.Xi = inStream(CEC197_sensor.flow_model.C_in.Xi_outflow);
      CEC197_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC197_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC197_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.flow_model.P_in, CEC197_sensor.flow_model.h_in, 
        CEC197_sensor.flow_model.Xi, 0, 0);
      CEC197_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.flow_model.P_out, CEC197_sensor.flow_model.h_out, 
        CEC197_sensor.flow_model.Xi, 0, 0);
      CEC197_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC197_sensor.flow_model.state_in);
      CEC197_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC197_sensor.flow_model.state_out);
      CEC197_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.flow_model.state_in);
      CEC197_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.flow_model.state_out);
      CEC197_sensor.flow_model.rho = (CEC197_sensor.flow_model.rho_in+
        CEC197_sensor.flow_model.rho_out)/2;
      CEC197_sensor.flow_model.Qv_in = CEC197_sensor.flow_model.Q/
        CEC197_sensor.flow_model.rho_in;
      CEC197_sensor.flow_model.Qv_out =  -CEC197_sensor.flow_model.Q/
        CEC197_sensor.flow_model.rho_out;
      CEC197_sensor.flow_model.Qv = (CEC197_sensor.flow_model.Qv_in-
        CEC197_sensor.flow_model.Qv_out)/2;
      CEC197_sensor.flow_model.P_out-CEC197_sensor.flow_model.P_in = 
        CEC197_sensor.flow_model.DP;
      CEC197_sensor.flow_model.Q*(CEC197_sensor.flow_model.h_out-
        CEC197_sensor.flow_model.h_in) = CEC197_sensor.flow_model.W;
      CEC197_sensor.flow_model.h_out-CEC197_sensor.flow_model.h_in = 
        CEC197_sensor.flow_model.DH;
      CEC197_sensor.flow_model.T_out-CEC197_sensor.flow_model.T_in = 
        CEC197_sensor.flow_model.DT;
      CEC197_sensor.flow_model.C_in.Q+CEC197_sensor.flow_model.C_out.Q = 0;
      CEC197_sensor.flow_model.C_out.Xi_outflow = inStream(CEC197_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC197_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC197_sensor.flow_model.P = CEC197_sensor.flow_model.P_in;
      CEC197_sensor.flow_model.h = CEC197_sensor.flow_model.h_in;
      CEC197_sensor.flow_model.T = CEC197_sensor.flow_model.T_in;
      CEC197_sensor.flow_model.DP = 0;
      CEC197_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC197_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC197_sensor.faulty_flow_rate) then 
        CEC197_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC197_sensor.P = CEC197_sensor.C_in.P;
      CEC197_sensor.Q = CEC197_sensor.C_in.Q+CEC197_sensor.mass_flow_rate_bias;
      CEC197_sensor.Xi = inStream(CEC197_sensor.C_in.Xi_outflow);
      CEC197_sensor.h = inStream(CEC197_sensor.C_in.h_outflow);
      CEC197_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.P, CEC197_sensor.h, CEC197_sensor.Xi, 0, 0);
      assert(CEC197_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      CEC197_sensor.Qv = CEC197_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.state);
      CEC197_sensor.Q_lm = CEC197_sensor.Qv*60000;
      CEC197_sensor.Q_th = CEC197_sensor.Q*3.6;
      CEC197_sensor.Q_lbs = CEC197_sensor.Q*0.453592428;
      CEC197_sensor.Q_Mlbh = CEC197_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    CEC197_sensor.flow_model.C_in.P = CEC197_sensor.C_in.P;
    CEC197_sensor.C_in.Q-CEC197_sensor.flow_model.C_in.Q = 0.0;
    CEC197_sensor.flow_model.C_out.P = CEC197_sensor.C_out.P;
    CEC197_sensor.C_out.Q-CEC197_sensor.flow_model.C_out.Q = 0.0;

  // Component V422_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V422_Flow_sensor.flow_model.h_in = inStream(V422_Flow_sensor.flow_model.C_in.h_outflow);
      V422_Flow_sensor.flow_model.h_out = V422_Flow_sensor.flow_model.C_out.h_outflow;
      V422_Flow_sensor.flow_model.Q = V422_Flow_sensor.flow_model.C_in.Q;
      V422_Flow_sensor.flow_model.P_in = V422_Flow_sensor.flow_model.C_in.P;
      V422_Flow_sensor.flow_model.P_out = V422_Flow_sensor.flow_model.C_out.P;
      V422_Flow_sensor.flow_model.Xi = inStream(V422_Flow_sensor.flow_model.C_in.Xi_outflow);
      V422_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      V422_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      V422_Flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_Flow_sensor.flow_model.P_in, V422_Flow_sensor.flow_model.h_in, 
        V422_Flow_sensor.flow_model.Xi, 0, 0);
      V422_Flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_Flow_sensor.flow_model.P_out, V422_Flow_sensor.flow_model.h_out, 
        V422_Flow_sensor.flow_model.Xi, 0, 0);
      V422_Flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        V422_Flow_sensor.flow_model.state_in);
      V422_Flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        V422_Flow_sensor.flow_model.state_out);
      V422_Flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        V422_Flow_sensor.flow_model.state_in);
      V422_Flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        V422_Flow_sensor.flow_model.state_out);
      V422_Flow_sensor.flow_model.rho = (V422_Flow_sensor.flow_model.rho_in+
        V422_Flow_sensor.flow_model.rho_out)/2;
      V422_Flow_sensor.flow_model.Qv_in = V422_Flow_sensor.flow_model.Q/
        V422_Flow_sensor.flow_model.rho_in;
      V422_Flow_sensor.flow_model.Qv_out =  -V422_Flow_sensor.flow_model.Q/
        V422_Flow_sensor.flow_model.rho_out;
      V422_Flow_sensor.flow_model.Qv = (V422_Flow_sensor.flow_model.Qv_in-
        V422_Flow_sensor.flow_model.Qv_out)/2;
      V422_Flow_sensor.flow_model.P_out-V422_Flow_sensor.flow_model.P_in = 
        V422_Flow_sensor.flow_model.DP;
      V422_Flow_sensor.flow_model.Q*(V422_Flow_sensor.flow_model.h_out-
        V422_Flow_sensor.flow_model.h_in) = V422_Flow_sensor.flow_model.W;
      V422_Flow_sensor.flow_model.h_out-V422_Flow_sensor.flow_model.h_in = 
        V422_Flow_sensor.flow_model.DH;
      V422_Flow_sensor.flow_model.T_out-V422_Flow_sensor.flow_model.T_in = 
        V422_Flow_sensor.flow_model.DT;
      V422_Flow_sensor.flow_model.C_in.Q+V422_Flow_sensor.flow_model.C_out.Q = 0;
      V422_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(V422_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(V422_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      V422_Flow_sensor.flow_model.P = V422_Flow_sensor.flow_model.P_in;
      V422_Flow_sensor.flow_model.h = V422_Flow_sensor.flow_model.h_in;
      V422_Flow_sensor.flow_model.T = V422_Flow_sensor.flow_model.T_in;
      V422_Flow_sensor.flow_model.DP = 0;
      V422_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component V422_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not V422_Flow_sensor.faulty_flow_rate) then 
        V422_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      V422_Flow_sensor.P = V422_Flow_sensor.C_in.P;
      V422_Flow_sensor.Q = V422_Flow_sensor.C_in.Q+V422_Flow_sensor.mass_flow_rate_bias;
      V422_Flow_sensor.Xi = inStream(V422_Flow_sensor.C_in.Xi_outflow);
      V422_Flow_sensor.h = inStream(V422_Flow_sensor.C_in.h_outflow);
      V422_Flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_Flow_sensor.P, V422_Flow_sensor.h, V422_Flow_sensor.Xi, 0, 0);
      assert(V422_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      V422_Flow_sensor.Qv = V422_Flow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        V422_Flow_sensor.state);
      V422_Flow_sensor.Q_lm = V422_Flow_sensor.Qv*60000;
      V422_Flow_sensor.Q_th = V422_Flow_sensor.Q*3.6;
      V422_Flow_sensor.Q_lbs = V422_Flow_sensor.Q*0.453592428;
      V422_Flow_sensor.Q_Mlbh = V422_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    V422_Flow_sensor.flow_model.C_in.P = V422_Flow_sensor.C_in.P;
    V422_Flow_sensor.C_in.Q-V422_Flow_sensor.flow_model.C_in.Q = 0.0;
    V422_Flow_sensor.flow_model.C_out.P = V422_Flow_sensor.C_out.P;
    V422_Flow_sensor.C_out.Q-V422_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component TempCond_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      TempCond_sensor.flow_model.h_in = inStream(TempCond_sensor.flow_model.C_in.h_outflow);
      TempCond_sensor.flow_model.h_out = TempCond_sensor.flow_model.C_out.h_outflow;
      TempCond_sensor.flow_model.Q = TempCond_sensor.flow_model.C_in.Q;
      TempCond_sensor.flow_model.P_in = TempCond_sensor.flow_model.C_in.P;
      TempCond_sensor.flow_model.P_out = TempCond_sensor.flow_model.C_out.P;
      TempCond_sensor.flow_model.Xi = inStream(TempCond_sensor.flow_model.C_in.Xi_outflow);
      TempCond_sensor.flow_model.C_in.h_outflow = 1000000.0;
      TempCond_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      TempCond_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (TempCond_sensor.flow_model.P_in, TempCond_sensor.flow_model.h_in, 
        TempCond_sensor.flow_model.Xi, 0, 0);
      TempCond_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (TempCond_sensor.flow_model.P_out, TempCond_sensor.flow_model.h_out, 
        TempCond_sensor.flow_model.Xi, 0, 0);
      TempCond_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        TempCond_sensor.flow_model.state_in);
      TempCond_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        TempCond_sensor.flow_model.state_out);
      TempCond_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        TempCond_sensor.flow_model.state_in);
      TempCond_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        TempCond_sensor.flow_model.state_out);
      TempCond_sensor.flow_model.rho = (TempCond_sensor.flow_model.rho_in+
        TempCond_sensor.flow_model.rho_out)/2;
      TempCond_sensor.flow_model.Qv_in = TempCond_sensor.flow_model.Q/
        TempCond_sensor.flow_model.rho_in;
      TempCond_sensor.flow_model.Qv_out =  -TempCond_sensor.flow_model.Q/
        TempCond_sensor.flow_model.rho_out;
      TempCond_sensor.flow_model.Qv = (TempCond_sensor.flow_model.Qv_in-
        TempCond_sensor.flow_model.Qv_out)/2;
      TempCond_sensor.flow_model.P_out-TempCond_sensor.flow_model.P_in = 
        TempCond_sensor.flow_model.DP;
      TempCond_sensor.flow_model.Q*(TempCond_sensor.flow_model.h_out-
        TempCond_sensor.flow_model.h_in) = TempCond_sensor.flow_model.W;
      TempCond_sensor.flow_model.h_out-TempCond_sensor.flow_model.h_in = 
        TempCond_sensor.flow_model.DH;
      TempCond_sensor.flow_model.T_out-TempCond_sensor.flow_model.T_in = 
        TempCond_sensor.flow_model.DT;
      TempCond_sensor.flow_model.C_in.Q+TempCond_sensor.flow_model.C_out.Q = 0;
      TempCond_sensor.flow_model.C_out.Xi_outflow = inStream(TempCond_sensor.flow_model.C_in.Xi_outflow);
      assert(TempCond_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      TempCond_sensor.flow_model.P = TempCond_sensor.flow_model.P_in;
      TempCond_sensor.flow_model.h = TempCond_sensor.flow_model.h_in;
      TempCond_sensor.flow_model.T = TempCond_sensor.flow_model.T_in;
      TempCond_sensor.flow_model.DP = 0;
      TempCond_sensor.flow_model.DH = 0;
    // end of extends 

  // Component TempCond_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not TempCond_sensor.faulty_flow_rate) then 
        TempCond_sensor.mass_flow_rate_bias = 0;
      end if;
      TempCond_sensor.P = TempCond_sensor.C_in.P;
      TempCond_sensor.Q = TempCond_sensor.C_in.Q+TempCond_sensor.mass_flow_rate_bias;
      TempCond_sensor.Xi = inStream(TempCond_sensor.C_in.Xi_outflow);
      TempCond_sensor.h = inStream(TempCond_sensor.C_in.h_outflow);
      TempCond_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (TempCond_sensor.P, TempCond_sensor.h, TempCond_sensor.Xi, 0, 0);
      assert(TempCond_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      TempCond_sensor.T = TempCond_sensor.flow_model.T;
      TempCond_sensor.T_degC+273.15 = TempCond_sensor.T;
      TempCond_sensor.T_degF = TempCond_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    TempCond_sensor.flow_model.C_in.P = TempCond_sensor.C_in.P;
    TempCond_sensor.C_in.Q-TempCond_sensor.flow_model.C_in.Q = 0.0;
    TempCond_sensor.flow_model.C_out.P = TempCond_sensor.C_out.P;
    TempCond_sensor.C_out.Q-TempCond_sensor.flow_model.C_out.Q = 0.0;

  // Component AirOutletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirOutletTemp_sensor.flow_model.h_in = inStream(AirOutletTemp_sensor.flow_model.C_in.h_outflow);
      AirOutletTemp_sensor.flow_model.h_out = AirOutletTemp_sensor.flow_model.C_out.h_outflow;
      AirOutletTemp_sensor.flow_model.Q = AirOutletTemp_sensor.flow_model.C_in.Q;
      AirOutletTemp_sensor.flow_model.P_in = AirOutletTemp_sensor.flow_model.C_in.P;
      AirOutletTemp_sensor.flow_model.P_out = AirOutletTemp_sensor.flow_model.C_out.P;
      AirOutletTemp_sensor.flow_model.Xi = inStream(AirOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      AirOutletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirOutletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirOutletTemp_sensor.flow_model.state_in = setState_phX_Unique10(
        AirOutletTemp_sensor.flow_model.P_in, AirOutletTemp_sensor.flow_model.h_in,
         AirOutletTemp_sensor.flow_model.Xi);
      AirOutletTemp_sensor.flow_model.state_out = setState_phX_Unique10(
        AirOutletTemp_sensor.flow_model.P_out, AirOutletTemp_sensor.flow_model.h_out,
         AirOutletTemp_sensor.flow_model.Xi);
      AirOutletTemp_sensor.flow_model.T_in = temperature_Unique28(
        AirOutletTemp_sensor.flow_model.state_in);
      AirOutletTemp_sensor.flow_model.T_out = temperature_Unique28(
        AirOutletTemp_sensor.flow_model.state_out);
      AirOutletTemp_sensor.flow_model.rho_in = density_Unique29(
        AirOutletTemp_sensor.flow_model.state_in);
      AirOutletTemp_sensor.flow_model.rho_out = density_Unique29(
        AirOutletTemp_sensor.flow_model.state_out);
      AirOutletTemp_sensor.flow_model.rho = (AirOutletTemp_sensor.flow_model.rho_in
        +AirOutletTemp_sensor.flow_model.rho_out)/2;
      AirOutletTemp_sensor.flow_model.Qv_in = AirOutletTemp_sensor.flow_model.Q/
        AirOutletTemp_sensor.flow_model.rho_in;
      AirOutletTemp_sensor.flow_model.Qv_out =  -AirOutletTemp_sensor.flow_model.Q
        /AirOutletTemp_sensor.flow_model.rho_out;
      AirOutletTemp_sensor.flow_model.Qv = (AirOutletTemp_sensor.flow_model.Qv_in
        -AirOutletTemp_sensor.flow_model.Qv_out)/2;
      AirOutletTemp_sensor.flow_model.P_out-AirOutletTemp_sensor.flow_model.P_in
         = AirOutletTemp_sensor.flow_model.DP;
      AirOutletTemp_sensor.flow_model.Q*(AirOutletTemp_sensor.flow_model.h_out-
        AirOutletTemp_sensor.flow_model.h_in) = AirOutletTemp_sensor.flow_model.W;
      AirOutletTemp_sensor.flow_model.h_out-AirOutletTemp_sensor.flow_model.h_in
         = AirOutletTemp_sensor.flow_model.DH;
      AirOutletTemp_sensor.flow_model.T_out-AirOutletTemp_sensor.flow_model.T_in
         = AirOutletTemp_sensor.flow_model.DT;
      AirOutletTemp_sensor.flow_model.C_in.Q+AirOutletTemp_sensor.flow_model.C_out.Q
         = 0;
      AirOutletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(AirOutletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirOutletTemp_sensor.flow_model.P = AirOutletTemp_sensor.flow_model.P_in;
      AirOutletTemp_sensor.flow_model.h = AirOutletTemp_sensor.flow_model.h_in;
      AirOutletTemp_sensor.flow_model.T = AirOutletTemp_sensor.flow_model.T_in;
      AirOutletTemp_sensor.flow_model.DP = 0;
      AirOutletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirOutletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirOutletTemp_sensor.faulty_flow_rate) then 
        AirOutletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      AirOutletTemp_sensor.P = AirOutletTemp_sensor.C_in.P;
      AirOutletTemp_sensor.Q = AirOutletTemp_sensor.C_in.Q+AirOutletTemp_sensor.mass_flow_rate_bias;
      AirOutletTemp_sensor.Xi = inStream(AirOutletTemp_sensor.C_in.Xi_outflow);
      AirOutletTemp_sensor.h = inStream(AirOutletTemp_sensor.C_in.h_outflow);
      AirOutletTemp_sensor.state = setState_phX_Unique10(AirOutletTemp_sensor.P,
         AirOutletTemp_sensor.h, AirOutletTemp_sensor.Xi);
      assert(AirOutletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      AirOutletTemp_sensor.T = AirOutletTemp_sensor.flow_model.T;
      AirOutletTemp_sensor.T_degC+273.15 = AirOutletTemp_sensor.T;
      AirOutletTemp_sensor.T_degF = AirOutletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    AirOutletTemp_sensor.flow_model.C_in.P = AirOutletTemp_sensor.C_in.P;
    AirOutletTemp_sensor.C_in.Q-AirOutletTemp_sensor.flow_model.C_in.Q = 0.0;
    AirOutletTemp_sensor.flow_model.C_out.P = AirOutletTemp_sensor.C_out.P;
    AirOutletTemp_sensor.C_out.Q-AirOutletTemp_sensor.flow_model.C_out.Q = 0.0;

  // Component pressureCut
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.PressureCut
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      pressureCut.h_in = inStream(pressureCut.C_in.h_outflow);
      pressureCut.h_out = pressureCut.C_out.h_outflow;
      pressureCut.Q = pressureCut.C_in.Q;
      pressureCut.P_in = pressureCut.C_in.P;
      pressureCut.P_out = pressureCut.C_out.P;
      pressureCut.Xi = inStream(pressureCut.C_in.Xi_outflow);
      pressureCut.C_in.h_outflow = 1000000.0;
      pressureCut.C_in.Xi_outflow = zeros(0);
      pressureCut.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (pressureCut.P_in, pressureCut.h_in, pressureCut.Xi, 0, 0);
      pressureCut.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (pressureCut.P_out, pressureCut.h_out, pressureCut.Xi, 0, 0);
      pressureCut.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        pressureCut.state_in);
      pressureCut.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        pressureCut.state_out);
      pressureCut.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        pressureCut.state_in);
      pressureCut.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        pressureCut.state_out);
      pressureCut.rho = (pressureCut.rho_in+pressureCut.rho_out)/2;
      pressureCut.Qv_in = pressureCut.Q/pressureCut.rho_in;
      pressureCut.Qv_out =  -pressureCut.Q/pressureCut.rho_out;
      pressureCut.Qv = (pressureCut.Qv_in-pressureCut.Qv_out)/2;
      pressureCut.P_out-pressureCut.P_in = pressureCut.DP;
      pressureCut.Q*(pressureCut.h_out-pressureCut.h_in) = pressureCut.W;
      pressureCut.h_out-pressureCut.h_in = pressureCut.DH;
      pressureCut.T_out-pressureCut.T_in = pressureCut.DT;
      pressureCut.C_in.Q+pressureCut.C_out.Q = 0;
      pressureCut.C_out.Xi_outflow = inStream(pressureCut.C_in.Xi_outflow);
      assert(pressureCut.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      pressureCut.h = pressureCut.h_in;
      pressureCut.DH = 0;
    // extends MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    equation
      pressureCut.DP = pressureCut.DP_input;
    // end of extends 

  // Component CoolingTower_bypass.flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower_bypass.flow_sensor.flow_model.h_in = inStream(
        CoolingTower_bypass.flow_sensor.flow_model.C_in.h_outflow);
      CoolingTower_bypass.flow_sensor.flow_model.h_out = CoolingTower_bypass.flow_sensor.flow_model.C_out.h_outflow;
      CoolingTower_bypass.flow_sensor.flow_model.Q = CoolingTower_bypass.flow_sensor.flow_model.C_in.Q;
      CoolingTower_bypass.flow_sensor.flow_model.P_in = CoolingTower_bypass.flow_sensor.flow_model.C_in.P;
      CoolingTower_bypass.flow_sensor.flow_model.P_out = CoolingTower_bypass.flow_sensor.flow_model.C_out.P;
      CoolingTower_bypass.flow_sensor.flow_model.Xi = inStream(CoolingTower_bypass.flow_sensor.flow_model.C_in.Xi_outflow);
      CoolingTower_bypass.flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CoolingTower_bypass.flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CoolingTower_bypass.flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower_bypass.flow_sensor.flow_model.P_in, CoolingTower_bypass.flow_sensor.flow_model.h_in,
         CoolingTower_bypass.flow_sensor.flow_model.Xi, 0, 0);
      CoolingTower_bypass.flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower_bypass.flow_sensor.flow_model.P_out, CoolingTower_bypass.flow_sensor.flow_model.h_out,
         CoolingTower_bypass.flow_sensor.flow_model.Xi, 0, 0);
      CoolingTower_bypass.flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower_bypass.flow_sensor.flow_model.state_in);
      CoolingTower_bypass.flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower_bypass.flow_sensor.flow_model.state_out);
      CoolingTower_bypass.flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower_bypass.flow_sensor.flow_model.state_in);
      CoolingTower_bypass.flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower_bypass.flow_sensor.flow_model.state_out);
      CoolingTower_bypass.flow_sensor.flow_model.rho = (CoolingTower_bypass.flow_sensor.flow_model.rho_in
        +CoolingTower_bypass.flow_sensor.flow_model.rho_out)/2;
      CoolingTower_bypass.flow_sensor.flow_model.Qv_in = CoolingTower_bypass.flow_sensor.flow_model.Q
        /CoolingTower_bypass.flow_sensor.flow_model.rho_in;
      CoolingTower_bypass.flow_sensor.flow_model.Qv_out =  -CoolingTower_bypass.flow_sensor.flow_model.Q
        /CoolingTower_bypass.flow_sensor.flow_model.rho_out;
      CoolingTower_bypass.flow_sensor.flow_model.Qv = (CoolingTower_bypass.flow_sensor.flow_model.Qv_in
        -CoolingTower_bypass.flow_sensor.flow_model.Qv_out)/2;
      CoolingTower_bypass.flow_sensor.flow_model.P_out-CoolingTower_bypass.flow_sensor.flow_model.P_in
         = CoolingTower_bypass.flow_sensor.flow_model.DP;
      CoolingTower_bypass.flow_sensor.flow_model.Q*(CoolingTower_bypass.flow_sensor.flow_model.h_out
        -CoolingTower_bypass.flow_sensor.flow_model.h_in) = CoolingTower_bypass.flow_sensor.flow_model.W;
      CoolingTower_bypass.flow_sensor.flow_model.h_out-CoolingTower_bypass.flow_sensor.flow_model.h_in
         = CoolingTower_bypass.flow_sensor.flow_model.DH;
      CoolingTower_bypass.flow_sensor.flow_model.T_out-CoolingTower_bypass.flow_sensor.flow_model.T_in
         = CoolingTower_bypass.flow_sensor.flow_model.DT;
      CoolingTower_bypass.flow_sensor.flow_model.C_in.Q+CoolingTower_bypass.flow_sensor.flow_model.C_out.Q
         = 0;
      CoolingTower_bypass.flow_sensor.flow_model.C_out.Xi_outflow = inStream(
        CoolingTower_bypass.flow_sensor.flow_model.C_in.Xi_outflow);
      assert(CoolingTower_bypass.flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower_bypass.flow_sensor.flow_model.P = CoolingTower_bypass.flow_sensor.flow_model.P_in;
      CoolingTower_bypass.flow_sensor.flow_model.h = CoolingTower_bypass.flow_sensor.flow_model.h_in;
      CoolingTower_bypass.flow_sensor.flow_model.T = CoolingTower_bypass.flow_sensor.flow_model.T_in;
      CoolingTower_bypass.flow_sensor.flow_model.DP = 0;
      CoolingTower_bypass.flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CoolingTower_bypass.flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CoolingTower_bypass.flow_sensor.faulty_flow_rate) then 
        CoolingTower_bypass.flow_sensor.mass_flow_rate_bias = 0;
      end if;
      CoolingTower_bypass.flow_sensor.P = CoolingTower_bypass.flow_sensor.C_in.P;
      CoolingTower_bypass.flow_sensor.Q = CoolingTower_bypass.flow_sensor.C_in.Q
        +CoolingTower_bypass.flow_sensor.mass_flow_rate_bias;
      CoolingTower_bypass.flow_sensor.Xi = inStream(CoolingTower_bypass.flow_sensor.C_in.Xi_outflow);
      CoolingTower_bypass.flow_sensor.h = inStream(CoolingTower_bypass.flow_sensor.C_in.h_outflow);
      CoolingTower_bypass.flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower_bypass.flow_sensor.P, CoolingTower_bypass.flow_sensor.h, 
        CoolingTower_bypass.flow_sensor.Xi, 0, 0);
      assert(CoolingTower_bypass.flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      CoolingTower_bypass.flow_sensor.Qv = CoolingTower_bypass.flow_sensor.Q/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower_bypass.flow_sensor.state);
      CoolingTower_bypass.flow_sensor.Q_lm = CoolingTower_bypass.flow_sensor.Qv*60000;
      CoolingTower_bypass.flow_sensor.Q_th = CoolingTower_bypass.flow_sensor.Q*
        3.6;
      CoolingTower_bypass.flow_sensor.Q_lbs = CoolingTower_bypass.flow_sensor.Q*
        0.453592428;
      CoolingTower_bypass.flow_sensor.Q_Mlbh = CoolingTower_bypass.flow_sensor.Q
        *0.0079366414387;
    // end of extends 
  equation
    CoolingTower_bypass.flow_sensor.flow_model.C_in.P = CoolingTower_bypass.flow_sensor.C_in.P;
    CoolingTower_bypass.flow_sensor.C_in.Q-CoolingTower_bypass.flow_sensor.flow_model.C_in.Q
       = 0.0;
    CoolingTower_bypass.flow_sensor.flow_model.C_out.P = CoolingTower_bypass.flow_sensor.C_out.P;
    CoolingTower_bypass.flow_sensor.C_out.Q-CoolingTower_bypass.flow_sensor.flow_model.C_out.Q
       = 0.0;

  // Component CoolingTower_bypass.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower_bypass.flow_model.h_in = inStream(CoolingTower_bypass.flow_model.C_in.h_outflow);
      CoolingTower_bypass.flow_model.h_out = CoolingTower_bypass.flow_model.C_out.h_outflow;
      CoolingTower_bypass.flow_model.Q = CoolingTower_bypass.flow_model.C_in.Q;
      CoolingTower_bypass.flow_model.P_in = CoolingTower_bypass.flow_model.C_in.P;
      CoolingTower_bypass.flow_model.P_out = CoolingTower_bypass.flow_model.C_out.P;
      CoolingTower_bypass.flow_model.Xi = inStream(CoolingTower_bypass.flow_model.C_in.Xi_outflow);
      CoolingTower_bypass.flow_model.C_in.h_outflow = 1000000.0;
      CoolingTower_bypass.flow_model.C_in.Xi_outflow = zeros(0);
      CoolingTower_bypass.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower_bypass.flow_model.P_in, CoolingTower_bypass.flow_model.h_in,
         CoolingTower_bypass.flow_model.Xi, 0, 0);
      CoolingTower_bypass.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower_bypass.flow_model.P_out, CoolingTower_bypass.flow_model.h_out,
         CoolingTower_bypass.flow_model.Xi, 0, 0);
      CoolingTower_bypass.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower_bypass.flow_model.state_in);
      CoolingTower_bypass.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower_bypass.flow_model.state_out);
      CoolingTower_bypass.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower_bypass.flow_model.state_in);
      CoolingTower_bypass.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower_bypass.flow_model.state_out);
      CoolingTower_bypass.flow_model.rho = (CoolingTower_bypass.flow_model.rho_in
        +CoolingTower_bypass.flow_model.rho_out)/2;
      CoolingTower_bypass.flow_model.Qv_in = CoolingTower_bypass.flow_model.Q/
        CoolingTower_bypass.flow_model.rho_in;
      CoolingTower_bypass.flow_model.Qv_out =  -CoolingTower_bypass.flow_model.Q
        /CoolingTower_bypass.flow_model.rho_out;
      CoolingTower_bypass.flow_model.Qv = (CoolingTower_bypass.flow_model.Qv_in-
        CoolingTower_bypass.flow_model.Qv_out)/2;
      CoolingTower_bypass.flow_model.P_out-CoolingTower_bypass.flow_model.P_in
         = CoolingTower_bypass.flow_model.DP;
      CoolingTower_bypass.flow_model.Q*(CoolingTower_bypass.flow_model.h_out-
        CoolingTower_bypass.flow_model.h_in) = CoolingTower_bypass.flow_model.W;
      CoolingTower_bypass.flow_model.h_out-CoolingTower_bypass.flow_model.h_in
         = CoolingTower_bypass.flow_model.DH;
      CoolingTower_bypass.flow_model.T_out-CoolingTower_bypass.flow_model.T_in
         = CoolingTower_bypass.flow_model.DT;
      CoolingTower_bypass.flow_model.C_in.Q+CoolingTower_bypass.flow_model.C_out.Q
         = 0;
      CoolingTower_bypass.flow_model.C_out.Xi_outflow = inStream(
        CoolingTower_bypass.flow_model.C_in.Xi_outflow);
      assert(CoolingTower_bypass.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      CoolingTower_bypass.flow_model.h = CoolingTower_bypass.flow_model.h_in;
      CoolingTower_bypass.flow_model.DH = 0;
    // end of extends 
  equation
    CoolingTower_bypass.flow_model.DP = CoolingTower_bypass.flow_model.DP_input;

  // Component CoolingTower_bypass
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.Leak
    // extends MetroscopeModelingLibrary.Partial.Pipes.Leak
    equation
      CoolingTower_bypass.Q = CoolingTower_bypass.flow_sensor.Q;
      CoolingTower_bypass.Q_th = CoolingTower_bypass.flow_sensor.Q_th;
      CoolingTower_bypass.Q_lbs = CoolingTower_bypass.flow_sensor.Q_lbs;
      CoolingTower_bypass.Q_Mlbh = CoolingTower_bypass.flow_sensor.Q_Mlbh;
      CoolingTower_bypass.flow_model.DP = CoolingTower_bypass.DP_input;
    // end of extends 
  equation
    CoolingTower_bypass.flow_sensor.C_in.P = CoolingTower_bypass.C_in.P;
    CoolingTower_bypass.C_in.Q-CoolingTower_bypass.flow_sensor.C_in.Q = 0.0;
    CoolingTower_bypass.flow_model.C_out.P = CoolingTower_bypass.C_out.P;
    CoolingTower_bypass.C_out.Q-CoolingTower_bypass.flow_model.C_out.Q = 0.0;
    CoolingTower_bypass.flow_sensor.C_out.P = CoolingTower_bypass.flow_model.C_in.P;
    CoolingTower_bypass.flow_model.C_in.Q+CoolingTower_bypass.flow_sensor.C_out.Q
       = 0.0;

  // This model
  // class TIH3_CoolingLoop_Merkel.TIH_CoolingLoop_faulty_Merkel
    // extends TIH3_CoolingLoop_Merkel.TIH_CoolingLoop_Dir5_Merkel
    equation
      hd = 0.007647845894098282;
      if ( not faulty) then 
        Pump_Qv_decrease = 0;
      end if;
      Hotside_Temp_sensor.T_degC = Hotside_Temp;
      VCT178_sensor.P_mbar = PCOND_178;
      CEC809_sensor.T_degC = CEC809;
      Press1_sensor.P_mbar = M1_PP_MOY;
      BIL176_AVG_sensor.T_degC = BIL176_AVG;
      AirInlet_Press_sensor.P_mbar = M1_PP_MOY;
      BIL177_AVG_sensor.relative_humidity = BIL177_AVG/100;
      Q_reject_press_sensor.P_mbar = M1_PP_MOY;
      Coldside_Flow_sensor.Q = Coldside_Flow;
      Hotside_Flow_sensor.Q = Hotside_Flow;
      TempCond_sensor.T_degC = TEECECM;
      LOA.S = 100;
      LOA.water_height = 1;
      LOA.C_incond = 0;
      LOA.P_offset = 0;
      LOA.Kfr_cold = 0;
      LOA.Kth = LOA_Kth;
      Hotside_Temp_sensor.T = Modelica.Media.Water.WaterIF97_ph.saturationTemperature_Unique9
        (VCT178_sensor.P);
      CEC502_sensor.T_degC = CEC502;
      Coldside_Press_sensor.P_barA = Coldside_Press;
      Pump.Qv = Pump_Qv*(1-Pump_Qv_decrease*100);
      Pump.VRotn = 4000;
      Pump.VRot = 4000;
      Pump.rm = 0.85;
      Pump.a1 = 0;
      Pump.a2 = 0;
      Pump.b1 = 0;
      Pump.b2 = 0;
      Pump.rh_min = 0.2;
      Pump.hn = Pump_hn;
      Pump.rh = Pump_rh;
      CEC507_sensor.T_degC = CEC507;
      CEC194_sensor.T_degC = CEC194;
      CoolingTower.Lfi = 15;
      CoolingTower.afi = 200;
      CoolingTower.Afr = 3000;
      CoolingTower.Cf = 0.07330325841903687;
      CoolingTower.eta_fan = 1;
      CoolingTower.W_fan = 40000;
      CoolingTower.hd = hd;
      CoolingTower.Qv_evap = Q_EVAPORATION;
      SP189_sensor.Opening_pc = V423_opening;
      CEC195_sensor.Opening_pc = CEC195;
      CEC191_sensor.Opening_pc = CEC191;
      V423_valve.Cv_max = Cvmax_V423;
      V422_valve.Cv_max = Cvmax_V422;
      V421_valve.Cv_max = Cvmax_V421;
      CEC197_sensor.Qv = CEC197;
      V422_Flow_sensor.Qv = max(0.1, ( -2E-05*CEC195_sensor.Opening_pc*
        CEC195_sensor.Opening_pc*CEC195_sensor.Opening_pc)+0.0071*
        CEC195_sensor.Opening_pc*CEC195_sensor.Opening_pc+0.0085*
        CEC195_sensor.Opening_pc-0.0432);
      Q_reject_sensor.Qv = Q_reject;
      Q_recirculation_sensor.Qv = Q_recirculation;
    // end of extends 
  equation
    CoolingTower.fouling = Fault_fouling+1E-05;
    Fault_Pump_Qv_decrease = Pump_Qv_decrease+1;
    CoolingTower_bypass.Q = Fault_CoolingTower_bypass_Q;
    BIL177_AVG_sensor.C_out.P = AirInlet_Flow_sensor.C_in.P;
    AirInlet_Flow_sensor.C_in.Q+BIL177_AVG_sensor.C_out.Q = 0.0;
    BIL176_AVG_sensor.C_in.P = AirInlet_Flow_sensor.C_out.P;
    AirInlet_Flow_sensor.C_out.Q+BIL176_AVG_sensor.C_in.Q = 0.0;
    BIL176_AVG_sensor.C_out.P = AirInlet_Press_sensor.C_in.P;
    AirInlet_Press_sensor.C_in.Q+BIL176_AVG_sensor.C_out.Q = 0.0;
    CoolingTower.C_cold_in.P = AirInlet_Press_sensor.C_out.P;
    AirInlet_Press_sensor.C_out.Q+CoolingTower.C_cold_in.Q = 0.0;
    CoolingTower.C_cold_out.P = AirOutletTemp_sensor.C_in.P;
    AirOutletTemp_sensor.C_in.Q+CoolingTower.C_cold_out.Q = 0.0;
    sink.C_in.P = AirOutletTemp_sensor.C_out.P;
    AirOutletTemp_sensor.C_out.Q+sink.C_in.Q = 0.0;
    V421_valve.Opening = CEC191_sensor.Opening;
    CoolingTower.C_hot_out.P = CEC194_sensor.C_in.P;
    CoolingTower_bypass.C_out.P = CEC194_sensor.C_in.P;
    CEC194_sensor.C_in.Q+CoolingTower.C_hot_out.Q+CoolingTower_bypass.C_out.Q = 
      0.0;
    flow_sensor.C_in.P = CEC194_sensor.C_out.P;
    CEC194_sensor.C_out.Q+flow_sensor.C_in.Q = 0.0;
    V422_valve.Opening = CEC195_sensor.Opening;
    V423_valve.C_out.P = CEC197_sensor.C_in.P;
    CEC197_sensor.C_in.Q+V423_valve.C_out.Q = 0.0;
    Q_reject_sensor.C_in.P = CEC197_sensor.C_out.P;
    pressureCut.C_out.P = CEC197_sensor.C_out.P;
    CEC197_sensor.C_out.Q+Q_reject_sensor.C_in.Q+pressureCut.C_out.Q = 0.0;
    Pump.C_out.P = CEC502_sensor.C_in.P;
    CEC502_sensor.C_in.Q+Pump.C_out.Q = 0.0;
    Coldside_Press_sensor.C_in.P = CEC502_sensor.C_out.P;
    CEC502_sensor.C_out.Q+Coldside_Press_sensor.C_in.Q = 0.0;
    LOA.C_cold_out.P = CEC507_sensor.C_in.P;
    CEC507_sensor.C_in.Q+LOA.C_cold_out.Q = 0.0;
    CoolingTower.C_hot_in.P = CEC507_sensor.C_out.P;
    CoolingTower_bypass.C_in.P = CEC507_sensor.C_out.P;
    CEC507_sensor.C_out.Q+CoolingTower.C_hot_in.Q+CoolingTower_bypass.C_in.Q = 
      0.0;
    Coldside_Flow_sensor.C_out.P = CEC809_sensor.C_in.P;
    CEC809_sensor.C_in.Q+Coldside_Flow_sensor.C_out.Q = 0.0;
    Press1_sensor.C_in.P = CEC809_sensor.C_out.P;
    CEC809_sensor.C_out.Q+Press1_sensor.C_in.Q = 0.0;
    source1.C_out.P = Coldside_Flow_sensor.C_in.P;
    Coldside_Flow_sensor.C_in.Q+source1.C_out.Q = 0.0;
    LOA.C_cold_in.P = Coldside_Press_sensor.C_out.P;
    Coldside_Press_sensor.C_out.Q+LOA.C_cold_in.Q = 0.0;
    turbine_outlet.C_out.P = Hotside_Flow_sensor.C_in.P;
    Hotside_Flow_sensor.C_in.Q+turbine_outlet.C_out.Q = 0.0;
    Hotside_Temp_sensor.C_in.P = Hotside_Flow_sensor.C_out.P;
    Hotside_Flow_sensor.C_out.Q+Hotside_Temp_sensor.C_in.Q = 0.0;
    VCT178_sensor.C_in.P = Hotside_Temp_sensor.C_out.P;
    Hotside_Temp_sensor.C_out.Q+VCT178_sensor.C_in.Q = 0.0;
    VCT178_sensor.C_out.P = LOA.C_hot_in.P;
    LOA.C_hot_in.Q+VCT178_sensor.C_out.Q = 0.0;
    TempCond_sensor.C_in.P = LOA.C_hot_out.P;
    LOA.C_hot_out.Q+TempCond_sensor.C_in.Q = 0.0;
    Pump.C_in.P = Press1_sensor.C_out.P;
    Q_recirculation_sensor.C_out.P = Press1_sensor.C_out.P;
    Press1_sensor.C_out.Q+Pump.C_in.Q+Q_recirculation_sensor.C_out.Q = 0.0;
    Pump.C_power.W+source.C_out.W = 0.0;
    V421_valve.C_out.P = Q_recirculation_sensor.C_in.P;
    Q_recirculation_sensor.C_in.Q+V421_valve.C_out.Q = 0.0;
    Q_reject_sensor.C_out.P = Q_reject_press_sensor.C_in.P;
    Q_reject_press_sensor.C_in.Q+Q_reject_sensor.C_out.Q = 0.0;
    cooling_sink.C_in.P = Q_reject_press_sensor.C_out.P;
    Q_reject_press_sensor.C_out.Q+cooling_sink.C_in.Q = 0.0;
    V423_valve.Opening = SP189_sensor.Opening;
    condensate_sink.C_in.P = TempCond_sensor.C_out.P;
    TempCond_sensor.C_out.Q+condensate_sink.C_in.Q = 0.0;
    V422_valve.C_in.P = V421_valve.C_in.P;
    V423_valve.C_in.P = V421_valve.C_in.P;
    flow_sensor.C_out.P = V421_valve.C_in.P;
    V421_valve.C_in.Q+V422_valve.C_in.Q+V423_valve.C_in.Q+flow_sensor.C_out.Q = 
      0.0;
    V422_valve.C_out.P = V422_Flow_sensor.C_in.P;
    V422_Flow_sensor.C_in.Q+V422_valve.C_out.Q = 0.0;
    pressureCut.C_in.P = V422_Flow_sensor.C_out.P;
    V422_Flow_sensor.C_out.Q+pressureCut.C_in.Q = 0.0;

end TIH_CoolingLoop_faulty_Merkel;
