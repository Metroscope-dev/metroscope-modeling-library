model TIH_CoolingLoop_Rev5_Poppe_Start_Values
  parameter Boolean show_causality = true "true to show causality, false to hide it";
  parameter Boolean display_output = true "Used to switch ON or OFF output display";
  input Real Hotside_Temp(start = 40) "deg_C";
  input Real VCT178(start = 0.055) "bar";
  input Real CEC180(start = 18.9) "deg_C";
  input Real Pressure1(start = 1) "bar";
  input Real AirInlet_Temp(start = 10) "deg_C";
  input Real AirInlet_Press(start = 1) "bar";
  input MetroscopeModelingLibrary.Utilities.Units.Fraction AirSource_relative_humidity
    (start = 0.5) "1";
  input Real Q_reject_press(start = 1) "bar";
  input Real CEC231(start = 19) "deg_C";
  input Real Coldside_Press(start = 3) "bar";
  input Real CEC235(start = 31) "deg_C";
  input Real CEC194(start = 18.9) "deg_C";
  input Real V423_opening(start = 0.35);
  input Real V422_opening(start = 0.15);
  input Real V421_opening(start = 0.15);
  parameter Real LOA_Kth = 1829028;
  parameter String LOA.QCp_max_side = "cold";
  constant Real LOA.R(unit = "J/(mol.K)") = 8.31446261815324 "ideal gas constant";
  parameter Boolean LOA.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_cold_0
     = 5000;
  parameter MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_hot_0
     = 1000;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.Psat_0 = 
    5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_cold_in_0 = 
    500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_cold_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.T_cold_in_0 = 288.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.T_cold_out_0 = 298.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_hot_in_0
     = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.T_hot_out_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_cold_in_0 = 50000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_cold_out_0 = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_hot_in_0 = 2000000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.h_liq_sat_0 = Modelica.Media.Water.WaterIF97_ph.bubbleEnthalpy_Unique7(
    Modelica.Media.Water.WaterIF97_ph.setSat_p_Unique8(LOA.Psat_0));
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.Tsat_0 = 
    Modelica.Media.Water.WaterIF97_ph.saturationTemperature_Unique9(LOA.Psat_0);
  constant MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_DP_0 = 9000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side_pipe.T_in_0 = LOA.cold_side_pipe.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side_pipe.T_out_0 = LOA.cold_side_pipe.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_in_0
     = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP_0 = LOA.cold_side_pipe.P_out_0-LOA.cold_side_pipe.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side_pipe.h_in_0 = LOA.cold_side_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side_pipe.h_out_0 = LOA.cold_side_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side_pipe.Q_0 = LOA.Q_cold_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side_pipe.T_0 = LOA.T_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side_pipe.h_0 = LOA.h_cold_in_0;
  parameter Boolean LOA.cold_side_pipe.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.hot_side.T_in_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.hot_side.T_out_0 = LOA.Tsat_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.hot_side.DP_0 = LOA.hot_side.P_out_0-LOA.hot_side.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.hot_side.h_in_0 = LOA.h_hot_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.hot_side.h_out_0 = LOA.h_liq_sat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.hot_side.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side.T_in_0 = LOA.T_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.cold_side.T_out_0 = LOA.T_cold_out_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_in_0
     = 400000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side.DP_0 = LOA.cold_side.P_out_0-LOA.cold_side.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side.h_in_0 = LOA.h_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.cold_side.h_out_0 = LOA.h_cold_out_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side.Q_0 = LOA.Q_cold_0 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.water_height_pipe.T_in_0 = LOA.water_height_pipe.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.water_height_pipe.T_out_0 = LOA.water_height_pipe.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_out_0
     = 14000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP_0 = LOA.water_height_pipe.P_out_0-LOA.water_height_pipe.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.water_height_pipe.h_in_0 = LOA.water_height_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.water_height_pipe.h_out_0 = LOA.water_height_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.water_height_pipe.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.water_height_pipe.T_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.water_height_pipe.h_0 = LOA.h_liq_sat_0;
  parameter Boolean LOA.water_height_pipe.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_in.T_in_0 = LOA.incondensables_in.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_in.T_out_0 = LOA.incondensables_in.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_in.DP_0 = LOA.incondensables_in.P_out_0-LOA.incondensables_in.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_in.h_in_0 = LOA.incondensables_in.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_in.h_out_0 = LOA.incondensables_in.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_in.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_in.T_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_in.h_0 = LOA.h_hot_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_out.T_in_0 = LOA.incondensables_out.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_out.T_out_0 = LOA.incondensables_out.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_out.DP_0 = LOA.incondensables_out.P_out_0-
    LOA.incondensables_out.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_out.h_in_0 = LOA.incondensables_out.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_out.h_out_0 = LOA.incondensables_out.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_out.Q_0 = LOA.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    LOA.incondensables_out.T_0 = LOA.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    LOA.incondensables_out.h_0 = LOA.h_liq_sat_0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.h_0 = 500000.0;
  parameter Boolean VCT178_sensor.faulty_flow_rate = false;
  parameter String VCT178_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String VCT178_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    VCT178_sensor.flow_model.T_in_0 = VCT178_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    VCT178_sensor.flow_model.T_out_0 = VCT178_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    VCT178_sensor.flow_model.DP_0 = VCT178_sensor.flow_model.P_out_0-
    VCT178_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.flow_model.h_in_0 = VCT178_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.flow_model.h_out_0 = VCT178_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    VCT178_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    VCT178_sensor.flow_model.h_0 = 500000.0;
  parameter String VCT178_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.h_0 = 500000.0;
  parameter Boolean Hotside_Temp_sensor.faulty_flow_rate = false;
  parameter String Hotside_Temp_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Hotside_Temp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.flow_model.T_in_0 = Hotside_Temp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.flow_model.T_out_0 = Hotside_Temp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Temp_sensor.flow_model.DP_0 = Hotside_Temp_sensor.flow_model.P_out_0
    -Hotside_Temp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.flow_model.h_in_0 = Hotside_Temp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.flow_model.h_out_0 = Hotside_Temp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Temp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Temp_sensor.T_0 = 300;
  parameter String Hotside_Temp_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.h_0 = 500000.0;
  parameter Boolean Hotside_Flow_sensor.faulty_flow_rate = Hotside_Flow_sensor.faulty;
  parameter String Hotside_Flow_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Hotside_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Flow_sensor.flow_model.T_in_0 = Hotside_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Flow_sensor.flow_model.T_out_0 = Hotside_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Flow_sensor.flow_model.DP_0 = Hotside_Flow_sensor.flow_model.P_out_0
    -Hotside_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.flow_model.h_in_0 = Hotside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.flow_model.h_out_0 = Hotside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Hotside_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Hotside_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Hotside_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean Hotside_Flow_sensor.faulty = false;
  parameter String Hotside_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.h_0 = 500000.0;
  parameter Boolean Coldside_Flow_sensor.faulty_flow_rate = Coldside_Flow_sensor.faulty;
  parameter String Coldside_Flow_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Coldside_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Flow_sensor.flow_model.T_in_0 = Coldside_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Flow_sensor.flow_model.T_out_0 = Coldside_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Flow_sensor.flow_model.DP_0 = Coldside_Flow_sensor.flow_model.P_out_0
    -Coldside_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.flow_model.h_in_0 = Coldside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.flow_model.h_out_0 = Coldside_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Coldside_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean Coldside_Flow_sensor.faulty = false;
  parameter String Coldside_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC231_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC231_sensor.h_0 = 500000.0;
  parameter Boolean CEC231_sensor.faulty_flow_rate = false;
  parameter String CEC231_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC231_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC231_sensor.flow_model.T_in_0 = CEC231_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC231_sensor.flow_model.T_out_0 = CEC231_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC231_sensor.flow_model.DP_0 = CEC231_sensor.flow_model.P_out_0-
    CEC231_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC231_sensor.flow_model.h_in_0 = CEC231_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC231_sensor.flow_model.h_out_0 = CEC231_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC231_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC231_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC231_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC231_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC231_sensor.T_0 = 300;
  parameter String CEC231_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.h_0 = 500000.0;
  parameter Boolean Coldside_Press_sensor.faulty_flow_rate = false;
  parameter String Coldside_Press_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Coldside_Press_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Press_sensor.flow_model.T_in_0 = Coldside_Press_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Press_sensor.flow_model.T_out_0 = Coldside_Press_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Press_sensor.flow_model.DP_0 = Coldside_Press_sensor.flow_model.P_out_0
    -Coldside_Press_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.flow_model.h_in_0 = Coldside_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.flow_model.h_out_0 = Coldside_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Coldside_Press_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Coldside_Press_sensor.flow_model.h_0 = 500000.0;
  parameter String Coldside_Press_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC235_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC235_sensor.h_0 = 500000.0;
  parameter Boolean CEC235_sensor.faulty_flow_rate = false;
  parameter String CEC235_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC235_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC235_sensor.flow_model.T_in_0 = CEC235_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC235_sensor.flow_model.T_out_0 = CEC235_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC235_sensor.flow_model.DP_0 = CEC235_sensor.flow_model.P_out_0-
    CEC235_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC235_sensor.flow_model.h_in_0 = CEC235_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC235_sensor.flow_model.h_out_0 = CEC235_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC235_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC235_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC235_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC235_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC235_sensor.T_0 = 300;
  parameter String CEC235_sensor.display_unit = "degC" "Specify the display unit";
  parameter Integer CoolingTower.N_step = 10;
  constant Real CoolingTower.gr(unit = "m/s2") = 9.80665;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_in_0 = CoolingTower.water_inlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_out_0 = CoolingTower.water_inlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_inlet_flow.DP_0 = CoolingTower.water_inlet_flow.P_out_0-
    CoolingTower.water_inlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_in_0 = CoolingTower.water_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_out_0 = CoolingTower.water_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_in_0 = CoolingTower.water_outlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_out_0 = CoolingTower.water_outlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_outlet_flow.DP_0 = CoolingTower.water_outlet_flow.P_out_0
    -CoolingTower.water_outlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_in_0 = CoolingTower.water_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_out_0 = CoolingTower.water_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_in_0 = CoolingTower.air_inlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_out_0 = CoolingTower.air_inlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_inlet_flow.DP_0 = CoolingTower.air_inlet_flow.P_out_0-
    CoolingTower.air_inlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_in_0 = CoolingTower.air_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_out_0 = CoolingTower.air_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_0 = 500000.0;
  parameter Real CoolingTower.air_inlet.relative_humidity_0(min = 0.0, max = 1.0)
     = 0.1;
  parameter Real CoolingTower.air_outlet.relative_humidity_0(min = 0.0, max = 
    1.0) = 0.1;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_in_0 = CoolingTower.air_outlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_out_0 = CoolingTower.air_outlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_outlet_flow.DP_0 = CoolingTower.air_outlet_flow.P_out_0-
    CoolingTower.air_outlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_in_0 = CoolingTower.air_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_out_0 = CoolingTower.air_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.h_0 = 500000.0;
  parameter Boolean CEC194_sensor.faulty_flow_rate = false;
  parameter String CEC194_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC194_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.flow_model.T_in_0 = CEC194_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.flow_model.T_out_0 = CEC194_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC194_sensor.flow_model.DP_0 = CEC194_sensor.flow_model.P_out_0-
    CEC194_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.flow_model.h_in_0 = CEC194_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.flow_model.h_out_0 = CEC194_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC194_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC194_sensor.T_0 = 300;
  parameter String CEC194_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.h_0 = 500000.0;
  parameter Boolean CEC197_sensor.faulty_flow_rate = CEC197_sensor.faulty;
  parameter String CEC197_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC197_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_in_0 = CEC197_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_out_0 = CEC197_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC197_sensor.flow_model.DP_0 = CEC197_sensor.flow_model.P_out_0-
    CEC197_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_in_0 = CEC197_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_out_0 = CEC197_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    CEC197_sensor.Qv_0 = 0.1;
  parameter Boolean CEC197_sensor.faulty = false;
  parameter String CEC197_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Real AirSource.relative_humidity_0(min = 0.0, max = 1.0) = 0.1;
  parameter Real sink.relative_humidity_0(min = 0.0, max = 1.0) = 0.1;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.h_0 = 500000.0;
  parameter Boolean AirInlet_Flow_sensor.faulty_flow_rate = AirInlet_Flow_sensor.faulty;
  parameter String AirInlet_Flow_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String AirInlet_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Flow_sensor.flow_model.T_in_0 = AirInlet_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Flow_sensor.flow_model.T_out_0 = AirInlet_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Flow_sensor.flow_model.DP_0 = AirInlet_Flow_sensor.flow_model.P_out_0
    -AirInlet_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.flow_model.h_in_0 = AirInlet_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.flow_model.h_out_0 = AirInlet_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    AirInlet_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean AirInlet_Flow_sensor.faulty = false;
  parameter String AirInlet_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Temp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Temp_sensor.h_0 = 500000.0;
  parameter Boolean AirInlet_Temp_sensor.faulty_flow_rate = false;
  parameter String AirInlet_Temp_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String AirInlet_Temp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Temp_sensor.flow_model.T_in_0 = AirInlet_Temp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Temp_sensor.flow_model.T_out_0 = AirInlet_Temp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Temp_sensor.flow_model.DP_0 = AirInlet_Temp_sensor.flow_model.P_out_0
    -AirInlet_Temp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Temp_sensor.flow_model.h_in_0 = AirInlet_Temp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Temp_sensor.flow_model.h_out_0 = AirInlet_Temp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Temp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Temp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Temp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Temp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Temp_sensor.T_0 = 300;
  parameter String AirInlet_Temp_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.h_0 = 500000.0;
  parameter Boolean AirInlet_Press_sensor.faulty_flow_rate = false;
  parameter String AirInlet_Press_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String AirInlet_Press_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Press_sensor.flow_model.T_in_0 = AirInlet_Press_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Press_sensor.flow_model.T_out_0 = AirInlet_Press_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Press_sensor.flow_model.DP_0 = AirInlet_Press_sensor.flow_model.P_out_0
    -AirInlet_Press_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.flow_model.h_in_0 = AirInlet_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.flow_model.h_out_0 = AirInlet_Press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInlet_Press_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInlet_Press_sensor.flow_model.h_0 = 500000.0;
  parameter String AirInlet_Press_sensor.display_unit = "barA" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V423_valve.T_in_0 = V423_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V423_valve.T_out_0 = V423_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V423_valve.DP_0 = V423_valve.P_out_0-V423_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_in_0 = V423_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_out_0 = V423_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V423_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_valve.T_in_0 = V422_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_valve.T_out_0 = V422_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V422_valve.DP_0 = V422_valve.P_out_0-V422_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_in_0 = V422_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_out_0 = V422_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage V423_opening_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String V423_opening_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String V423_opening_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage V422_opening_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String V422_opening_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String V422_opening_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.h_0 = 500000.0;
  parameter Boolean Q_reject_sensor.faulty_flow_rate = Q_reject_sensor.faulty;
  parameter String Q_reject_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Q_reject_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_sensor.flow_model.T_in_0 = Q_reject_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_sensor.flow_model.T_out_0 = Q_reject_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_sensor.flow_model.DP_0 = Q_reject_sensor.flow_model.P_out_0-
    Q_reject_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.flow_model.h_in_0 = Q_reject_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.flow_model.h_out_0 = Q_reject_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Q_reject_sensor.Qv_0 = 0.1;
  parameter Boolean Q_reject_sensor.faulty = false;
  parameter String Q_reject_sensor.display_unit = "kg/s" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.h_0 = 500000.0;
  parameter Boolean Q_reject_press_sensor.faulty_flow_rate = false;
  parameter String Q_reject_press_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Q_reject_press_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_in_0 = Q_reject_press_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_out_0 = Q_reject_press_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_press_sensor.flow_model.DP_0 = Q_reject_press_sensor.flow_model.P_out_0
    -Q_reject_press_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_in_0 = Q_reject_press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_out_0 = Q_reject_press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_0 = 500000.0;
  parameter String Q_reject_press_sensor.display_unit = "barA" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_in_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_out_0
     = 300;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_in_0 = 
    100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_out_0 = 
    1000000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Pump.DP_0 = Pump.P_out_0-Pump.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Pump.h_in_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Pump.h_out_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_0 = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Pump.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC180_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC180_sensor.h_0 = 500000.0;
  parameter Boolean CEC180_sensor.faulty_flow_rate = false;
  parameter String CEC180_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String CEC180_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC180_sensor.flow_model.T_in_0 = CEC180_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC180_sensor.flow_model.T_out_0 = CEC180_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC180_sensor.flow_model.DP_0 = CEC180_sensor.flow_model.P_out_0-
    CEC180_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC180_sensor.flow_model.h_in_0 = CEC180_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC180_sensor.flow_model.h_out_0 = CEC180_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC180_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC180_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC180_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC180_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC180_sensor.T_0 = 300;
  parameter String CEC180_sensor.display_unit = "degC" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.h_0 = 500000.0;
  parameter Boolean Press1_sensor.faulty_flow_rate = false;
  parameter String Press1_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Press1_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_in_0 = Press1_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_out_0 = Press1_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press1_sensor.flow_model.DP_0 = Press1_sensor.flow_model.P_out_0-
    Press1_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_in_0 = Press1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_out_0 = Press1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_0 = 500000.0;
  parameter String Press1_sensor.display_unit = "barA" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V421_valve.T_in_0 = V421_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V421_valve.T_out_0 = V421_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V421_valve.DP_0 = V421_valve.P_out_0-V421_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_in_0 = V421_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_out_0 = V421_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V421_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage V421_opening_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String V421_opening_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String V421_opening_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.h_0 = 500000.0;
  parameter Boolean Q_recirculation_sensor.faulty_flow_rate = Q_recirculation_sensor.faulty;
  parameter String Q_recirculation_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Q_recirculation_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_in_0 = Q_recirculation_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_out_0 = Q_recirculation_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_recirculation_sensor.flow_model.DP_0 = Q_recirculation_sensor.flow_model.P_out_0
    -Q_recirculation_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_in_0 = Q_recirculation_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_out_0 = Q_recirculation_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Q_recirculation_sensor.Qv_0 = 0.1;
  parameter Boolean Q_recirculation_sensor.faulty = false;
  parameter String Q_recirculation_sensor.display_unit = "kg/s" "Specify the display unit";

  output MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V423(start = 
    148.92099);
  output MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V422(start = 
    347.48233);
  output MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V421(start = 
    347.48233);
  output Real hd(start = 5.1624656E-06);
  output Real V_inlet;
  output Real Extraction_Pump_hn(start = 20.42853);
  output Real Extraction_Pump_rh(start = -0.039662044);
  output Real Coldside_Flow(start = 390) "kg/s";
  output Real Hotside_Flow(start = 39.0) "kg/s";
  output Real Q_reject(start = 10.5) "m3/s";
  output Real Q_recirculation(start = 0.017708581);
  output Real Pump_Qv(start = 37.3) "m3/s";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cooling_sink.h_in(
    start = 96653.73);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction cooling_sink.Xi_in[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    cooling_sink.P_in(start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    cooling_sink.Q_in(start = 35.329674);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    cooling_sink.Qv_in(start = 0.035417162);
  MetroscopeModelingLibrary.Utilities.Units.Temperature cooling_sink.T_in(
    start = 296.1949);
  Modelica.Media.Interfaces.Types.FixedPhase cooling_sink.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy cooling_sink.state_in.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density cooling_sink.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature cooling_sink.state_in.T(start = 
    296.1949, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure cooling_sink.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    cooling_sink.C_in.Q(start = 35.329674, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure cooling_sink.C_in.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cooling_sink.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction cooling_sink.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    turbine_outlet.h_out(start = 2593216.8);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    turbine_outlet.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    turbine_outlet.P_out(start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    turbine_outlet.Q_out(start = -1.4406862);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    turbine_outlet.Qv_out(start = -39.0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature turbine_outlet.T_out(
    start = 323.15);
  Modelica.Media.Interfaces.Types.FixedPhase turbine_outlet.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy turbine_outlet.state_out.h(
    start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density turbine_outlet.state_out.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature turbine_outlet.state_out.T(
    start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure turbine_outlet.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    turbine_outlet.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure turbine_outlet.C_out.P(
    start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy turbine_outlet.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction turbine_outlet.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy condensate_sink.h_in
    (start = 144900.58);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction condensate_sink.Xi_in[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    condensate_sink.P_in(start = 15249.107);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    condensate_sink.Q_in(start = 1.4406862);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    condensate_sink.Qv_in(start = 0.0014491823);
  MetroscopeModelingLibrary.Utilities.Units.Temperature condensate_sink.T_in(
    start = 307.74976);
  Modelica.Media.Interfaces.Types.FixedPhase condensate_sink.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy condensate_sink.state_in.h(
    start = 144900.58, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density condensate_sink.state_in.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature condensate_sink.state_in.T(
    start = 307.74976, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure condensate_sink.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    condensate_sink.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure condensate_sink.C_in.P(
    start = 15249.107);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy condensate_sink.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction condensate_sink.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputHeight LOA.water_height;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    LOA.Kfr_cold;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputArea LOA.S;
  MetroscopeModelingLibrary.Utilities.Units.HeatExchangeCoefficient LOA.Kth;
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate LOA.Qv_cold_in(
    start = 0.054323334);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.W;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_cold(start = 
    54.12663);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate LOA.Q_hot(start = 
    1.4406862);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_cold_in(start = 
    292.15);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_cold_out(start = 
    307.73267);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_hot_in(start = 
    323.15);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.T_hot_out(start = 
    307.75186);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_tot(start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.Psat(start = LOA.Psat_0,
     nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.Tsat(start = 
    LOA.Tsat_0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.P_incond(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_DP(start = LOA.water_height_DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal LOA.C_incond(
    start = 0, unit = "mol/m3", min = 0.0) "Incondensable molar concentration";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure LOA.P_offset(
    start = 0.0) "Offset correction for ideal gas law";
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.fouling(start = 0, 
    nominal = 10.0);
  Real LOA.air_intake(start = 0, nominal = 0.001, unit = "mol/m3", min = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.Qv_cold_in_decrease(
    start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.C_cold_in.Q
    (start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_cold_in.P(start = 
    300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_cold_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_cold_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.C_hot_in.Q(
    start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_hot_in.P(start = 
    5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_hot_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_hot_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate LOA.C_hot_out.Q
    (start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_hot_out.P(start = 
    15249.107);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_hot_out.h_outflow
    (start = 144900.58);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_hot_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.C_cold_out.Q(start = -54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.C_cold_out.P(start = 
    300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.C_cold_out.h_outflow
    (start = 145087.36);
  Modelica.Media.Interfaces.Types.MassFraction LOA.C_cold_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.h_in
    (start = 79920.64) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.h_out
    (start = 79920.64) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side_pipe.Q(start = 54.12663) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_in(
    start = 300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.P_out(
    start = 300000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.cold_side_pipe.Xi[0]
     "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho_in(
    start = 998.4982) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho_out(
    start = 998.4982) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side_pipe.rho(
    start = 998.4982) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side_pipe.Qv_in(start = 0.054208037) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.cold_side_pipe.Qv_out(start = -0.054208037) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side_pipe.Qv(start = 0.054208037) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side_pipe.T_in(
    start = 292.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side_pipe.T_out
    (start = 292.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side_pipe.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side_pipe.state_in.h
    (start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side_pipe.state_in.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side_pipe.state_in.T(
    start = 292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side_pipe.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side_pipe.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side_pipe.state_out.h
    (start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side_pipe.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side_pipe.state_out.T(
    start = 292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side_pipe.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP(start = 0.0, nominal = 500000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.cold_side_pipe.W(start = 0,
     nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.cold_side_pipe.DH(start = LOA.cold_side_pipe.h_out_0-LOA.cold_side_pipe.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.cold_side_pipe.DT(start = LOA.cold_side_pipe.T_out_0-LOA.cold_side_pipe.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side_pipe.C_in.Q(start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.C_in.P(
    start = 300000.0, nominal = 500000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side_pipe.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.cold_side_pipe.C_out.Q(start = -54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side_pipe.C_out.P(
    start = 300000.0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.C_out.h_outflow
    (start = 79920.64);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side_pipe.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side_pipe.h
    (start = 79920.64) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    LOA.cold_side_pipe.Kfr(start = 10) "Friction pressure loss coefficient";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialHeight 
    LOA.cold_side_pipe.delta_z(nominal = 5.0) "Height difference between outlet and inlet";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP_f(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side_pipe.DP_z(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.cold_side_pipe.fouling;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.h_in(
    start = 2593216.8) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.h_out(
    start = 144900.58) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.hot_side.Q(
    start = 1.4406862) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_in(start = 
    5500.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P_out(start = 
    5500.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.hot_side.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho_in(start = 
    0.03694067) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho_out(
    start = 994.1323) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.hot_side.rho(start = 
    497.08463) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.hot_side.Qv_in(start = 39.0) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.hot_side.Qv_out(start = -0.0014491895) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.hot_side.Qv(start = 19.500725) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.hot_side.T_in(
    start = 323.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.hot_side.T_out(
    start = 307.75186) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.hot_side.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.hot_side.state_in.h(
    start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.hot_side.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.hot_side.state_in.T(start = 
    323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.hot_side.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.hot_side.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.hot_side.state_out.h(
    start = 144900.58, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.hot_side.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.hot_side.state_out.T(start = 
    307.75186, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.hot_side.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure LOA.hot_side.DP
    (start = 0.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.hot_side.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy LOA.hot_side.DH
    (start = LOA.hot_side.h_out_0-LOA.hot_side.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.hot_side.DT(start = LOA.hot_side.T_out_0-LOA.hot_side.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.hot_side.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.C_in.P(
    start = 5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.hot_side.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.hot_side.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.C_out.P(
    start = 5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.hot_side.C_out.h_outflow
    (start = 144900.58);
  Modelica.Media.Interfaces.Types.MassFraction LOA.hot_side.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.hot_side.P(start = 
    5500.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPower LOA.hot_side.W_input
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.h_in(
    start = 79920.64) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.h_out
    (start = 145087.36) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate LOA.cold_side.Q
    (start = 54.12663) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_in(start = 
    300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P_out(
    start = 300000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.cold_side.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho_in(
    start = 998.4982) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho_out(
    start = 994.2687) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.cold_side.rho(start = 
    996.3834) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side.Qv_in(start = 0.054208037) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.cold_side.Qv_out(start = -0.054438636) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.cold_side.Qv(start = 0.054323334) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side.T_in(
    start = 292.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.cold_side.T_out(
    start = 307.73267) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side.state_in.h(
    start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side.state_in.T(start = 
    292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.cold_side.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.cold_side.state_out.h(
    start = 145087.36, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.cold_side.state_out.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.cold_side.state_out.T(start = 
    307.73267, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.cold_side.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.cold_side.DP(start = 0.0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.cold_side.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.cold_side.DH(start = LOA.cold_side.h_out_0-LOA.cold_side.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.cold_side.DT(start = LOA.cold_side.T_out_0-LOA.cold_side.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.cold_side.C_in.Q(start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.C_in.P(
    start = 300000.0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.cold_side.C_out.Q(start = -54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.C_out.P(
    start = 300000.0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.cold_side.C_out.h_outflow
    (start = 145087.36);
  Modelica.Media.Interfaces.Types.MassFraction LOA.cold_side.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.cold_side.P(start = 
    300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPower LOA.cold_side.W_input
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.h_in
    (start = 144900.58) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.h_out
    (start = 144900.58) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.water_height_pipe.Q(start = 1.4406862) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_in(
    start = 5500.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.P_out
    (start = 15249.107) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.water_height_pipe.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho_in
    (start = 994.1323) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho_out
    (start = 994.1373) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.water_height_pipe.rho(
    start = 994.1348) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.water_height_pipe.Qv_in(start = 0.0014491895) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.water_height_pipe.Qv_out(start = -0.0014491823) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.water_height_pipe.Qv(start = 0.0014491859) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.water_height_pipe.T_in
    (start = 307.75186) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.water_height_pipe.T_out
    (start = 307.74976) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.water_height_pipe.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.water_height_pipe.state_in.h
    (start = 144900.58, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.water_height_pipe.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.water_height_pipe.state_in.T(
    start = 307.75186, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.water_height_pipe.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.water_height_pipe.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.water_height_pipe.state_out.h
    (start = 144900.58, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.water_height_pipe.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.water_height_pipe.state_out.T(
    start = 307.74976, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.water_height_pipe.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP(start = 9749.107, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.water_height_pipe.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.water_height_pipe.DH(start = LOA.water_height_pipe.h_out_0-
    LOA.water_height_pipe.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.water_height_pipe.DT(start = LOA.water_height_pipe.T_out_0-
    LOA.water_height_pipe.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.water_height_pipe.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.C_in.P
    (start = 5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.water_height_pipe.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.water_height_pipe.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.water_height_pipe.C_out.P
    (start = 15249.107, nominal = 14000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.C_out.h_outflow
    (start = 144900.58);
  Modelica.Media.Interfaces.Types.MassFraction LOA.water_height_pipe.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.water_height_pipe.h
    (start = 144900.58) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    LOA.water_height_pipe.Kfr(start = 10) "Friction pressure loss coefficient";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialHeight 
    LOA.water_height_pipe.delta_z(nominal = 5.0) "Height difference between outlet and inlet";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP_f(start = 0.0) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.water_height_pipe.DP_z(start = 9749.107) "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.Percentage LOA.water_height_pipe.fouling;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.h_in
    (start = 2593216.8) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.h_out
    (start = 2593216.8) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_in.Q(start = 1.4406862) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_in(
    start = 5500.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.P_out
    (start = 5500.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.incondensables_in.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho_in
    (start = 0.03694067) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho_out
    (start = 0.03694067) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_in.rho(
    start = 0.03694067) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_in.Qv_in(start = 39.0) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.incondensables_in.Qv_out(start = -39.0) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_in.Qv(start = 39.0) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_in.T_in
    (start = 323.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_in.T_out
    (start = 323.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_in.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_in.state_in.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_in.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_in.state_in.T(
    start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_in.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_in.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_in.state_out.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_in.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_in.state_out.T(
    start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_in.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_in.DP(start = 0.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.incondensables_in.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.incondensables_in.DH(start = LOA.incondensables_in.h_out_0-
    LOA.incondensables_in.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.incondensables_in.DT(start = LOA.incondensables_in.T_out_0-
    LOA.incondensables_in.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_in.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.C_in.P
    (start = 5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_in.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.incondensables_in.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_in.C_out.P
    (start = 5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_in.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_in.h
    (start = 2593216.8) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    LOA.incondensables_in.DP_input(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.h_in
    (start = 144900.58) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.h_out
    (start = 144900.58) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_out.Q(start = 1.4406862) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_in
    (start = 5500.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.P_out
    (start = 5500.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction LOA.incondensables_out.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho_in
    (start = 994.1323) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho_out
    (start = 994.1323) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density LOA.incondensables_out.rho(
    start = 994.1323) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_out.Qv_in(start = 0.0014491895) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    LOA.incondensables_out.Qv_out(start = -0.0014491895) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    LOA.incondensables_out.Qv(start = 0.0014491895) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_out.T_in
    (start = 307.75186) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature LOA.incondensables_out.T_out
    (start = 307.75186) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_out.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_out.state_in.h
    (start = 144900.58, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_out.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_out.state_in.T(
    start = 307.75186, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_out.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase LOA.incondensables_out.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy LOA.incondensables_out.state_out.h
    (start = 144900.58, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density LOA.incondensables_out.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature LOA.incondensables_out.state_out.T
    (start = 307.75186, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure LOA.incondensables_out.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    LOA.incondensables_out.DP(start = 0.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power LOA.incondensables_out.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    LOA.incondensables_out.DH(start = LOA.incondensables_out.h_out_0-
    LOA.incondensables_out.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    LOA.incondensables_out.DT(start = LOA.incondensables_out.T_out_0-
    LOA.incondensables_out.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    LOA.incondensables_out.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.C_in.P
    (start = 5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_out.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    LOA.incondensables_out.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure LOA.incondensables_out.C_out.P
    (start = 5500.0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.C_out.h_outflow
    (start = 144900.58);
  Modelica.Media.Interfaces.Types.MassFraction LOA.incondensables_out.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy LOA.incondensables_out.h
    (start = 144900.58) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    LOA.incondensables_out.DP_input(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate VCT178_sensor.Q
    (start = 1.4406862, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction VCT178_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.P(start = 
    5500.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.h(
    start = 2593216.8) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase VCT178_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy VCT178_sensor.state.h(
    start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density VCT178_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature VCT178_sensor.state.T(start = 
    323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure VCT178_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate VCT178_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.C_in.Q(start = 1.4406862, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.C_in.P(
    start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    VCT178_sensor.C_out.Q(start = -1.4406862, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.C_out.P(
    start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.h_in
    (start = 2593216.8) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.h_out
    (start = 2593216.8) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.flow_model.Q(start = 1.4406862) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_in
    (start = 5500.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P_out
    (start = 5500.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction VCT178_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho_in
    (start = 0.03694067) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho_out
    (start = 0.03694067) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density VCT178_sensor.flow_model.rho
    (start = 0.03694067) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    VCT178_sensor.flow_model.Qv_in(start = 39.0) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    VCT178_sensor.flow_model.Qv_out(start = -39.0) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    VCT178_sensor.flow_model.Qv(start = 39.0) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature VCT178_sensor.flow_model.T_in
    (start = 323.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature VCT178_sensor.flow_model.T_out
    (start = 323.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase VCT178_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy VCT178_sensor.flow_model.state_in.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density VCT178_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature VCT178_sensor.flow_model.state_in.T
    (start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure VCT178_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase VCT178_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy VCT178_sensor.flow_model.state_out.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density VCT178_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature VCT178_sensor.flow_model.state_out.T
    (start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure VCT178_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    VCT178_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power VCT178_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    VCT178_sensor.flow_model.DH(start = VCT178_sensor.flow_model.h_out_0-
    VCT178_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    VCT178_sensor.flow_model.DT(start = VCT178_sensor.flow_model.T_out_0-
    VCT178_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    VCT178_sensor.flow_model.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.C_in.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    VCT178_sensor.flow_model.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.C_out.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction VCT178_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy VCT178_sensor.flow_model.h
    (start = 2593216.8) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure VCT178_sensor.flow_model.P(
    start = 5500.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature VCT178_sensor.flow_model.T
    (start = 323.15) "Temperature of the fluid into the component";
  Real VCT178_sensor.P_barG(start = -0.945, nominal = 100000.0);
  Real VCT178_sensor.P_psiG(start = -13.706065, nominal = 14.5038);
  Real VCT178_sensor.P_MPaG(start = -0.0945, nominal = 0.09999999999999999);
  Real VCT178_sensor.P_kPaG(start = -94.5, nominal = 100.0);
  Real VCT178_sensor.P_barA(start = 0.055, nominal = 1.0, unit = "bar");
  Real VCT178_sensor.P_psiA(start = 0.797709, nominal = 14.5038);
  Real VCT178_sensor.P_MPaA(start = 0.0055, nominal = 0.09999999999999999);
  Real VCT178_sensor.P_kPaA(start = 5.5, nominal = 100.0);
  Real VCT178_sensor.P_inHg(start = 1.6241533, nominal = 29.530060000000002);
  Real VCT178_sensor.P_mbar(start = 55.0, nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.Q(start = 1.4406862, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Temp_sensor.Xi[0]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.P(
    start = 5500.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.h
    (start = 2593216.8) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Temp_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Temp_sensor.state.h(
    start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Temp_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Temp_sensor.state.T(
    start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Temp_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Hotside_Temp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.C_in.Q(start = 1.4406862, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.C_in.P(
    start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Temp_sensor.C_out.Q(start = -1.4406862, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.C_out.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.h_in
    (start = 2593216.8) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.h_out
    (start = 2593216.8) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.flow_model.Q(start = 1.4406862) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_in
    (start = 5500.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P_out
    (start = 5500.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Temp_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho_in
    (start = 0.03694067) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho_out
    (start = 0.03694067) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Temp_sensor.flow_model.rho
    (start = 0.03694067) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Temp_sensor.flow_model.Qv_in(start = 39.0) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Hotside_Temp_sensor.flow_model.Qv_out(start = -39.0) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Temp_sensor.flow_model.Qv(start = 39.0) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.flow_model.T_in
    (start = 323.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.flow_model.T_out
    (start = 323.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Temp_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Temp_sensor.flow_model.state_in.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Temp_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Temp_sensor.flow_model.state_in.T
    (start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Temp_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Temp_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Temp_sensor.flow_model.state_out.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Temp_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Temp_sensor.flow_model.state_out.T
    (start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Temp_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Temp_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Hotside_Temp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Hotside_Temp_sensor.flow_model.DH(start = Hotside_Temp_sensor.flow_model.h_out_0
    -Hotside_Temp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Hotside_Temp_sensor.flow_model.DT(start = Hotside_Temp_sensor.flow_model.T_out_0
    -Hotside_Temp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Temp_sensor.flow_model.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.C_in.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Temp_sensor.flow_model.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.C_out.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Temp_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Temp_sensor.flow_model.h
    (start = 2593216.8) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Temp_sensor.flow_model.P
    (start = 5500.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.flow_model.T
    (start = 323.15) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Temp_sensor.T(
    start = 323.15);
  Real Hotside_Temp_sensor.T_degC(start = 50.0, nominal = 573.15, unit = "degC");
  Real Hotside_Temp_sensor.T_degF(start = 122.0, nominal = 1063.67, unit = 
    "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.Q(start = 1.4406862, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Flow_sensor.Xi[0]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.P(
    start = 5500.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.h
    (start = 2593216.8) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Flow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Flow_sensor.state.h(
    start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Flow_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Flow_sensor.state.T(
    start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Flow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Hotside_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.C_in.Q(start = 1.4406862, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.C_in.P(
    start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Flow_sensor.C_out.Q(start = -1.4406862, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.C_out.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.h_in
    (start = 2593216.8) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.h_out
    (start = 2593216.8) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.flow_model.Q(start = 1.4406862) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_in
    (start = 5500.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P_out
    (start = 5500.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Hotside_Flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho_in
    (start = 0.03694067) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho_out
    (start = 0.03694067) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Hotside_Flow_sensor.flow_model.rho
    (start = 0.03694067) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Flow_sensor.flow_model.Qv_in(start = 39.0) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Hotside_Flow_sensor.flow_model.Qv_out(start = -39.0) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Hotside_Flow_sensor.flow_model.Qv(start = 39.0) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Flow_sensor.flow_model.T_in
    (start = 323.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Flow_sensor.flow_model.T_out
    (start = 323.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Flow_sensor.flow_model.state_in.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Flow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Flow_sensor.flow_model.state_in.T
    (start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Hotside_Flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Hotside_Flow_sensor.flow_model.state_out.h
    (start = 2593216.8, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Hotside_Flow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Hotside_Flow_sensor.flow_model.state_out.T
    (start = 323.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Hotside_Flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Hotside_Flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Hotside_Flow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Hotside_Flow_sensor.flow_model.DH(start = Hotside_Flow_sensor.flow_model.h_out_0
    -Hotside_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Hotside_Flow_sensor.flow_model.DT(start = Hotside_Flow_sensor.flow_model.T_out_0
    -Hotside_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Hotside_Flow_sensor.flow_model.C_in.Q(start = 1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.C_in.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Hotside_Flow_sensor.flow_model.C_out.Q(start = -1.4406862, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.C_out.P
    (start = 5500.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.C_out.h_outflow
    (start = 2593216.8);
  Modelica.Media.Interfaces.Types.MassFraction Hotside_Flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Hotside_Flow_sensor.flow_model.h
    (start = 2593216.8) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Hotside_Flow_sensor.flow_model.P
    (start = 5500.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Hotside_Flow_sensor.flow_model.T
    (start = 323.15) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Hotside_Flow_sensor.Qv
    (start = 39.0);
  Real Hotside_Flow_sensor.Q_lm(start = 2340000.0, nominal = 6000.0);
  Real Hotside_Flow_sensor.Q_th(start = 5.18647, nominal = 360.0);
  Real Hotside_Flow_sensor.Q_lbs(start = 0.65348434, nominal = 45.3592428);
  Real Hotside_Flow_sensor.Q_Mlbh(start = 0.0114342095, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.Q(start = 36.461792, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Flow_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.h
    (start = 79312.05) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Flow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Flow_sensor.state.h(
    start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Flow_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Flow_sensor.state.T(
    start = 292.05, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Flow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Coldside_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.C_in.Q(start = 36.461792, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Flow_sensor.C_out.Q(start = -36.461792, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.C_out.h_outflow
    (start = 79312.05);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.h_in
    (start = 79312.05) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.h_out
    (start = 79312.05) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.flow_model.Q(start = 36.461792) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho_in
    (start = 998.42596) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho_out
    (start = 998.42596) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Flow_sensor.flow_model.rho
    (start = 998.42596) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Flow_sensor.flow_model.Qv_in(start = 0.036519274) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Coldside_Flow_sensor.flow_model.Qv_out(start = -0.036519274) 
    "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Flow_sensor.flow_model.Qv(start = 0.036519274) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Flow_sensor.flow_model.T_in
    (start = 292.05) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Flow_sensor.flow_model.T_out
    (start = 292.05) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Flow_sensor.flow_model.state_in.h
    (start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Flow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Flow_sensor.flow_model.state_in.T
    (start = 292.05, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Flow_sensor.flow_model.state_out.h
    (start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Flow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Flow_sensor.flow_model.state_out.T
    (start = 292.05, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Coldside_Flow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Coldside_Flow_sensor.flow_model.DH(start = Coldside_Flow_sensor.flow_model.h_out_0
    -Coldside_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Coldside_Flow_sensor.flow_model.DT(start = Coldside_Flow_sensor.flow_model.T_out_0
    -Coldside_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Flow_sensor.flow_model.C_in.Q(start = 36.461792, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Flow_sensor.flow_model.C_out.Q(start = -36.461792, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.C_out.h_outflow
    (start = 79312.05);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Flow_sensor.flow_model.h
    (start = 79312.05) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Flow_sensor.flow_model.P
    (start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Flow_sensor.flow_model.T
    (start = 292.05) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Coldside_Flow_sensor.Qv
    (start = 0.036519274);
  Real Coldside_Flow_sensor.Q_lm(start = 2191.1565, nominal = 6000.0);
  Real Coldside_Flow_sensor.Q_th(start = 131.26245, nominal = 360.0);
  Real Coldside_Flow_sensor.Q_lbs(start = 16.538792, nominal = 45.3592428);
  Real Coldside_Flow_sensor.Q_Mlbh(start = 0.28938416, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC231_sensor.Q
    (start = 54.12663, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC231_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.P(start = 
    300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.h(
    start = 79920.64) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC231_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC231_sensor.state.h(
    start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC231_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC231_sensor.state.T(start = 
    292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC231_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC231_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC231_sensor.C_in.Q(start = 54.12663, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.C_in.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC231_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC231_sensor.C_out.Q(start = -54.12663, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.C_out.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.C_out.h_outflow
    (start = 79920.64);
  Modelica.Media.Interfaces.Types.MassFraction CEC231_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.flow_model.h_in
    (start = 79920.64) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.flow_model.h_out
    (start = 79920.64) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC231_sensor.flow_model.Q(start = 54.12663) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.P_in
    (start = 300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.P_out
    (start = 300000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC231_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC231_sensor.flow_model.rho_in
    (start = 998.4982) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC231_sensor.flow_model.rho_out
    (start = 998.4982) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC231_sensor.flow_model.rho
    (start = 998.4982) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC231_sensor.flow_model.Qv_in(start = 0.054208037) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC231_sensor.flow_model.Qv_out(start = -0.054208037) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC231_sensor.flow_model.Qv(start = 0.054208037) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC231_sensor.flow_model.T_in
    (start = 292.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC231_sensor.flow_model.T_out
    (start = 292.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC231_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC231_sensor.flow_model.state_in.h
    (start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC231_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC231_sensor.flow_model.state_in.T
    (start = 292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC231_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC231_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC231_sensor.flow_model.state_out.h
    (start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC231_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC231_sensor.flow_model.state_out.T
    (start = 292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC231_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC231_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC231_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC231_sensor.flow_model.DH(start = CEC231_sensor.flow_model.h_out_0-
    CEC231_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC231_sensor.flow_model.DT(start = CEC231_sensor.flow_model.T_out_0-
    CEC231_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC231_sensor.flow_model.C_in.Q(start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.C_in.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC231_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC231_sensor.flow_model.C_out.Q(start = -54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.C_out.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.flow_model.C_out.h_outflow
    (start = 79920.64);
  Modelica.Media.Interfaces.Types.MassFraction CEC231_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC231_sensor.flow_model.h
    (start = 79920.64) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC231_sensor.flow_model.P(
    start = 300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC231_sensor.flow_model.T
    (start = 292.15) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC231_sensor.T(start = 
    292.15);
  Real CEC231_sensor.T_degC(start = 19.0, nominal = 573.15, unit = "degC");
  Real CEC231_sensor.T_degF(start = 66.2, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.Q(start = 54.12663, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Press_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.P(
    start = 300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.h
    (start = 79920.64) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Press_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Press_sensor.state.h
    (start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Press_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Press_sensor.state.T(
    start = 292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Press_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Coldside_Press_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.C_in.Q(start = 54.12663, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.C_in.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Press_sensor.C_out.Q(start = -54.12663, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.C_out.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.C_out.h_outflow
    (start = 79920.64);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.h_in
    (start = 79920.64) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.h_out
    (start = 79920.64) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.flow_model.Q(start = 54.12663) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_in
    (start = 300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P_out
    (start = 300000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Coldside_Press_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho_in
    (start = 998.4982) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho_out
    (start = 998.4982) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Coldside_Press_sensor.flow_model.rho
    (start = 998.4982) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Press_sensor.flow_model.Qv_in(start = 0.054208037) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Coldside_Press_sensor.flow_model.Qv_out(start = -0.054208037) 
    "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Coldside_Press_sensor.flow_model.Qv(start = 0.054208037) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Press_sensor.flow_model.T_in
    (start = 292.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Press_sensor.flow_model.T_out
    (start = 292.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Press_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Press_sensor.flow_model.state_in.h
    (start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Press_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Press_sensor.flow_model.state_in.T
    (start = 292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Press_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Coldside_Press_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Coldside_Press_sensor.flow_model.state_out.h
    (start = 79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Coldside_Press_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Coldside_Press_sensor.flow_model.state_out.T
    (start = 292.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Coldside_Press_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Coldside_Press_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Coldside_Press_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Coldside_Press_sensor.flow_model.DH(start = Coldside_Press_sensor.flow_model.h_out_0
    -Coldside_Press_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Coldside_Press_sensor.flow_model.DT(start = Coldside_Press_sensor.flow_model.T_out_0
    -Coldside_Press_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Coldside_Press_sensor.flow_model.C_in.Q(start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.C_in.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Coldside_Press_sensor.flow_model.C_out.Q(start = -54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.C_out.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.C_out.h_outflow
    (start = 79920.64);
  Modelica.Media.Interfaces.Types.MassFraction Coldside_Press_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Coldside_Press_sensor.flow_model.h
    (start = 79920.64) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Coldside_Press_sensor.flow_model.P
    (start = 300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Coldside_Press_sensor.flow_model.T
    (start = 292.15) "Temperature of the fluid into the component";
  Real Coldside_Press_sensor.P_barG(start = 2.0, nominal = 100000.0);
  Real Coldside_Press_sensor.P_psiG(start = 29.007626, nominal = 14.5038);
  Real Coldside_Press_sensor.P_MPaG(start = 0.2, nominal = 0.09999999999999999);
  Real Coldside_Press_sensor.P_kPaG(start = 200.0, nominal = 100.0);
  Real Coldside_Press_sensor.P_barA(start = 3.0, nominal = 1.0, unit = "bar");
  Real Coldside_Press_sensor.P_psiA(start = 43.5114, nominal = 14.5038);
  Real Coldside_Press_sensor.P_MPaA(start = 0.3, nominal = 0.09999999999999999);
  Real Coldside_Press_sensor.P_kPaA(start = 300.0, nominal = 100.0);
  Real Coldside_Press_sensor.P_inHg(start = 88.59018, nominal = 29.530060000000002);
  Real Coldside_Press_sensor.P_mbar(start = 3000.0, nominal = 1000.0, unit = 
    "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC235_sensor.Q
    (start = 54.12663, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC235_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.P(start = 
    300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.h(
    start = 145087.36) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC235_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC235_sensor.state.h(
    start = 145087.36, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC235_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC235_sensor.state.T(start = 
    307.73267, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC235_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC235_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC235_sensor.C_in.Q(start = 54.12663, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.C_in.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC235_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC235_sensor.C_out.Q(start = -54.12663, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.C_out.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.C_out.h_outflow
    (start = 145087.36);
  Modelica.Media.Interfaces.Types.MassFraction CEC235_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.flow_model.h_in
    (start = 145087.36) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.flow_model.h_out
    (start = 145087.36) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC235_sensor.flow_model.Q(start = 54.12663) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.P_in
    (start = 300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.P_out
    (start = 300000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC235_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC235_sensor.flow_model.rho_in
    (start = 994.2687) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC235_sensor.flow_model.rho_out
    (start = 994.2687) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC235_sensor.flow_model.rho
    (start = 994.2687) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC235_sensor.flow_model.Qv_in(start = 0.054438636) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC235_sensor.flow_model.Qv_out(start = -0.054438636) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC235_sensor.flow_model.Qv(start = 0.054438636) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC235_sensor.flow_model.T_in
    (start = 307.73267) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC235_sensor.flow_model.T_out
    (start = 307.73267) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC235_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC235_sensor.flow_model.state_in.h
    (start = 145087.36, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC235_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC235_sensor.flow_model.state_in.T
    (start = 307.73267, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC235_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC235_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC235_sensor.flow_model.state_out.h
    (start = 145087.36, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC235_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC235_sensor.flow_model.state_out.T
    (start = 307.73267, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC235_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC235_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC235_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC235_sensor.flow_model.DH(start = CEC235_sensor.flow_model.h_out_0-
    CEC235_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC235_sensor.flow_model.DT(start = CEC235_sensor.flow_model.T_out_0-
    CEC235_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC235_sensor.flow_model.C_in.Q(start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.C_in.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC235_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC235_sensor.flow_model.C_out.Q(start = -54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.C_out.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.flow_model.C_out.h_outflow
    (start = 145087.36);
  Modelica.Media.Interfaces.Types.MassFraction CEC235_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC235_sensor.flow_model.h
    (start = 145087.36) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC235_sensor.flow_model.P(
    start = 300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC235_sensor.flow_model.T
    (start = 307.73267) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC235_sensor.T(start = 
    307.73267);
  Real CEC235_sensor.T_degC(start = 34.582672, nominal = 573.15, unit = "degC");
  Real CEC235_sensor.T_degF(start = 94.24881, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.Velocity CoolingTower.V_inlet;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.hd;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputArea CoolingTower.Afr;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.Lfi;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    CoolingTower.Cf;
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_inlet(
    start = 1.2050902);
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_outlet(
    start = 1.2050897);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_in(
    start = 54.12663);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_out(
    start = -52.99451);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_in(
    start = 233.84636);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_out
    (start = -234.97847);
  Real CoolingTower.w_in;
  Real CoolingTower.w_out;
  Real CoolingTower.w_sat[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_initial;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_final;
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.W_max;
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.W_min;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_in(
    start = 288.15);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_out(
    start = 287.31592);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_in(
    start = 307.73267);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_out(
    start = 296.15);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.deltaTw;
  Real CoolingTower.w[CoolingTower.N_step];
  Real CoolingTower.M[CoolingTower.N_step];
  Real CoolingTower.Me;
  Real CoolingTower.i[CoolingTower.N_step];
  Real CoolingTower.Tw[CoolingTower.N_step](start = {293.15, 294.2611, 295.37222,
     296.48334, 297.59445, 298.70557, 299.81668, 300.92776, 302.03888, 303.15});
  Real CoolingTower.Ta[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.HeatCapacity CoolingTower.cp[
    CoolingTower.N_step];
  Real CoolingTower.Pin[CoolingTower.N_step];
  Real CoolingTower.Lef[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Qw[
    CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Qa[
    CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_connector.Q(start = 500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_connector.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet_connector.Q(start = -500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_connector.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_connector.Q(start = 500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_connector.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet_connector.Q(start = -500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_connector.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h_in
    (start = CoolingTower.water_inlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h_out
    (start = CoolingTower.water_inlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.Q(start = CoolingTower.water_inlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_in
    (start = CoolingTower.water_inlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_out
    (start = CoolingTower.water_inlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_inlet_flow.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_in
    (start = CoolingTower.water_inlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_out
    (start = CoolingTower.water_inlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho
    (start = CoolingTower.water_inlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet_flow.T_in
    (start = CoolingTower.water_inlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet_flow.T_out
    (start = CoolingTower.water_inlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet_flow.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet_flow.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet_flow.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet_flow.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet_flow.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet_flow.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet_flow.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet_flow.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet_flow.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet_flow.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_inlet_flow.DP(start = CoolingTower.water_inlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.water_inlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.water_inlet_flow.DH(start = CoolingTower.water_inlet_flow.h_out_0
    -CoolingTower.water_inlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.water_inlet_flow.DT(start = CoolingTower.water_inlet_flow.T_out_0
    -CoolingTower.water_inlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.C_in.Q(start = CoolingTower.water_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.C_in.P
    (start = CoolingTower.water_inlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_flow.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_inlet_flow.C_out.Q(start =  -CoolingTower.water_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.C_out.P
    (start = CoolingTower.water_inlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.C_out.h_outflow
    (start = CoolingTower.water_inlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_flow.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h
    (start = CoolingTower.water_inlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    CoolingTower.water_inlet_flow.DP_input(start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h_in
    (start = CoolingTower.water_outlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h_out
    (start = CoolingTower.water_outlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.Q(start = CoolingTower.water_outlet_flow.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_in
    (start = CoolingTower.water_outlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_out
    (start = CoolingTower.water_outlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_outlet_flow.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_in
    (start = CoolingTower.water_outlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_out
    (start = CoolingTower.water_outlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho
    (start = CoolingTower.water_outlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T_in
    (start = CoolingTower.water_outlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T_out
    (start = CoolingTower.water_outlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet_flow.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet_flow.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet_flow.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet_flow.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet_flow.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet_flow.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet_flow.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet_flow.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet_flow.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet_flow.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_outlet_flow.DP(start = CoolingTower.water_outlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.water_outlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.water_outlet_flow.DH(start = CoolingTower.water_outlet_flow.h_out_0
    -CoolingTower.water_outlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.water_outlet_flow.DT(start = CoolingTower.water_outlet_flow.T_out_0
    -CoolingTower.water_outlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.C_in.Q(start = CoolingTower.water_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.C_in.P
    (start = CoolingTower.water_outlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_flow.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet_flow.C_out.Q(start =  -CoolingTower.water_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.C_out.P
    (start = CoolingTower.water_outlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.C_out.h_outflow
    (start = CoolingTower.water_outlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_flow.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h
    (start = CoolingTower.water_outlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P
    (start = CoolingTower.water_outlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T
    (start = CoolingTower.water_outlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.water_outlet.h_out(start = 96653.73);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.water_outlet.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.water_outlet.P_out(start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet.Q_out(start = -52.99451);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_outlet.Qv_out(start = -0.053120352);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet.T_out
    (start = 296.15);
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet.state_out.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet.state_out.T
    (start = 296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet.C_out.Q(start = -52.99451, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet.C_out.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet.h_in
    (start = 145087.36);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_inlet.Xi_in
    [0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.water_inlet.P_in(start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet.Q_in(start = 54.12663);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet.Qv_in(start = 0.054438636);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet.T_in
    (start = 307.73267);
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet.state_in.h
    (start = 145087.36, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet.state_in.T
    (start = 307.73267, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet.C_in.Q(start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet.C_in.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h_in
    (start = CoolingTower.air_inlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h_out
    (start = CoolingTower.air_inlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.Q(start = CoolingTower.air_inlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_in
    (start = CoolingTower.air_inlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_out
    (start = CoolingTower.air_inlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_inlet_flow.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_in
    (start = CoolingTower.air_inlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_out
    (start = CoolingTower.air_inlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho
    (start = CoolingTower.air_inlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T_in
    (start = CoolingTower.air_inlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T_out
    (start = CoolingTower.air_inlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet_flow.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet_flow.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet_flow.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet_flow.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_inlet_flow.DP(start = CoolingTower.air_inlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.air_inlet_flow.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.air_inlet_flow.DH(start = CoolingTower.air_inlet_flow.h_out_0-
    CoolingTower.air_inlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.air_inlet_flow.DT(start = CoolingTower.air_inlet_flow.T_out_0-
    CoolingTower.air_inlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.C_in.Q(start = CoolingTower.air_inlet_flow.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.C_in.P
    (start = CoolingTower.air_inlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_inlet_flow.C_out.Q(start =  -CoolingTower.air_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.C_out.P
    (start = CoolingTower.air_inlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.C_out.h_outflow
    (start = CoolingTower.air_inlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h
    (start = CoolingTower.air_inlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P
    (start = CoolingTower.air_inlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T
    (start = CoolingTower.air_inlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet.h_in
    (start = 28437.334);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_inlet.Xi_in
    [1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.air_inlet.P_in(start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet.Q_in(start = 233.84636);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet.Qv_in(start = 194.04884);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet.T_in
    (start = 288.15);
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet.state_in.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet.C_in.Q(start = 233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet.C_in.Xi_outflow
    [1];
  Real CoolingTower.air_inlet.relative_humidity(start = CoolingTower.air_inlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.air_outlet.h_out(start = 39639.684);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.air_outlet.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.air_outlet.P_out(start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet.Q_out(start = -234.97847);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_outlet.Qv_out(start = -194.98837);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet.T_out
    (start = 287.31592);
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet.state_out.T
    (start = 287.31592, min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet.C_out.Q(start = -234.97847, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet.C_out.h_outflow
    (start = 39639.684);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet.C_out.Xi_outflow
    [1];
  Real CoolingTower.air_outlet.relative_humidity(start = CoolingTower.air_outlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h_in
    (start = CoolingTower.air_outlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h_out
    (start = CoolingTower.air_outlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.Q(start = CoolingTower.air_outlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_in
    (start = CoolingTower.air_outlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_out
    (start = CoolingTower.air_outlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_outlet_flow.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_in
    (start = CoolingTower.air_outlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_out
    (start = CoolingTower.air_outlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho
    (start = CoolingTower.air_outlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T_in
    (start = CoolingTower.air_outlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T_out
    (start = CoolingTower.air_outlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet_flow.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet_flow.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet_flow.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet_flow.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_outlet_flow.DP(start = CoolingTower.air_outlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.air_outlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.air_outlet_flow.DH(start = CoolingTower.air_outlet_flow.h_out_0
    -CoolingTower.air_outlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.air_outlet_flow.DT(start = CoolingTower.air_outlet_flow.T_out_0
    -CoolingTower.air_outlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.C_in.Q(start = CoolingTower.air_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.C_in.P
    (start = CoolingTower.air_outlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet_flow.C_out.Q(start =  -CoolingTower.air_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.C_out.P
    (start = CoolingTower.air_outlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.C_out.h_outflow
    (start = CoolingTower.air_outlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h
    (start = CoolingTower.air_outlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P
    (start = CoolingTower.air_outlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T
    (start = CoolingTower.air_outlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC194_sensor.Q
    (start = 52.99451, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC194_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.P(start = 
    300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.h(
    start = 96653.73) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC194_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC194_sensor.state.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC194_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC194_sensor.state.T(start = 
    296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC194_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC194_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.C_in.Q(start = 52.99451, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.C_in.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC194_sensor.C_out.Q(start = -52.99451, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.C_out.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.h_in
    (start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.h_out
    (start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.flow_model.Q(start = 52.99451) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_in
    (start = 300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P_out
    (start = 300000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC194_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho_in
    (start = 997.63104) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho_out
    (start = 997.63104) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC194_sensor.flow_model.rho
    (start = 997.63104) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC194_sensor.flow_model.Qv_in(start = 0.053120352) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC194_sensor.flow_model.Qv_out(start = -0.053120352) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC194_sensor.flow_model.Qv(start = 0.053120352) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.flow_model.T_in
    (start = 296.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.flow_model.T_out
    (start = 296.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC194_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC194_sensor.flow_model.state_in.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC194_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC194_sensor.flow_model.state_in.T
    (start = 296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC194_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC194_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC194_sensor.flow_model.state_out.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC194_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC194_sensor.flow_model.state_out.T
    (start = 296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC194_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC194_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC194_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC194_sensor.flow_model.DH(start = CEC194_sensor.flow_model.h_out_0-
    CEC194_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC194_sensor.flow_model.DT(start = CEC194_sensor.flow_model.T_out_0-
    CEC194_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC194_sensor.flow_model.C_in.Q(start = 52.99451, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.C_in.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC194_sensor.flow_model.C_out.Q(start = -52.99451, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.C_out.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction CEC194_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC194_sensor.flow_model.h
    (start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC194_sensor.flow_model.P(
    start = 300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.flow_model.T
    (start = 296.15) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC194_sensor.T(start = 
    296.15);
  Real CEC194_sensor.T_degC(start = 23.0, nominal = 573.15, unit = "degC");
  Real CEC194_sensor.T_degF(start = 73.4, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC197_sensor.Q
    (start = 52.99451, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC197_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.P(start = 
    300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.h(
    start = 96653.73) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.state.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.state.T(start = 
    296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC197_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.C_in.Q(start = 52.99451, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.C_in.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC197_sensor.C_out.Q(start = -52.99451, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.C_out.P(
    start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h_in
    (start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h_out
    (start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.Q(start = 52.99451) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_in
    (start = 300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_out
    (start = 300000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC197_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_in
    (start = 997.63104) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_out
    (start = 997.63104) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho
    (start = 997.63104) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC197_sensor.flow_model.Qv_in(start = 0.053120352) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC197_sensor.flow_model.Qv_out(start = -0.053120352) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC197_sensor.flow_model.Qv(start = 0.053120352) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T_in
    (start = 296.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T_out
    (start = 296.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.flow_model.state_in.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.flow_model.state_in.T
    (start = 296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.flow_model.state_out.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.flow_model.state_out.T
    (start = 296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC197_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC197_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC197_sensor.flow_model.DH(start = CEC197_sensor.flow_model.h_out_0-
    CEC197_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC197_sensor.flow_model.DT(start = CEC197_sensor.flow_model.T_out_0-
    CEC197_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.C_in.Q(start = 52.99451, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.C_in.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC197_sensor.flow_model.C_out.Q(start = -52.99451, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.C_out.P
    (start = 300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h
    (start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P(
    start = 300000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T
    (start = 296.15) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate CEC197_sensor.Qv(
    start = 0.053120352);
  Real CEC197_sensor.Q_lm(start = 3187.2212, nominal = 6000.0);
  Real CEC197_sensor.Q_th(start = 190.78024, nominal = 360.0);
  Real CEC197_sensor.Q_lbs(start = 24.037909, nominal = 45.3592428);
  Real CEC197_sensor.Q_Mlbh(start = 0.42059845, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    AirSource.h_out(start = 28437.334);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    AirSource.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure AirSource.P_out
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate AirSource.Q_out
    (start = -233.84636);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirSource.Qv_out(start = -194.04884);
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirSource.T_out(start = 
    288.15);
  Modelica.Media.Interfaces.Types.AbsolutePressure AirSource.state_out.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirSource.state_out.T(min = 190.0,
     max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirSource.state_out.X[2](start = 
    {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirSource.C_out.Q(start = -233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirSource.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirSource.C_out.h_outflow
    (start = 28437.334);
  Modelica.Media.Interfaces.Types.MassFraction AirSource.C_out.Xi_outflow[1];
  Real AirSource.relative_humidity(start = AirSource.relative_humidity_0, min = 
    0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy sink.h_in(start = 
    39639.684);
  MetroscopeModelingLibrary.Utilities.Units.MassFraction sink.Xi_in[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure sink.P_in(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate sink.Q_in(
    start = 234.97847);
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate sink.Qv_in(
    start = 194.98837);
  MetroscopeModelingLibrary.Utilities.Units.Temperature sink.T_in(start = 
    287.31592);
  Modelica.Media.Interfaces.Types.AbsolutePressure sink.state_in.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature sink.state_in.T(start = 287.31592,
     min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction sink.state_in.X[2](start = {0.01,
     0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate sink.C_in.Q(
    start = 234.97847, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure sink.C_in.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy sink.C_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction sink.C_in.Xi_outflow[1];
  Real sink.relative_humidity(start = sink.relative_humidity_0, min = 0.0, 
    max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.Q(start = 233.84636, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Flow_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.h
    (start = 28437.334) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Flow_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Flow_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirInlet_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.C_in.Q(start = 233.84636, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Flow_sensor.C_out.Q(start = -233.84636, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.C_out.h_outflow
    (start = 28437.334);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.h_in
    (start = 28437.334) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.h_out
    (start = 28437.334) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.flow_model.Q(start = 233.84636) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Flow_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho_in
    (start = 1.2050902) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho_out
    (start = 1.2050902) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Flow_sensor.flow_model.rho
    (start = 1.2050902) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Flow_sensor.flow_model.Qv_in(start = 194.04884) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirInlet_Flow_sensor.flow_model.Qv_out(start = -194.04884) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Flow_sensor.flow_model.Qv(start = 194.04884) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Flow_sensor.flow_model.T_in
    (start = 288.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Flow_sensor.flow_model.T_out
    (start = 288.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Flow_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Flow_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Flow_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Flow_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Flow_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirInlet_Flow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirInlet_Flow_sensor.flow_model.DH(start = AirInlet_Flow_sensor.flow_model.h_out_0
    -AirInlet_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirInlet_Flow_sensor.flow_model.DT(start = AirInlet_Flow_sensor.flow_model.T_out_0
    -AirInlet_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Flow_sensor.flow_model.C_in.Q(start = 233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Flow_sensor.flow_model.C_out.Q(start = -233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.C_out.h_outflow
    (start = 28437.334);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Flow_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Flow_sensor.flow_model.h
    (start = 28437.334) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Flow_sensor.flow_model.P
    (start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Flow_sensor.flow_model.T
    (start = 288.15) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate AirInlet_Flow_sensor.Qv
    (start = 194.04884);
  Real AirInlet_Flow_sensor.Q_lm(start = 11642931.0, nominal = 6000.0);
  Real AirInlet_Flow_sensor.Q_th(start = 841.84686, nominal = 360.0);
  Real AirInlet_Flow_sensor.Q_lbs(start = 106.07094, nominal = 45.3592428);
  Real AirInlet_Flow_sensor.Q_Mlbh(start = 1.8559546, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Temp_sensor.Q(start = 233.84636, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Temp_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.h
    (start = 28437.334) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Temp_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Temp_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Temp_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirInlet_Temp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Temp_sensor.C_in.Q(start = 233.84636, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Temp_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Temp_sensor.C_out.Q(start = -233.84636, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.C_out.h_outflow
    (start = 28437.334);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Temp_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.flow_model.h_in
    (start = 28437.334) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.flow_model.h_out
    (start = 28437.334) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Temp_sensor.flow_model.Q(start = 233.84636) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Temp_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Temp_sensor.flow_model.rho_in
    (start = 1.2050902) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Temp_sensor.flow_model.rho_out
    (start = 1.2050902) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Temp_sensor.flow_model.rho
    (start = 1.2050902) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Temp_sensor.flow_model.Qv_in(start = 194.04884) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirInlet_Temp_sensor.flow_model.Qv_out(start = -194.04884) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Temp_sensor.flow_model.Qv(start = 194.04884) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Temp_sensor.flow_model.T_in
    (start = 288.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Temp_sensor.flow_model.T_out
    (start = 288.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Temp_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Temp_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Temp_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Temp_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Temp_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Temp_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Temp_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirInlet_Temp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirInlet_Temp_sensor.flow_model.DH(start = AirInlet_Temp_sensor.flow_model.h_out_0
    -AirInlet_Temp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirInlet_Temp_sensor.flow_model.DT(start = AirInlet_Temp_sensor.flow_model.T_out_0
    -AirInlet_Temp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Temp_sensor.flow_model.C_in.Q(start = 233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Temp_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Temp_sensor.flow_model.C_out.Q(start = -233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.flow_model.C_out.h_outflow
    (start = 28437.334);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Temp_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Temp_sensor.flow_model.h
    (start = 28437.334) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Temp_sensor.flow_model.P
    (start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Temp_sensor.flow_model.T
    (start = 288.15) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Temp_sensor.T(
    start = 288.15);
  Real AirInlet_Temp_sensor.T_degC(start = 15.0, nominal = 573.15, unit = "degC");
  Real AirInlet_Temp_sensor.T_degF(start = 59.0, nominal = 1063.67, unit = 
    "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.Q(start = 233.84636, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Press_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.h
    (start = 28437.334) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Press_sensor.state.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Press_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirInlet_Press_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.C_in.Q(start = 233.84636, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Press_sensor.C_out.Q(start = -233.84636, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.C_out.h_outflow
    (start = 28437.334);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.h_in
    (start = 28437.334) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.h_out
    (start = 28437.334) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.flow_model.Q(start = 233.84636) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInlet_Press_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho_in
    (start = 1.2050902) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho_out
    (start = 1.2050902) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInlet_Press_sensor.flow_model.rho
    (start = 1.2050902) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Press_sensor.flow_model.Qv_in(start = 194.04884) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirInlet_Press_sensor.flow_model.Qv_out(start = -194.04884) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInlet_Press_sensor.flow_model.Qv(start = 194.04884) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Press_sensor.flow_model.T_in
    (start = 288.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Press_sensor.flow_model.T_out
    (start = 288.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Press_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Press_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInlet_Press_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInlet_Press_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInlet_Press_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirInlet_Press_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirInlet_Press_sensor.flow_model.DH(start = AirInlet_Press_sensor.flow_model.h_out_0
    -AirInlet_Press_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirInlet_Press_sensor.flow_model.DT(start = AirInlet_Press_sensor.flow_model.T_out_0
    -AirInlet_Press_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInlet_Press_sensor.flow_model.C_in.Q(start = 233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInlet_Press_sensor.flow_model.C_out.Q(start = -233.84636, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.C_out.h_outflow
    (start = 28437.334);
  Modelica.Media.Interfaces.Types.MassFraction AirInlet_Press_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInlet_Press_sensor.flow_model.h
    (start = 28437.334) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInlet_Press_sensor.flow_model.P
    (start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInlet_Press_sensor.flow_model.T
    (start = 288.15) "Temperature of the fluid into the component";
  Real AirInlet_Press_sensor.P_barG(start = 0.0, nominal = 100000.0);
  Real AirInlet_Press_sensor.P_psiG(start = 2.623E-05, nominal = 14.5038);
  Real AirInlet_Press_sensor.P_MPaG(start = -2.7755576E-17, nominal = 
    0.09999999999999999);
  Real AirInlet_Press_sensor.P_kPaG(start = -1.4210855E-14, nominal = 100.0);
  Real AirInlet_Press_sensor.P_barA(start = 1.0, nominal = 1.0, unit = "bar");
  Real AirInlet_Press_sensor.P_psiA(start = 14.5038, nominal = 14.5038);
  Real AirInlet_Press_sensor.P_MPaA(start = 0.1, nominal = 0.09999999999999999);
  Real AirInlet_Press_sensor.P_kPaA(start = 100.0, nominal = 100.0);
  Real AirInlet_Press_sensor.P_inHg(start = 29.53006, nominal = 29.530060000000002);
  Real AirInlet_Press_sensor.P_mbar(start = 1000.0, nominal = 1000.0, unit = 
    "mbar");
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    source1.h_out(start = 79312.05);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    source1.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure source1.P_out(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source1.Q_out(
    start = -36.461792);
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    source1.Qv_out(start = -0.036519274);
  MetroscopeModelingLibrary.Utilities.Units.Temperature source1.T_out(start = 
    292.05);
  Modelica.Media.Interfaces.Types.FixedPhase source1.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy source1.state_out.h(start = 
    79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density source1.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature source1.state_out.T(start = 292.05,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure source1.state_out.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source1.C_out.Q
    (start = -36.461792, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure source1.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy source1.C_out.h_outflow
    (start = 79312.05);
  Modelica.Media.Interfaces.Types.MassFraction source1.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h_in(
    start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h_out(
    start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V423_valve.Q(
    start = 17.664837) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_in(start = 
    300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_out(start = 
    100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V423_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_in(start = 
    997.63104) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_out(start = 
    997.52985) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho(start = 
    997.58044) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V423_valve.Qv_in(start = 0.017706783) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V423_valve.Qv_out(start = -0.017708581) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V423_valve.Qv
    (start = 0.017707681) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_in(start = 
    296.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_out(
    start = 296.1949) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V423_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V423_valve.state_in.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V423_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V423_valve.state_in.T(start = 
    296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V423_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V423_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V423_valve.state_out.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V423_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V423_valve.state_out.T(start = 
    296.1949, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V423_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V423_valve.DP(
    start = -200000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power V423_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V423_valve.DH(
    start = V423_valve.h_out_0-V423_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V423_valve.DT(start = V423_valve.T_out_0-V423_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V423_valve.C_in.Q(start = 17.664837, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.C_in.P(start = 
    300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V423_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V423_valve.C_out.Q(start = -17.664837, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction V423_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h(
    start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V423_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V423_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V423_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h_in(
    start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h_out(
    start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V422_valve.Q(
    start = 17.664837) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_in(start = 
    300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_out(start = 
    100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V422_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_in(start = 
    997.63104) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_out(start = 
    997.52985) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho(start = 
    997.58044) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V422_valve.Qv_in(start = 0.017706783) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V422_valve.Qv_out(start = -0.017708581) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V422_valve.Qv
    (start = 0.017707681) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_in(start = 
    296.15) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_out(
    start = 296.1949) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V422_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_valve.state_in.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_valve.state_in.T(start = 
    296.15, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V422_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_valve.state_out.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_valve.state_out.T(start = 
    296.1949, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V422_valve.DP(
    start = -200000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power V422_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V422_valve.DH(
    start = V422_valve.h_out_0-V422_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V422_valve.DT(start = V422_valve.T_out_0-V422_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_valve.C_in.Q(start = 17.664837, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.C_in.P(start = 
    300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V422_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V422_valve.C_out.Q(start = -17.664837, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction V422_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h(
    start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V422_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V422_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V422_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    V423_opening_sensor.Opening_pc(start = V423_opening_sensor.Opening_pc_0, 
    nominal = 15.0, unit = "1");
  Modelica.Blocks.Interfaces.RealOutput V423_opening_sensor.Opening(start = 
    V423_opening_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0,
     max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    V422_opening_sensor.Opening_pc(start = V422_opening_sensor.Opening_pc_0, 
    nominal = 15.0, unit = "1");
  Modelica.Blocks.Interfaces.RealOutput V422_opening_sensor.Opening(start = 
    V422_opening_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0,
     max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.Q(start = 35.329674, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.P(start = 
    100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.h(
    start = 96653.73) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_sensor.state.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_sensor.state.T(start = 
    296.1949, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_reject_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.C_in.Q(start = 35.329674, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.C_in.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_sensor.C_out.Q(start = -35.329674, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.C_out.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.h_in
    (start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.h_out
    (start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.flow_model.Q(start = 35.329674) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho_in
    (start = 997.52985) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho_out
    (start = 997.52985) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_sensor.flow_model.rho
    (start = 997.52985) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_sensor.flow_model.Qv_in(start = 0.035417162) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_reject_sensor.flow_model.Qv_out(start = -0.035417162) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_sensor.flow_model.Qv(start = 0.035417162) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_sensor.flow_model.T_in
    (start = 296.1949) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_sensor.flow_model.T_out
    (start = 296.1949) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_sensor.flow_model.state_in.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_sensor.flow_model.state_in.T
    (start = 296.1949, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_sensor.flow_model.state_out.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_sensor.flow_model.state_out.T
    (start = 296.1949, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_reject_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_reject_sensor.flow_model.DH(start = Q_reject_sensor.flow_model.h_out_0-
    Q_reject_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_reject_sensor.flow_model.DT(start = Q_reject_sensor.flow_model.T_out_0-
    Q_reject_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_sensor.flow_model.C_in.Q(start = 35.329674, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_sensor.flow_model.C_out.Q(start = -35.329674, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_sensor.flow_model.h
    (start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_sensor.flow_model.P
    (start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_sensor.flow_model.T
    (start = 296.1949) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Q_reject_sensor.Qv(
    start = 0.035417162);
  Real Q_reject_sensor.Q_lm(start = 2125.0295, nominal = 6000.0);
  Real Q_reject_sensor.Q_th(start = 127.18683, nominal = 360.0);
  Real Q_reject_sensor.Q_lbs(start = 16.025272, nominal = 45.3592428);
  Real Q_reject_sensor.Q_Mlbh(start = 0.28039896, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.Q(start = 35.329674, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_press_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.h
    (start = 96653.73) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.state.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.state.T(
    start = 296.1949, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_reject_press_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.C_in.Q(start = 35.329674, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_press_sensor.C_out.Q(start = -35.329674, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h_in
    (start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h_out
    (start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.Q(start = 35.329674) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_press_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_in
    (start = 997.52985) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_out
    (start = 997.52985) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho
    (start = 997.52985) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv_in(start = 0.035417162) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv_out(start = -0.035417162) 
    "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv(start = 0.035417162) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T_in
    (start = 296.1949) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T_out
    (start = 296.1949) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.flow_model.state_in.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.flow_model.state_in.T
    (start = 296.1949, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.flow_model.state_out.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.flow_model.state_out.T
    (start = 296.1949, nominal = 500.0, min = 273.15, max = 2273.15) 
    "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_press_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_reject_press_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_reject_press_sensor.flow_model.DH(start = Q_reject_press_sensor.flow_model.h_out_0
    -Q_reject_press_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_reject_press_sensor.flow_model.DT(start = Q_reject_press_sensor.flow_model.T_out_0
    -Q_reject_press_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.C_in.Q(start = 35.329674, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_press_sensor.flow_model.C_out.Q(start = -35.329674, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h
    (start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P
    (start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T
    (start = 296.1949) "Temperature of the fluid into the component";
  Real Q_reject_press_sensor.P_barG(start = 0.0, nominal = 100000.0);
  Real Q_reject_press_sensor.P_psiG(start = 2.623E-05, nominal = 14.5038);
  Real Q_reject_press_sensor.P_MPaG(start = -2.7755576E-17, nominal = 
    0.09999999999999999);
  Real Q_reject_press_sensor.P_kPaG(start = -1.4210855E-14, nominal = 100.0);
  Real Q_reject_press_sensor.P_barA(start = 1.0, nominal = 1.0, unit = "bar");
  Real Q_reject_press_sensor.P_psiA(start = 14.5038, nominal = 14.5038);
  Real Q_reject_press_sensor.P_MPaA(start = 0.1, nominal = 0.09999999999999999);
  Real Q_reject_press_sensor.P_kPaA(start = 100.0, nominal = 100.0);
  Real Q_reject_press_sensor.P_inHg(start = 29.53006, nominal = 29.530060000000002);
  Real Q_reject_press_sensor.P_mbar(start = 1000.0, nominal = 1000.0, unit = 
    "mbar");
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.h_in(start = 
    84971.695) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.h_out(start = 
    79920.64) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Pump.Q(start = 
    54.12663) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_in(start = 100000.0)
     "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_out(start = 300000.0)
     "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Pump.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_in(start = 998.1531)
     "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_out(start = 
    998.4982) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho(start = 998.3256) 
    "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate Pump.Qv_in(
    start = 0.054226782) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate Pump.Qv_out(
    start = -0.054208037) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate Pump.Qv(
    start = 0.05421741) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_in(start = 
    293.4026) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_out(start = 
    292.15) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Pump.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Pump.state_in.h(start = 
    84971.695, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Pump.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Pump.state_in.T(start = 293.4026, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Pump.state_in.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Pump.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Pump.state_out.h(start = 
    79920.64, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Pump.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Pump.state_out.T(start = 292.15, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Pump.state_out.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure Pump.DP(
    start = 200000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Pump.W(start = 0, nominal = 
    1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy Pump.DH(
    start = Pump.h_out_0-Pump.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature Pump.DT(
    start = Pump.T_out_0-Pump.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Pump.C_in.Q(
    start = 54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.C_in.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Pump.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate Pump.C_out.Q(
    start = -54.12663, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.C_out.P(start = 
    300000.0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.C_out.h_outflow
    (start = 79920.64);
  Modelica.Media.Interfaces.Types.MassFraction Pump.C_out.Xi_outflow[0];
  Real Pump.VRotn(start = 1400, nominal = 2000.0, min = 0.0) "Nominal rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.a1(start = 0) 
    "x^2 coef. of the pump characteristics hn = f(vol_flow) (s2/m5)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.a2(start = 0) 
    "x coef. of the pump characteristics hn = f(vol_flow) (s/m2)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputHeight Pump.a3(start = 10)
     "Constant coef. of the pump characteristics hn = f(vol_flow) (m)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.b1(start = 0) 
    "x^2 coef. of the pump efficiency characteristics rh = f(vol_flow) (s2/m6)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.b2(start = 0) 
    "x coef. of the pump efficiency characteristics rh = f(vol_flow) (s/m3)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.b3(start = 
    0.8) "Constant coef. of the pump efficiency characteristics rh = f(vol_flow) (s.u.)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.rm(start = 
    0.85) "Product of the pump mechanical and electrical efficiencies";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.rh_min(
    start = 0.2) "Minimum efficiency to avoid zero crossings";
  MetroscopeModelingLibrary.Utilities.Units.Yield Pump.rh "Hydraulic efficiency";
  MetroscopeModelingLibrary.Utilities.Units.Height Pump.hn(start = 10) 
    "Pump head";
  MetroscopeModelingLibrary.Utilities.Units.Fraction Pump.R(start = 1) 
    "Reduced rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.Power Pump.Wh "Hydraulic power";
  MetroscopeModelingLibrary.Utilities.Units.PositivePower Pump.Wm 
    "Mechanical power";
  Modelica.Blocks.Interfaces.RealInput Pump.VRot "Pump rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.PositivePower Pump.C_power.W;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC180_sensor.Q
    (start = 36.461792, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC180_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.P(start = 
    100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.h(
    start = 79312.05) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC180_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC180_sensor.state.h(
    start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC180_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC180_sensor.state.T(start = 
    500.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC180_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC180_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC180_sensor.C_in.Q(start = 36.461792, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.C_in.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC180_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC180_sensor.C_out.Q(start = -36.461792, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.C_out.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.C_out.h_outflow
    (start = 79312.05);
  Modelica.Media.Interfaces.Types.MassFraction CEC180_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.flow_model.h_in
    (start = 79312.05) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.flow_model.h_out
    (start = 79312.05) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC180_sensor.flow_model.Q(start = 36.461792) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC180_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC180_sensor.flow_model.rho_in
    (start = 998.0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC180_sensor.flow_model.rho_out
    (start = 998.0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC180_sensor.flow_model.rho
    (start = 998.0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC180_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC180_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC180_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC180_sensor.flow_model.T_in
    (start = 292.05) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC180_sensor.flow_model.T_out
     "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC180_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC180_sensor.flow_model.state_in.h
    (start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC180_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC180_sensor.flow_model.state_in.T
    (start = 292.05, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC180_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC180_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC180_sensor.flow_model.state_out.h
    (start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC180_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC180_sensor.flow_model.state_out.T
    (start = 300.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC180_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC180_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC180_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC180_sensor.flow_model.DH(start = CEC180_sensor.flow_model.h_out_0-
    CEC180_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC180_sensor.flow_model.DT(start = CEC180_sensor.flow_model.T_out_0-
    CEC180_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC180_sensor.flow_model.C_in.Q(start = 36.461792, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC180_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC180_sensor.flow_model.C_out.Q(start = -36.461792, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.flow_model.C_out.h_outflow
    (start = 79312.05);
  Modelica.Media.Interfaces.Types.MassFraction CEC180_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC180_sensor.flow_model.h
    (start = 79312.05) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC180_sensor.flow_model.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC180_sensor.flow_model.T
    (start = 292.05) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC180_sensor.T(start = 
    292.05);
  Real CEC180_sensor.T_degC(start = 18.9, nominal = 573.15, unit = "degC");
  Real CEC180_sensor.T_degF(start = 1063.67, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Press1_sensor.Q
    (start = 36.461792, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press1_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.P(start = 
    100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.h(
    start = 79312.05) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.state.h(
    start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.state.T(start = 
    500.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Press1_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.C_in.Q(start = 36.461792, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.C_in.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press1_sensor.C_out.Q(start = -36.461792, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.C_out.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.C_out.h_outflow
    (start = 79312.05);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h_in
    (start = 79312.05) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h_out
    (start = 79312.05) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.Q(start = 36.461792) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press1_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_in
    (start = 998.0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_out
    (start = 998.0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho
    (start = 998.0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press1_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Press1_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press1_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T_in
     "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T_out
     "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.flow_model.state_in.h
    (start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.flow_model.state_in.T
    (start = 300.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.flow_model.state_out.h
    (start = 79312.05, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.flow_model.state_out.T
    (start = 300.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press1_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Press1_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Press1_sensor.flow_model.DH(start = Press1_sensor.flow_model.h_out_0-
    Press1_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Press1_sensor.flow_model.DT(start = Press1_sensor.flow_model.T_out_0-
    Press1_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.C_in.Q(start = 36.461792, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press1_sensor.flow_model.C_out.Q(start = -36.461792, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.C_out.h_outflow
    (start = 79312.05);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h
    (start = 79312.05) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T
     "Temperature of the fluid into the component";
  Real Press1_sensor.P_barG(start = 0.0, nominal = 100000.0);
  Real Press1_sensor.P_psiG(start = 2.623E-05, nominal = 14.5038);
  Real Press1_sensor.P_MPaG(start = -1.3877788E-17, nominal = 0.09999999999999999);
  Real Press1_sensor.P_kPaG(start = 0.0, nominal = 100.0);
  Real Press1_sensor.P_barA(start = 1.0, nominal = 1.0, unit = "bar");
  Real Press1_sensor.P_psiA(start = 14.5038, nominal = 14.5038);
  Real Press1_sensor.P_MPaA(start = 0.1, nominal = 0.09999999999999999);
  Real Press1_sensor.P_kPaA(start = 100.0, nominal = 100.0);
  Real Press1_sensor.P_inHg(start = 29.53006, nominal = 29.530060000000002);
  Real Press1_sensor.P_mbar(start = 1000.0, nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.NegativePower source.W_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativePower source.C_out.W;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h_in(
    start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h_out(
    start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V421_valve.Q(
    start = 17.664837) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_in(start = 
    300000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_out(start = 
    100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V421_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_in(start = 
    997.63104) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_out(start = 
    997.52985) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho(start = 998.0)
     "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V421_valve.Qv_in(start = 0.017706783) "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V421_valve.Qv_out(start = -0.017708581) "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V421_valve.Qv
    (start = 0.017707681) "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_in 
    "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_out 
    "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V421_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V421_valve.state_in.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V421_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V421_valve.state_in.T(start = 
    300.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V421_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V421_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V421_valve.state_out.h(
    start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V421_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V421_valve.state_out.T(start = 
    300.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V421_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V421_valve.DP(
    start = -200000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power V421_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V421_valve.DH(
    start = V421_valve.h_out_0-V421_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V421_valve.DT(start = V421_valve.T_out_0-V421_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V421_valve.C_in.Q(start = 17.664837, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.C_in.P(start = 
    300000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction V421_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V421_valve.C_out.Q(start = -17.664837, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction V421_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h(
    start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V421_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V421_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V421_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    V421_opening_sensor.Opening_pc(start = V421_opening_sensor.Opening_pc_0, 
    nominal = 15.0, unit = "1");
  Modelica.Blocks.Interfaces.RealOutput V421_opening_sensor.Opening(start = 
    V421_opening_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0,
     max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.Q(start = 17.664837, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_recirculation_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.P(
    start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.h
    (start = 96653.73) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.state.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.state.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.state.T(
    start = 500.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_recirculation_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.C_in.Q(start = 17.664837, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_recirculation_sensor.C_out.Q(start = -17.664837, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h_in
    (start = 96653.73) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h_out
    (start = 96653.73) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.Q(start = 17.664837) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_in
    (start = 100000.0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_out
    (start = 100000.0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_recirculation_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_in
    (start = 998.0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_out
    (start = 998.0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho
    (start = 998.0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T_in
     "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T_out
     "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.flow_model.state_in.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.flow_model.state_in.T
    (start = 300.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.flow_model.state_out.h
    (start = 96653.73, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.flow_model.state_out.T
    (start = 300.0, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_recirculation_sensor.flow_model.DP(start = 0.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_recirculation_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_recirculation_sensor.flow_model.DH(start = Q_recirculation_sensor.flow_model.h_out_0
    -Q_recirculation_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_recirculation_sensor.flow_model.DT(start = Q_recirculation_sensor.flow_model.T_out_0
    -Q_recirculation_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.C_in.Q(start = 17.664837, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.C_in.h_outflow
    (start = 1000000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_recirculation_sensor.flow_model.C_out.Q(start = -17.664837, nominal = 
    500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.C_out.h_outflow
    (start = 96653.73);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h
    (start = 96653.73) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P
    (start = 100000.0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T
     "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Q_recirculation_sensor.Qv
    (start = 0.017708581);
  Real Q_recirculation_sensor.Q_lm(start = 6000.0, nominal = 6000.0);
  Real Q_recirculation_sensor.Q_th(start = 360.0, nominal = 360.0);
  Real Q_recirculation_sensor.Q_lbs(start = 45.35924, nominal = 45.3592428);
  Real Q_recirculation_sensor.Q_Mlbh(start = 0.79366416, nominal = 0.79366414387);

// Equations and algorithms

  // Component cooling_sink
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      cooling_sink.C_in.P = cooling_sink.P_in;
      cooling_sink.C_in.Q = cooling_sink.Q_in;
      inStream(cooling_sink.C_in.h_outflow) = cooling_sink.h_in;
      inStream(cooling_sink.C_in.Xi_outflow) = cooling_sink.Xi_in;
      cooling_sink.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (cooling_sink.P_in, cooling_sink.h_in, cooling_sink.Xi_in, 0, 0);
      cooling_sink.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        cooling_sink.state_in);
      cooling_sink.Qv_in = cooling_sink.Q_in/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        cooling_sink.state_in);
      cooling_sink.C_in.h_outflow = 0;
      cooling_sink.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component turbine_outlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      turbine_outlet.C_out.P = turbine_outlet.P_out;
      turbine_outlet.C_out.Q = turbine_outlet.Q_out;
      turbine_outlet.C_out.h_outflow = turbine_outlet.h_out;
      turbine_outlet.C_out.Xi_outflow = turbine_outlet.Xi_out;
      turbine_outlet.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (turbine_outlet.P_out, turbine_outlet.h_out, turbine_outlet.Xi_out, 0, 0);
      turbine_outlet.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        turbine_outlet.state_out);
      turbine_outlet.Qv_out = turbine_outlet.Q_out/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        turbine_outlet.state_out);
    // end of extends 

  // Component condensate_sink
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      condensate_sink.C_in.P = condensate_sink.P_in;
      condensate_sink.C_in.Q = condensate_sink.Q_in;
      inStream(condensate_sink.C_in.h_outflow) = condensate_sink.h_in;
      inStream(condensate_sink.C_in.Xi_outflow) = condensate_sink.Xi_in;
      condensate_sink.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (condensate_sink.P_in, condensate_sink.h_in, condensate_sink.Xi_in, 0, 0);
      condensate_sink.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        condensate_sink.state_in);
      condensate_sink.Qv_in = condensate_sink.Q_in/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        condensate_sink.state_in);
      condensate_sink.C_in.h_outflow = 0;
      condensate_sink.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component LOA.cold_side_pipe
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.Pipe
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.cold_side_pipe.h_in = inStream(LOA.cold_side_pipe.C_in.h_outflow);
      LOA.cold_side_pipe.h_out = LOA.cold_side_pipe.C_out.h_outflow;
      LOA.cold_side_pipe.Q = LOA.cold_side_pipe.C_in.Q;
      LOA.cold_side_pipe.P_in = LOA.cold_side_pipe.C_in.P;
      LOA.cold_side_pipe.P_out = LOA.cold_side_pipe.C_out.P;
      LOA.cold_side_pipe.Xi = inStream(LOA.cold_side_pipe.C_in.Xi_outflow);
      LOA.cold_side_pipe.C_in.h_outflow = 1000000.0;
      LOA.cold_side_pipe.C_in.Xi_outflow = zeros(0);
      LOA.cold_side_pipe.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side_pipe.P_in, LOA.cold_side_pipe.h_in, LOA.cold_side_pipe.Xi,
         0, 0);
      LOA.cold_side_pipe.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side_pipe.P_out, LOA.cold_side_pipe.h_out, LOA.cold_side_pipe.Xi,
         0, 0);
      LOA.cold_side_pipe.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side_pipe.state_in);
      LOA.cold_side_pipe.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side_pipe.state_out);
      LOA.cold_side_pipe.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.cold_side_pipe.state_in);
      LOA.cold_side_pipe.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.cold_side_pipe.state_out);
      LOA.cold_side_pipe.rho = (LOA.cold_side_pipe.rho_in+LOA.cold_side_pipe.rho_out)
        /2;
      LOA.cold_side_pipe.Qv_in = LOA.cold_side_pipe.Q/LOA.cold_side_pipe.rho_in;
      LOA.cold_side_pipe.Qv_out =  -LOA.cold_side_pipe.Q/LOA.cold_side_pipe.rho_out;
      LOA.cold_side_pipe.Qv = (LOA.cold_side_pipe.Qv_in-LOA.cold_side_pipe.Qv_out)
        /2;
      LOA.cold_side_pipe.P_out-LOA.cold_side_pipe.P_in = LOA.cold_side_pipe.DP;
      LOA.cold_side_pipe.Q*(LOA.cold_side_pipe.h_out-LOA.cold_side_pipe.h_in) = 
        LOA.cold_side_pipe.W;
      LOA.cold_side_pipe.h_out-LOA.cold_side_pipe.h_in = LOA.cold_side_pipe.DH;
      LOA.cold_side_pipe.T_out-LOA.cold_side_pipe.T_in = LOA.cold_side_pipe.DT;
      LOA.cold_side_pipe.C_in.Q+LOA.cold_side_pipe.C_out.Q = 0;
      LOA.cold_side_pipe.C_out.Xi_outflow = inStream(LOA.cold_side_pipe.C_in.Xi_outflow);
      assert(LOA.cold_side_pipe.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.cold_side_pipe.h = LOA.cold_side_pipe.h_in;
      LOA.cold_side_pipe.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.Pipe
    equation
      if ( not LOA.cold_side_pipe.faulty) then 
        LOA.cold_side_pipe.fouling = 0;
      end if;
      LOA.cold_side_pipe.DP_f =  -(1+LOA.cold_side_pipe.fouling/100)*
        LOA.cold_side_pipe.Kfr*LOA.cold_side_pipe.Q*abs(LOA.cold_side_pipe.Q)/
        LOA.cold_side_pipe.rho_in;
      LOA.cold_side_pipe.DP_z =  -LOA.cold_side_pipe.rho_in*9.80665*
        LOA.cold_side_pipe.delta_z;
      LOA.cold_side_pipe.DP = LOA.cold_side_pipe.DP_f+LOA.cold_side_pipe.DP_z;
    // end of extends 

  // Component LOA.hot_side
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.hot_side.h_in = inStream(LOA.hot_side.C_in.h_outflow);
      LOA.hot_side.h_out = LOA.hot_side.C_out.h_outflow;
      LOA.hot_side.Q = LOA.hot_side.C_in.Q;
      LOA.hot_side.P_in = LOA.hot_side.C_in.P;
      LOA.hot_side.P_out = LOA.hot_side.C_out.P;
      LOA.hot_side.Xi = inStream(LOA.hot_side.C_in.Xi_outflow);
      LOA.hot_side.C_in.h_outflow = 1000000.0;
      LOA.hot_side.C_in.Xi_outflow = zeros(0);
      LOA.hot_side.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.hot_side.P_in, LOA.hot_side.h_in, LOA.hot_side.Xi, 0, 0);
      LOA.hot_side.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.hot_side.P_out, LOA.hot_side.h_out, LOA.hot_side.Xi, 0, 0);
      LOA.hot_side.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        LOA.hot_side.state_in);
      LOA.hot_side.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.hot_side.state_out);
      LOA.hot_side.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.hot_side.state_in);
      LOA.hot_side.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.hot_side.state_out);
      LOA.hot_side.rho = (LOA.hot_side.rho_in+LOA.hot_side.rho_out)/2;
      LOA.hot_side.Qv_in = LOA.hot_side.Q/LOA.hot_side.rho_in;
      LOA.hot_side.Qv_out =  -LOA.hot_side.Q/LOA.hot_side.rho_out;
      LOA.hot_side.Qv = (LOA.hot_side.Qv_in-LOA.hot_side.Qv_out)/2;
      LOA.hot_side.P_out-LOA.hot_side.P_in = LOA.hot_side.DP;
      LOA.hot_side.Q*(LOA.hot_side.h_out-LOA.hot_side.h_in) = LOA.hot_side.W;
      LOA.hot_side.h_out-LOA.hot_side.h_in = LOA.hot_side.DH;
      LOA.hot_side.T_out-LOA.hot_side.T_in = LOA.hot_side.DT;
      LOA.hot_side.C_in.Q+LOA.hot_side.C_out.Q = 0;
      LOA.hot_side.C_out.Xi_outflow = inStream(LOA.hot_side.C_in.Xi_outflow);
      assert(LOA.hot_side.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPFlowModel
    equation
      LOA.hot_side.P = LOA.hot_side.P_in;
      LOA.hot_side.DP = 0;
    // end of extends 
  equation
    LOA.hot_side.W = LOA.hot_side.W_input;

  // Component LOA.cold_side
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.cold_side.h_in = inStream(LOA.cold_side.C_in.h_outflow);
      LOA.cold_side.h_out = LOA.cold_side.C_out.h_outflow;
      LOA.cold_side.Q = LOA.cold_side.C_in.Q;
      LOA.cold_side.P_in = LOA.cold_side.C_in.P;
      LOA.cold_side.P_out = LOA.cold_side.C_out.P;
      LOA.cold_side.Xi = inStream(LOA.cold_side.C_in.Xi_outflow);
      LOA.cold_side.C_in.h_outflow = 1000000.0;
      LOA.cold_side.C_in.Xi_outflow = zeros(0);
      LOA.cold_side.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side.P_in, LOA.cold_side.h_in, LOA.cold_side.Xi, 0, 0);
      LOA.cold_side.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.cold_side.P_out, LOA.cold_side.h_out, LOA.cold_side.Xi, 0, 0);
      LOA.cold_side.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side.state_in);
      LOA.cold_side.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.cold_side.state_out);
      LOA.cold_side.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.cold_side.state_in);
      LOA.cold_side.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        LOA.cold_side.state_out);
      LOA.cold_side.rho = (LOA.cold_side.rho_in+LOA.cold_side.rho_out)/2;
      LOA.cold_side.Qv_in = LOA.cold_side.Q/LOA.cold_side.rho_in;
      LOA.cold_side.Qv_out =  -LOA.cold_side.Q/LOA.cold_side.rho_out;
      LOA.cold_side.Qv = (LOA.cold_side.Qv_in-LOA.cold_side.Qv_out)/2;
      LOA.cold_side.P_out-LOA.cold_side.P_in = LOA.cold_side.DP;
      LOA.cold_side.Q*(LOA.cold_side.h_out-LOA.cold_side.h_in) = LOA.cold_side.W;
      LOA.cold_side.h_out-LOA.cold_side.h_in = LOA.cold_side.DH;
      LOA.cold_side.T_out-LOA.cold_side.T_in = LOA.cold_side.DT;
      LOA.cold_side.C_in.Q+LOA.cold_side.C_out.Q = 0;
      LOA.cold_side.C_out.Xi_outflow = inStream(LOA.cold_side.C_in.Xi_outflow);
      assert(LOA.cold_side.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPFlowModel
    equation
      LOA.cold_side.P = LOA.cold_side.P_in;
      LOA.cold_side.DP = 0;
    // end of extends 
  equation
    LOA.cold_side.W = LOA.cold_side.W_input;

  // Component LOA.water_height_pipe
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.Pipe
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.water_height_pipe.h_in = inStream(LOA.water_height_pipe.C_in.h_outflow);
      LOA.water_height_pipe.h_out = LOA.water_height_pipe.C_out.h_outflow;
      LOA.water_height_pipe.Q = LOA.water_height_pipe.C_in.Q;
      LOA.water_height_pipe.P_in = LOA.water_height_pipe.C_in.P;
      LOA.water_height_pipe.P_out = LOA.water_height_pipe.C_out.P;
      LOA.water_height_pipe.Xi = inStream(LOA.water_height_pipe.C_in.Xi_outflow);
      LOA.water_height_pipe.C_in.h_outflow = 1000000.0;
      LOA.water_height_pipe.C_in.Xi_outflow = zeros(0);
      LOA.water_height_pipe.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.water_height_pipe.P_in, LOA.water_height_pipe.h_in, 
        LOA.water_height_pipe.Xi, 0, 0);
      LOA.water_height_pipe.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.water_height_pipe.P_out, LOA.water_height_pipe.h_out, 
        LOA.water_height_pipe.Xi, 0, 0);
      LOA.water_height_pipe.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.water_height_pipe.state_in);
      LOA.water_height_pipe.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.water_height_pipe.state_out);
      LOA.water_height_pipe.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.water_height_pipe.state_in);
      LOA.water_height_pipe.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.water_height_pipe.state_out);
      LOA.water_height_pipe.rho = (LOA.water_height_pipe.rho_in+LOA.water_height_pipe.rho_out)
        /2;
      LOA.water_height_pipe.Qv_in = LOA.water_height_pipe.Q/LOA.water_height_pipe.rho_in;
      LOA.water_height_pipe.Qv_out =  -LOA.water_height_pipe.Q/LOA.water_height_pipe.rho_out;
      LOA.water_height_pipe.Qv = (LOA.water_height_pipe.Qv_in-LOA.water_height_pipe.Qv_out)
        /2;
      LOA.water_height_pipe.P_out-LOA.water_height_pipe.P_in = LOA.water_height_pipe.DP;
      LOA.water_height_pipe.Q*(LOA.water_height_pipe.h_out-LOA.water_height_pipe.h_in)
         = LOA.water_height_pipe.W;
      LOA.water_height_pipe.h_out-LOA.water_height_pipe.h_in = LOA.water_height_pipe.DH;
      LOA.water_height_pipe.T_out-LOA.water_height_pipe.T_in = LOA.water_height_pipe.DT;
      LOA.water_height_pipe.C_in.Q+LOA.water_height_pipe.C_out.Q = 0;
      LOA.water_height_pipe.C_out.Xi_outflow = inStream(LOA.water_height_pipe.C_in.Xi_outflow);
      assert(LOA.water_height_pipe.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.water_height_pipe.h = LOA.water_height_pipe.h_in;
      LOA.water_height_pipe.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.Pipe
    equation
      if ( not LOA.water_height_pipe.faulty) then 
        LOA.water_height_pipe.fouling = 0;
      end if;
      LOA.water_height_pipe.DP_f =  -(1+LOA.water_height_pipe.fouling/100)*
        LOA.water_height_pipe.Kfr*LOA.water_height_pipe.Q*abs(LOA.water_height_pipe.Q)
        /LOA.water_height_pipe.rho_in;
      LOA.water_height_pipe.DP_z =  -LOA.water_height_pipe.rho_in*9.80665*
        LOA.water_height_pipe.delta_z;
      LOA.water_height_pipe.DP = LOA.water_height_pipe.DP_f+LOA.water_height_pipe.DP_z;
    // end of extends 

  // Component LOA.incondensables_in
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.incondensables_in.h_in = inStream(LOA.incondensables_in.C_in.h_outflow);
      LOA.incondensables_in.h_out = LOA.incondensables_in.C_out.h_outflow;
      LOA.incondensables_in.Q = LOA.incondensables_in.C_in.Q;
      LOA.incondensables_in.P_in = LOA.incondensables_in.C_in.P;
      LOA.incondensables_in.P_out = LOA.incondensables_in.C_out.P;
      LOA.incondensables_in.Xi = inStream(LOA.incondensables_in.C_in.Xi_outflow);
      LOA.incondensables_in.C_in.h_outflow = 1000000.0;
      LOA.incondensables_in.C_in.Xi_outflow = zeros(0);
      LOA.incondensables_in.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_in.P_in, LOA.incondensables_in.h_in, 
        LOA.incondensables_in.Xi, 0, 0);
      LOA.incondensables_in.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_in.P_out, LOA.incondensables_in.h_out, 
        LOA.incondensables_in.Xi, 0, 0);
      LOA.incondensables_in.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_in.state_in);
      LOA.incondensables_in.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_in.state_out);
      LOA.incondensables_in.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_in.state_in);
      LOA.incondensables_in.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_in.state_out);
      LOA.incondensables_in.rho = (LOA.incondensables_in.rho_in+LOA.incondensables_in.rho_out)
        /2;
      LOA.incondensables_in.Qv_in = LOA.incondensables_in.Q/LOA.incondensables_in.rho_in;
      LOA.incondensables_in.Qv_out =  -LOA.incondensables_in.Q/LOA.incondensables_in.rho_out;
      LOA.incondensables_in.Qv = (LOA.incondensables_in.Qv_in-LOA.incondensables_in.Qv_out)
        /2;
      LOA.incondensables_in.P_out-LOA.incondensables_in.P_in = LOA.incondensables_in.DP;
      LOA.incondensables_in.Q*(LOA.incondensables_in.h_out-LOA.incondensables_in.h_in)
         = LOA.incondensables_in.W;
      LOA.incondensables_in.h_out-LOA.incondensables_in.h_in = LOA.incondensables_in.DH;
      LOA.incondensables_in.T_out-LOA.incondensables_in.T_in = LOA.incondensables_in.DT;
      LOA.incondensables_in.C_in.Q+LOA.incondensables_in.C_out.Q = 0;
      LOA.incondensables_in.C_out.Xi_outflow = inStream(LOA.incondensables_in.C_in.Xi_outflow);
      assert(LOA.incondensables_in.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.incondensables_in.h = LOA.incondensables_in.h_in;
      LOA.incondensables_in.DH = 0;
    // end of extends 
  equation
    LOA.incondensables_in.DP = LOA.incondensables_in.DP_input;

  // Component LOA.incondensables_out
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      LOA.incondensables_out.h_in = inStream(LOA.incondensables_out.C_in.h_outflow);
      LOA.incondensables_out.h_out = LOA.incondensables_out.C_out.h_outflow;
      LOA.incondensables_out.Q = LOA.incondensables_out.C_in.Q;
      LOA.incondensables_out.P_in = LOA.incondensables_out.C_in.P;
      LOA.incondensables_out.P_out = LOA.incondensables_out.C_out.P;
      LOA.incondensables_out.Xi = inStream(LOA.incondensables_out.C_in.Xi_outflow);
      LOA.incondensables_out.C_in.h_outflow = 1000000.0;
      LOA.incondensables_out.C_in.Xi_outflow = zeros(0);
      LOA.incondensables_out.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_out.P_in, LOA.incondensables_out.h_in, 
        LOA.incondensables_out.Xi, 0, 0);
      LOA.incondensables_out.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (LOA.incondensables_out.P_out, LOA.incondensables_out.h_out, 
        LOA.incondensables_out.Xi, 0, 0);
      LOA.incondensables_out.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_out.state_in);
      LOA.incondensables_out.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        LOA.incondensables_out.state_out);
      LOA.incondensables_out.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_out.state_in);
      LOA.incondensables_out.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        LOA.incondensables_out.state_out);
      LOA.incondensables_out.rho = (LOA.incondensables_out.rho_in+
        LOA.incondensables_out.rho_out)/2;
      LOA.incondensables_out.Qv_in = LOA.incondensables_out.Q/LOA.incondensables_out.rho_in;
      LOA.incondensables_out.Qv_out =  -LOA.incondensables_out.Q/
        LOA.incondensables_out.rho_out;
      LOA.incondensables_out.Qv = (LOA.incondensables_out.Qv_in-LOA.incondensables_out.Qv_out)
        /2;
      LOA.incondensables_out.P_out-LOA.incondensables_out.P_in = 
        LOA.incondensables_out.DP;
      LOA.incondensables_out.Q*(LOA.incondensables_out.h_out-LOA.incondensables_out.h_in)
         = LOA.incondensables_out.W;
      LOA.incondensables_out.h_out-LOA.incondensables_out.h_in = 
        LOA.incondensables_out.DH;
      LOA.incondensables_out.T_out-LOA.incondensables_out.T_in = 
        LOA.incondensables_out.DT;
      LOA.incondensables_out.C_in.Q+LOA.incondensables_out.C_out.Q = 0;
      LOA.incondensables_out.C_out.Xi_outflow = inStream(LOA.incondensables_out.C_in.Xi_outflow);
      assert(LOA.incondensables_out.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      LOA.incondensables_out.h = LOA.incondensables_out.h_in;
      LOA.incondensables_out.DH = 0;
    // end of extends 
  equation
    LOA.incondensables_out.DP = LOA.incondensables_out.DP_input;

  // Component LOA
  // class MetroscopeModelingLibrary.WaterSteam.HeatExchangers.Condenser
  equation
    if ( not LOA.faulty) then 
      LOA.fouling = 0;
      LOA.air_intake = 0;
      LOA.Qv_cold_in_decrease = 0;
    end if;
    LOA.Q_cold = LOA.cold_side.Q;
    LOA.T_cold_in = LOA.cold_side.T_in;
    LOA.T_cold_out = LOA.cold_side.T_out;
    LOA.cold_side.Qv = LOA.Qv_cold_in*(1-LOA.Qv_cold_in_decrease/100);
    LOA.Q_hot = LOA.hot_side.Q;
    LOA.T_hot_in = LOA.hot_side.T_in;
    LOA.T_hot_out = LOA.hot_side.T_out;
    LOA.cold_side.W = LOA.W;
    LOA.P_tot = LOA.incondensables_in.P_in;
    LOA.hot_side.W+LOA.cold_side.W = 0;
    LOA.cold_side_pipe.delta_z = 0;
    LOA.cold_side_pipe.Kfr = LOA.Kfr_cold;
    LOA.water_height_pipe.delta_z =  -LOA.water_height;
    LOA.water_height_pipe.Kfr = 0;
    LOA.water_height_pipe.DP = LOA.water_height_DP;
    LOA.P_incond = LOA.P_offset+LOA.R*(LOA.C_incond+LOA.air_intake)*LOA.Tsat;
    LOA.incondensables_in.DP =  -LOA.P_incond;
    LOA.incondensables_out.DP = LOA.P_incond;
    assert(LOA.T_hot_in-LOA.Tsat < 0.1, "The steam admitted in the condenser in superheated",
       AssertionLevel.warning);
    LOA.Psat = LOA.hot_side.P_in;
    LOA.Tsat = Modelica.Media.Water.WaterIF97_ph.saturationTemperature_Unique9(
      LOA.Psat);
    LOA.hot_side.h_out = Modelica.Media.Water.WaterIF97_ph.bubbleEnthalpy_Unique7
      (
      Modelica.Media.Water.WaterIF97_ph.setSat_p_Unique8(LOA.Psat));
    0 = LOA.Tsat-LOA.T_cold_out-(LOA.Tsat-LOA.T_cold_in)*exp(LOA.Kth*(1-
      LOA.fouling/100)*LOA.S*((LOA.T_cold_in-LOA.T_cold_out)/LOA.W));
    LOA.cold_side_pipe.C_in.P = LOA.C_cold_in.P;
    LOA.C_cold_in.Q-LOA.cold_side_pipe.C_in.Q = 0.0;
    LOA.cold_side.C_out.P = LOA.C_cold_out.P;
    LOA.C_cold_out.Q-LOA.cold_side.C_out.Q = 0.0;
    LOA.incondensables_in.C_in.P = LOA.C_hot_in.P;
    LOA.C_hot_in.Q-LOA.incondensables_in.C_in.Q = 0.0;
    LOA.water_height_pipe.C_out.P = LOA.C_hot_out.P;
    LOA.C_hot_out.Q-LOA.water_height_pipe.C_out.Q = 0.0;
    LOA.cold_side_pipe.C_out.P = LOA.cold_side.C_in.P;
    LOA.cold_side.C_in.Q+LOA.cold_side_pipe.C_out.Q = 0.0;
    LOA.incondensables_in.C_out.P = LOA.hot_side.C_in.P;
    LOA.hot_side.C_in.Q+LOA.incondensables_in.C_out.Q = 0.0;
    LOA.incondensables_out.C_in.P = LOA.hot_side.C_out.P;
    LOA.hot_side.C_out.Q+LOA.incondensables_out.C_in.Q = 0.0;
    LOA.water_height_pipe.C_in.P = LOA.incondensables_out.C_out.P;
    LOA.incondensables_out.C_out.Q+LOA.water_height_pipe.C_in.Q = 0.0;

  // Component VCT178_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      VCT178_sensor.flow_model.h_in = inStream(VCT178_sensor.flow_model.C_in.h_outflow);
      VCT178_sensor.flow_model.h_out = VCT178_sensor.flow_model.C_out.h_outflow;
      VCT178_sensor.flow_model.Q = VCT178_sensor.flow_model.C_in.Q;
      VCT178_sensor.flow_model.P_in = VCT178_sensor.flow_model.C_in.P;
      VCT178_sensor.flow_model.P_out = VCT178_sensor.flow_model.C_out.P;
      VCT178_sensor.flow_model.Xi = inStream(VCT178_sensor.flow_model.C_in.Xi_outflow);
      VCT178_sensor.flow_model.C_in.h_outflow = 1000000.0;
      VCT178_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      VCT178_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (VCT178_sensor.flow_model.P_in, VCT178_sensor.flow_model.h_in, 
        VCT178_sensor.flow_model.Xi, 0, 0);
      VCT178_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (VCT178_sensor.flow_model.P_out, VCT178_sensor.flow_model.h_out, 
        VCT178_sensor.flow_model.Xi, 0, 0);
      VCT178_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        VCT178_sensor.flow_model.state_in);
      VCT178_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        VCT178_sensor.flow_model.state_out);
      VCT178_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        VCT178_sensor.flow_model.state_in);
      VCT178_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        VCT178_sensor.flow_model.state_out);
      VCT178_sensor.flow_model.rho = (VCT178_sensor.flow_model.rho_in+
        VCT178_sensor.flow_model.rho_out)/2;
      VCT178_sensor.flow_model.Qv_in = VCT178_sensor.flow_model.Q/
        VCT178_sensor.flow_model.rho_in;
      VCT178_sensor.flow_model.Qv_out =  -VCT178_sensor.flow_model.Q/
        VCT178_sensor.flow_model.rho_out;
      VCT178_sensor.flow_model.Qv = (VCT178_sensor.flow_model.Qv_in-
        VCT178_sensor.flow_model.Qv_out)/2;
      VCT178_sensor.flow_model.P_out-VCT178_sensor.flow_model.P_in = 
        VCT178_sensor.flow_model.DP;
      VCT178_sensor.flow_model.Q*(VCT178_sensor.flow_model.h_out-
        VCT178_sensor.flow_model.h_in) = VCT178_sensor.flow_model.W;
      VCT178_sensor.flow_model.h_out-VCT178_sensor.flow_model.h_in = 
        VCT178_sensor.flow_model.DH;
      VCT178_sensor.flow_model.T_out-VCT178_sensor.flow_model.T_in = 
        VCT178_sensor.flow_model.DT;
      VCT178_sensor.flow_model.C_in.Q+VCT178_sensor.flow_model.C_out.Q = 0;
      VCT178_sensor.flow_model.C_out.Xi_outflow = inStream(VCT178_sensor.flow_model.C_in.Xi_outflow);
      assert(VCT178_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      VCT178_sensor.flow_model.P = VCT178_sensor.flow_model.P_in;
      VCT178_sensor.flow_model.h = VCT178_sensor.flow_model.h_in;
      VCT178_sensor.flow_model.T = VCT178_sensor.flow_model.T_in;
      VCT178_sensor.flow_model.DP = 0;
      VCT178_sensor.flow_model.DH = 0;
    // end of extends 

  // Component VCT178_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not VCT178_sensor.faulty_flow_rate) then 
        VCT178_sensor.mass_flow_rate_bias = 0;
      end if;
      VCT178_sensor.P = VCT178_sensor.C_in.P;
      VCT178_sensor.Q = VCT178_sensor.C_in.Q+VCT178_sensor.mass_flow_rate_bias;
      VCT178_sensor.Xi = inStream(VCT178_sensor.C_in.Xi_outflow);
      VCT178_sensor.h = inStream(VCT178_sensor.C_in.h_outflow);
      VCT178_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (VCT178_sensor.P, VCT178_sensor.h, VCT178_sensor.Xi, 0, 0);
      assert(VCT178_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      VCT178_sensor.P_barA = VCT178_sensor.P*1E-05;
      VCT178_sensor.P_psiA = VCT178_sensor.P*0.000145038;
      VCT178_sensor.P_MPaA = VCT178_sensor.P*1E-06;
      VCT178_sensor.P_kPaA = VCT178_sensor.P*0.001;
      VCT178_sensor.P_barG = VCT178_sensor.P_barA-1;
      VCT178_sensor.P_psiG = VCT178_sensor.P_psiA-14.50377377;
      VCT178_sensor.P_MPaG = VCT178_sensor.P_MPaA-0.1;
      VCT178_sensor.P_kPaG = VCT178_sensor.P_kPaA-100;
      VCT178_sensor.P_mbar = VCT178_sensor.P*0.01;
      VCT178_sensor.P_inHg = VCT178_sensor.P*0.0002953006;
    // end of extends 
  equation
    VCT178_sensor.flow_model.C_in.P = VCT178_sensor.C_in.P;
    VCT178_sensor.C_in.Q-VCT178_sensor.flow_model.C_in.Q = 0.0;
    VCT178_sensor.flow_model.C_out.P = VCT178_sensor.C_out.P;
    VCT178_sensor.C_out.Q-VCT178_sensor.flow_model.C_out.Q = 0.0;

  // Component Hotside_Temp_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Hotside_Temp_sensor.flow_model.h_in = inStream(Hotside_Temp_sensor.flow_model.C_in.h_outflow);
      Hotside_Temp_sensor.flow_model.h_out = Hotside_Temp_sensor.flow_model.C_out.h_outflow;
      Hotside_Temp_sensor.flow_model.Q = Hotside_Temp_sensor.flow_model.C_in.Q;
      Hotside_Temp_sensor.flow_model.P_in = Hotside_Temp_sensor.flow_model.C_in.P;
      Hotside_Temp_sensor.flow_model.P_out = Hotside_Temp_sensor.flow_model.C_out.P;
      Hotside_Temp_sensor.flow_model.Xi = inStream(Hotside_Temp_sensor.flow_model.C_in.Xi_outflow);
      Hotside_Temp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Hotside_Temp_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Hotside_Temp_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Temp_sensor.flow_model.P_in, Hotside_Temp_sensor.flow_model.h_in,
         Hotside_Temp_sensor.flow_model.Xi, 0, 0);
      Hotside_Temp_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Temp_sensor.flow_model.P_out, Hotside_Temp_sensor.flow_model.h_out,
         Hotside_Temp_sensor.flow_model.Xi, 0, 0);
      Hotside_Temp_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Temp_sensor.flow_model.state_in);
      Hotside_Temp_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Temp_sensor.flow_model.state_out);
      Hotside_Temp_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Temp_sensor.flow_model.state_in);
      Hotside_Temp_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Temp_sensor.flow_model.state_out);
      Hotside_Temp_sensor.flow_model.rho = (Hotside_Temp_sensor.flow_model.rho_in
        +Hotside_Temp_sensor.flow_model.rho_out)/2;
      Hotside_Temp_sensor.flow_model.Qv_in = Hotside_Temp_sensor.flow_model.Q/
        Hotside_Temp_sensor.flow_model.rho_in;
      Hotside_Temp_sensor.flow_model.Qv_out =  -Hotside_Temp_sensor.flow_model.Q
        /Hotside_Temp_sensor.flow_model.rho_out;
      Hotside_Temp_sensor.flow_model.Qv = (Hotside_Temp_sensor.flow_model.Qv_in-
        Hotside_Temp_sensor.flow_model.Qv_out)/2;
      Hotside_Temp_sensor.flow_model.P_out-Hotside_Temp_sensor.flow_model.P_in
         = Hotside_Temp_sensor.flow_model.DP;
      Hotside_Temp_sensor.flow_model.Q*(Hotside_Temp_sensor.flow_model.h_out-
        Hotside_Temp_sensor.flow_model.h_in) = Hotside_Temp_sensor.flow_model.W;
      Hotside_Temp_sensor.flow_model.h_out-Hotside_Temp_sensor.flow_model.h_in
         = Hotside_Temp_sensor.flow_model.DH;
      Hotside_Temp_sensor.flow_model.T_out-Hotside_Temp_sensor.flow_model.T_in
         = Hotside_Temp_sensor.flow_model.DT;
      Hotside_Temp_sensor.flow_model.C_in.Q+Hotside_Temp_sensor.flow_model.C_out.Q
         = 0;
      Hotside_Temp_sensor.flow_model.C_out.Xi_outflow = inStream(
        Hotside_Temp_sensor.flow_model.C_in.Xi_outflow);
      assert(Hotside_Temp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Hotside_Temp_sensor.flow_model.P = Hotside_Temp_sensor.flow_model.P_in;
      Hotside_Temp_sensor.flow_model.h = Hotside_Temp_sensor.flow_model.h_in;
      Hotside_Temp_sensor.flow_model.T = Hotside_Temp_sensor.flow_model.T_in;
      Hotside_Temp_sensor.flow_model.DP = 0;
      Hotside_Temp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Hotside_Temp_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Hotside_Temp_sensor.faulty_flow_rate) then 
        Hotside_Temp_sensor.mass_flow_rate_bias = 0;
      end if;
      Hotside_Temp_sensor.P = Hotside_Temp_sensor.C_in.P;
      Hotside_Temp_sensor.Q = Hotside_Temp_sensor.C_in.Q+Hotside_Temp_sensor.mass_flow_rate_bias;
      Hotside_Temp_sensor.Xi = inStream(Hotside_Temp_sensor.C_in.Xi_outflow);
      Hotside_Temp_sensor.h = inStream(Hotside_Temp_sensor.C_in.h_outflow);
      Hotside_Temp_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Temp_sensor.P, Hotside_Temp_sensor.h, Hotside_Temp_sensor.Xi, 0,
         0);
      assert(Hotside_Temp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      Hotside_Temp_sensor.T = Hotside_Temp_sensor.flow_model.T;
      Hotside_Temp_sensor.T_degC+273.15 = Hotside_Temp_sensor.T;
      Hotside_Temp_sensor.T_degF = Hotside_Temp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    Hotside_Temp_sensor.flow_model.C_in.P = Hotside_Temp_sensor.C_in.P;
    Hotside_Temp_sensor.C_in.Q-Hotside_Temp_sensor.flow_model.C_in.Q = 0.0;
    Hotside_Temp_sensor.flow_model.C_out.P = Hotside_Temp_sensor.C_out.P;
    Hotside_Temp_sensor.C_out.Q-Hotside_Temp_sensor.flow_model.C_out.Q = 0.0;

  // Component Hotside_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Hotside_Flow_sensor.flow_model.h_in = inStream(Hotside_Flow_sensor.flow_model.C_in.h_outflow);
      Hotside_Flow_sensor.flow_model.h_out = Hotside_Flow_sensor.flow_model.C_out.h_outflow;
      Hotside_Flow_sensor.flow_model.Q = Hotside_Flow_sensor.flow_model.C_in.Q;
      Hotside_Flow_sensor.flow_model.P_in = Hotside_Flow_sensor.flow_model.C_in.P;
      Hotside_Flow_sensor.flow_model.P_out = Hotside_Flow_sensor.flow_model.C_out.P;
      Hotside_Flow_sensor.flow_model.Xi = inStream(Hotside_Flow_sensor.flow_model.C_in.Xi_outflow);
      Hotside_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Hotside_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Hotside_Flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Flow_sensor.flow_model.P_in, Hotside_Flow_sensor.flow_model.h_in,
         Hotside_Flow_sensor.flow_model.Xi, 0, 0);
      Hotside_Flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Flow_sensor.flow_model.P_out, Hotside_Flow_sensor.flow_model.h_out,
         Hotside_Flow_sensor.flow_model.Xi, 0, 0);
      Hotside_Flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Flow_sensor.flow_model.state_in);
      Hotside_Flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Hotside_Flow_sensor.flow_model.state_out);
      Hotside_Flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Flow_sensor.flow_model.state_in);
      Hotside_Flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Flow_sensor.flow_model.state_out);
      Hotside_Flow_sensor.flow_model.rho = (Hotside_Flow_sensor.flow_model.rho_in
        +Hotside_Flow_sensor.flow_model.rho_out)/2;
      Hotside_Flow_sensor.flow_model.Qv_in = Hotside_Flow_sensor.flow_model.Q/
        Hotside_Flow_sensor.flow_model.rho_in;
      Hotside_Flow_sensor.flow_model.Qv_out =  -Hotside_Flow_sensor.flow_model.Q
        /Hotside_Flow_sensor.flow_model.rho_out;
      Hotside_Flow_sensor.flow_model.Qv = (Hotside_Flow_sensor.flow_model.Qv_in-
        Hotside_Flow_sensor.flow_model.Qv_out)/2;
      Hotside_Flow_sensor.flow_model.P_out-Hotside_Flow_sensor.flow_model.P_in
         = Hotside_Flow_sensor.flow_model.DP;
      Hotside_Flow_sensor.flow_model.Q*(Hotside_Flow_sensor.flow_model.h_out-
        Hotside_Flow_sensor.flow_model.h_in) = Hotside_Flow_sensor.flow_model.W;
      Hotside_Flow_sensor.flow_model.h_out-Hotside_Flow_sensor.flow_model.h_in
         = Hotside_Flow_sensor.flow_model.DH;
      Hotside_Flow_sensor.flow_model.T_out-Hotside_Flow_sensor.flow_model.T_in
         = Hotside_Flow_sensor.flow_model.DT;
      Hotside_Flow_sensor.flow_model.C_in.Q+Hotside_Flow_sensor.flow_model.C_out.Q
         = 0;
      Hotside_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(
        Hotside_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(Hotside_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Hotside_Flow_sensor.flow_model.P = Hotside_Flow_sensor.flow_model.P_in;
      Hotside_Flow_sensor.flow_model.h = Hotside_Flow_sensor.flow_model.h_in;
      Hotside_Flow_sensor.flow_model.T = Hotside_Flow_sensor.flow_model.T_in;
      Hotside_Flow_sensor.flow_model.DP = 0;
      Hotside_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Hotside_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Hotside_Flow_sensor.faulty_flow_rate) then 
        Hotside_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      Hotside_Flow_sensor.P = Hotside_Flow_sensor.C_in.P;
      Hotside_Flow_sensor.Q = Hotside_Flow_sensor.C_in.Q+Hotside_Flow_sensor.mass_flow_rate_bias;
      Hotside_Flow_sensor.Xi = inStream(Hotside_Flow_sensor.C_in.Xi_outflow);
      Hotside_Flow_sensor.h = inStream(Hotside_Flow_sensor.C_in.h_outflow);
      Hotside_Flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Hotside_Flow_sensor.P, Hotside_Flow_sensor.h, Hotside_Flow_sensor.Xi, 0,
         0);
      assert(Hotside_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Hotside_Flow_sensor.Qv = Hotside_Flow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Hotside_Flow_sensor.state);
      Hotside_Flow_sensor.Q_lm = Hotside_Flow_sensor.Qv*60000;
      Hotside_Flow_sensor.Q_th = Hotside_Flow_sensor.Q*3.6;
      Hotside_Flow_sensor.Q_lbs = Hotside_Flow_sensor.Q*0.453592428;
      Hotside_Flow_sensor.Q_Mlbh = Hotside_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Hotside_Flow_sensor.flow_model.C_in.P = Hotside_Flow_sensor.C_in.P;
    Hotside_Flow_sensor.C_in.Q-Hotside_Flow_sensor.flow_model.C_in.Q = 0.0;
    Hotside_Flow_sensor.flow_model.C_out.P = Hotside_Flow_sensor.C_out.P;
    Hotside_Flow_sensor.C_out.Q-Hotside_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component Coldside_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Coldside_Flow_sensor.flow_model.h_in = inStream(Coldside_Flow_sensor.flow_model.C_in.h_outflow);
      Coldside_Flow_sensor.flow_model.h_out = Coldside_Flow_sensor.flow_model.C_out.h_outflow;
      Coldside_Flow_sensor.flow_model.Q = Coldside_Flow_sensor.flow_model.C_in.Q;
      Coldside_Flow_sensor.flow_model.P_in = Coldside_Flow_sensor.flow_model.C_in.P;
      Coldside_Flow_sensor.flow_model.P_out = Coldside_Flow_sensor.flow_model.C_out.P;
      Coldside_Flow_sensor.flow_model.Xi = inStream(Coldside_Flow_sensor.flow_model.C_in.Xi_outflow);
      Coldside_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Coldside_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Coldside_Flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Flow_sensor.flow_model.P_in, Coldside_Flow_sensor.flow_model.h_in,
         Coldside_Flow_sensor.flow_model.Xi, 0, 0);
      Coldside_Flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Flow_sensor.flow_model.P_out, Coldside_Flow_sensor.flow_model.h_out,
         Coldside_Flow_sensor.flow_model.Xi, 0, 0);
      Coldside_Flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Flow_sensor.flow_model.state_in);
      Coldside_Flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Flow_sensor.flow_model.state_out);
      Coldside_Flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Flow_sensor.flow_model.state_in);
      Coldside_Flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Flow_sensor.flow_model.state_out);
      Coldside_Flow_sensor.flow_model.rho = (Coldside_Flow_sensor.flow_model.rho_in
        +Coldside_Flow_sensor.flow_model.rho_out)/2;
      Coldside_Flow_sensor.flow_model.Qv_in = Coldside_Flow_sensor.flow_model.Q/
        Coldside_Flow_sensor.flow_model.rho_in;
      Coldside_Flow_sensor.flow_model.Qv_out =  -Coldside_Flow_sensor.flow_model.Q
        /Coldside_Flow_sensor.flow_model.rho_out;
      Coldside_Flow_sensor.flow_model.Qv = (Coldside_Flow_sensor.flow_model.Qv_in
        -Coldside_Flow_sensor.flow_model.Qv_out)/2;
      Coldside_Flow_sensor.flow_model.P_out-Coldside_Flow_sensor.flow_model.P_in
         = Coldside_Flow_sensor.flow_model.DP;
      Coldside_Flow_sensor.flow_model.Q*(Coldside_Flow_sensor.flow_model.h_out-
        Coldside_Flow_sensor.flow_model.h_in) = Coldside_Flow_sensor.flow_model.W;
      Coldside_Flow_sensor.flow_model.h_out-Coldside_Flow_sensor.flow_model.h_in
         = Coldside_Flow_sensor.flow_model.DH;
      Coldside_Flow_sensor.flow_model.T_out-Coldside_Flow_sensor.flow_model.T_in
         = Coldside_Flow_sensor.flow_model.DT;
      Coldside_Flow_sensor.flow_model.C_in.Q+Coldside_Flow_sensor.flow_model.C_out.Q
         = 0;
      Coldside_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(
        Coldside_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(Coldside_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Coldside_Flow_sensor.flow_model.P = Coldside_Flow_sensor.flow_model.P_in;
      Coldside_Flow_sensor.flow_model.h = Coldside_Flow_sensor.flow_model.h_in;
      Coldside_Flow_sensor.flow_model.T = Coldside_Flow_sensor.flow_model.T_in;
      Coldside_Flow_sensor.flow_model.DP = 0;
      Coldside_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Coldside_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Coldside_Flow_sensor.faulty_flow_rate) then 
        Coldside_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      Coldside_Flow_sensor.P = Coldside_Flow_sensor.C_in.P;
      Coldside_Flow_sensor.Q = Coldside_Flow_sensor.C_in.Q+Coldside_Flow_sensor.mass_flow_rate_bias;
      Coldside_Flow_sensor.Xi = inStream(Coldside_Flow_sensor.C_in.Xi_outflow);
      Coldside_Flow_sensor.h = inStream(Coldside_Flow_sensor.C_in.h_outflow);
      Coldside_Flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Flow_sensor.P, Coldside_Flow_sensor.h, Coldside_Flow_sensor.Xi,
         0, 0);
      assert(Coldside_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Coldside_Flow_sensor.Qv = Coldside_Flow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Flow_sensor.state);
      Coldside_Flow_sensor.Q_lm = Coldside_Flow_sensor.Qv*60000;
      Coldside_Flow_sensor.Q_th = Coldside_Flow_sensor.Q*3.6;
      Coldside_Flow_sensor.Q_lbs = Coldside_Flow_sensor.Q*0.453592428;
      Coldside_Flow_sensor.Q_Mlbh = Coldside_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Coldside_Flow_sensor.flow_model.C_in.P = Coldside_Flow_sensor.C_in.P;
    Coldside_Flow_sensor.C_in.Q-Coldside_Flow_sensor.flow_model.C_in.Q = 0.0;
    Coldside_Flow_sensor.flow_model.C_out.P = Coldside_Flow_sensor.C_out.P;
    Coldside_Flow_sensor.C_out.Q-Coldside_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component CEC231_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC231_sensor.flow_model.h_in = inStream(CEC231_sensor.flow_model.C_in.h_outflow);
      CEC231_sensor.flow_model.h_out = CEC231_sensor.flow_model.C_out.h_outflow;
      CEC231_sensor.flow_model.Q = CEC231_sensor.flow_model.C_in.Q;
      CEC231_sensor.flow_model.P_in = CEC231_sensor.flow_model.C_in.P;
      CEC231_sensor.flow_model.P_out = CEC231_sensor.flow_model.C_out.P;
      CEC231_sensor.flow_model.Xi = inStream(CEC231_sensor.flow_model.C_in.Xi_outflow);
      CEC231_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC231_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC231_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC231_sensor.flow_model.P_in, CEC231_sensor.flow_model.h_in, 
        CEC231_sensor.flow_model.Xi, 0, 0);
      CEC231_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC231_sensor.flow_model.P_out, CEC231_sensor.flow_model.h_out, 
        CEC231_sensor.flow_model.Xi, 0, 0);
      CEC231_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC231_sensor.flow_model.state_in);
      CEC231_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC231_sensor.flow_model.state_out);
      CEC231_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC231_sensor.flow_model.state_in);
      CEC231_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC231_sensor.flow_model.state_out);
      CEC231_sensor.flow_model.rho = (CEC231_sensor.flow_model.rho_in+
        CEC231_sensor.flow_model.rho_out)/2;
      CEC231_sensor.flow_model.Qv_in = CEC231_sensor.flow_model.Q/
        CEC231_sensor.flow_model.rho_in;
      CEC231_sensor.flow_model.Qv_out =  -CEC231_sensor.flow_model.Q/
        CEC231_sensor.flow_model.rho_out;
      CEC231_sensor.flow_model.Qv = (CEC231_sensor.flow_model.Qv_in-
        CEC231_sensor.flow_model.Qv_out)/2;
      CEC231_sensor.flow_model.P_out-CEC231_sensor.flow_model.P_in = 
        CEC231_sensor.flow_model.DP;
      CEC231_sensor.flow_model.Q*(CEC231_sensor.flow_model.h_out-
        CEC231_sensor.flow_model.h_in) = CEC231_sensor.flow_model.W;
      CEC231_sensor.flow_model.h_out-CEC231_sensor.flow_model.h_in = 
        CEC231_sensor.flow_model.DH;
      CEC231_sensor.flow_model.T_out-CEC231_sensor.flow_model.T_in = 
        CEC231_sensor.flow_model.DT;
      CEC231_sensor.flow_model.C_in.Q+CEC231_sensor.flow_model.C_out.Q = 0;
      CEC231_sensor.flow_model.C_out.Xi_outflow = inStream(CEC231_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC231_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC231_sensor.flow_model.P = CEC231_sensor.flow_model.P_in;
      CEC231_sensor.flow_model.h = CEC231_sensor.flow_model.h_in;
      CEC231_sensor.flow_model.T = CEC231_sensor.flow_model.T_in;
      CEC231_sensor.flow_model.DP = 0;
      CEC231_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC231_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC231_sensor.faulty_flow_rate) then 
        CEC231_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC231_sensor.P = CEC231_sensor.C_in.P;
      CEC231_sensor.Q = CEC231_sensor.C_in.Q+CEC231_sensor.mass_flow_rate_bias;
      CEC231_sensor.Xi = inStream(CEC231_sensor.C_in.Xi_outflow);
      CEC231_sensor.h = inStream(CEC231_sensor.C_in.h_outflow);
      CEC231_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC231_sensor.P, CEC231_sensor.h, CEC231_sensor.Xi, 0, 0);
      assert(CEC231_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC231_sensor.T = CEC231_sensor.flow_model.T;
      CEC231_sensor.T_degC+273.15 = CEC231_sensor.T;
      CEC231_sensor.T_degF = CEC231_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC231_sensor.flow_model.C_in.P = CEC231_sensor.C_in.P;
    CEC231_sensor.C_in.Q-CEC231_sensor.flow_model.C_in.Q = 0.0;
    CEC231_sensor.flow_model.C_out.P = CEC231_sensor.C_out.P;
    CEC231_sensor.C_out.Q-CEC231_sensor.flow_model.C_out.Q = 0.0;

  // Component Coldside_Press_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Coldside_Press_sensor.flow_model.h_in = inStream(Coldside_Press_sensor.flow_model.C_in.h_outflow);
      Coldside_Press_sensor.flow_model.h_out = Coldside_Press_sensor.flow_model.C_out.h_outflow;
      Coldside_Press_sensor.flow_model.Q = Coldside_Press_sensor.flow_model.C_in.Q;
      Coldside_Press_sensor.flow_model.P_in = Coldside_Press_sensor.flow_model.C_in.P;
      Coldside_Press_sensor.flow_model.P_out = Coldside_Press_sensor.flow_model.C_out.P;
      Coldside_Press_sensor.flow_model.Xi = inStream(Coldside_Press_sensor.flow_model.C_in.Xi_outflow);
      Coldside_Press_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Coldside_Press_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Coldside_Press_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Press_sensor.flow_model.P_in, Coldside_Press_sensor.flow_model.h_in,
         Coldside_Press_sensor.flow_model.Xi, 0, 0);
      Coldside_Press_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Press_sensor.flow_model.P_out, Coldside_Press_sensor.flow_model.h_out,
         Coldside_Press_sensor.flow_model.Xi, 0, 0);
      Coldside_Press_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Press_sensor.flow_model.state_in);
      Coldside_Press_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Coldside_Press_sensor.flow_model.state_out);
      Coldside_Press_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Press_sensor.flow_model.state_in);
      Coldside_Press_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Coldside_Press_sensor.flow_model.state_out);
      Coldside_Press_sensor.flow_model.rho = (Coldside_Press_sensor.flow_model.rho_in
        +Coldside_Press_sensor.flow_model.rho_out)/2;
      Coldside_Press_sensor.flow_model.Qv_in = Coldside_Press_sensor.flow_model.Q
        /Coldside_Press_sensor.flow_model.rho_in;
      Coldside_Press_sensor.flow_model.Qv_out =  -Coldside_Press_sensor.flow_model.Q
        /Coldside_Press_sensor.flow_model.rho_out;
      Coldside_Press_sensor.flow_model.Qv = (Coldside_Press_sensor.flow_model.Qv_in
        -Coldside_Press_sensor.flow_model.Qv_out)/2;
      Coldside_Press_sensor.flow_model.P_out-Coldside_Press_sensor.flow_model.P_in
         = Coldside_Press_sensor.flow_model.DP;
      Coldside_Press_sensor.flow_model.Q*(Coldside_Press_sensor.flow_model.h_out
        -Coldside_Press_sensor.flow_model.h_in) = Coldside_Press_sensor.flow_model.W;
      Coldside_Press_sensor.flow_model.h_out-Coldside_Press_sensor.flow_model.h_in
         = Coldside_Press_sensor.flow_model.DH;
      Coldside_Press_sensor.flow_model.T_out-Coldside_Press_sensor.flow_model.T_in
         = Coldside_Press_sensor.flow_model.DT;
      Coldside_Press_sensor.flow_model.C_in.Q+Coldside_Press_sensor.flow_model.C_out.Q
         = 0;
      Coldside_Press_sensor.flow_model.C_out.Xi_outflow = inStream(
        Coldside_Press_sensor.flow_model.C_in.Xi_outflow);
      assert(Coldside_Press_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Coldside_Press_sensor.flow_model.P = Coldside_Press_sensor.flow_model.P_in;
      Coldside_Press_sensor.flow_model.h = Coldside_Press_sensor.flow_model.h_in;
      Coldside_Press_sensor.flow_model.T = Coldside_Press_sensor.flow_model.T_in;
      Coldside_Press_sensor.flow_model.DP = 0;
      Coldside_Press_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Coldside_Press_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Coldside_Press_sensor.faulty_flow_rate) then 
        Coldside_Press_sensor.mass_flow_rate_bias = 0;
      end if;
      Coldside_Press_sensor.P = Coldside_Press_sensor.C_in.P;
      Coldside_Press_sensor.Q = Coldside_Press_sensor.C_in.Q+Coldside_Press_sensor.mass_flow_rate_bias;
      Coldside_Press_sensor.Xi = inStream(Coldside_Press_sensor.C_in.Xi_outflow);
      Coldside_Press_sensor.h = inStream(Coldside_Press_sensor.C_in.h_outflow);
      Coldside_Press_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Coldside_Press_sensor.P, Coldside_Press_sensor.h, Coldside_Press_sensor.Xi,
         0, 0);
      assert(Coldside_Press_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Coldside_Press_sensor.P_barA = Coldside_Press_sensor.P*1E-05;
      Coldside_Press_sensor.P_psiA = Coldside_Press_sensor.P*0.000145038;
      Coldside_Press_sensor.P_MPaA = Coldside_Press_sensor.P*1E-06;
      Coldside_Press_sensor.P_kPaA = Coldside_Press_sensor.P*0.001;
      Coldside_Press_sensor.P_barG = Coldside_Press_sensor.P_barA-1;
      Coldside_Press_sensor.P_psiG = Coldside_Press_sensor.P_psiA-14.50377377;
      Coldside_Press_sensor.P_MPaG = Coldside_Press_sensor.P_MPaA-0.1;
      Coldside_Press_sensor.P_kPaG = Coldside_Press_sensor.P_kPaA-100;
      Coldside_Press_sensor.P_mbar = Coldside_Press_sensor.P*0.01;
      Coldside_Press_sensor.P_inHg = Coldside_Press_sensor.P*0.0002953006;
    // end of extends 
  equation
    Coldside_Press_sensor.flow_model.C_in.P = Coldside_Press_sensor.C_in.P;
    Coldside_Press_sensor.C_in.Q-Coldside_Press_sensor.flow_model.C_in.Q = 0.0;
    Coldside_Press_sensor.flow_model.C_out.P = Coldside_Press_sensor.C_out.P;
    Coldside_Press_sensor.C_out.Q-Coldside_Press_sensor.flow_model.C_out.Q = 0.0;

  // Component CEC235_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC235_sensor.flow_model.h_in = inStream(CEC235_sensor.flow_model.C_in.h_outflow);
      CEC235_sensor.flow_model.h_out = CEC235_sensor.flow_model.C_out.h_outflow;
      CEC235_sensor.flow_model.Q = CEC235_sensor.flow_model.C_in.Q;
      CEC235_sensor.flow_model.P_in = CEC235_sensor.flow_model.C_in.P;
      CEC235_sensor.flow_model.P_out = CEC235_sensor.flow_model.C_out.P;
      CEC235_sensor.flow_model.Xi = inStream(CEC235_sensor.flow_model.C_in.Xi_outflow);
      CEC235_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC235_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC235_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC235_sensor.flow_model.P_in, CEC235_sensor.flow_model.h_in, 
        CEC235_sensor.flow_model.Xi, 0, 0);
      CEC235_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC235_sensor.flow_model.P_out, CEC235_sensor.flow_model.h_out, 
        CEC235_sensor.flow_model.Xi, 0, 0);
      CEC235_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC235_sensor.flow_model.state_in);
      CEC235_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC235_sensor.flow_model.state_out);
      CEC235_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC235_sensor.flow_model.state_in);
      CEC235_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC235_sensor.flow_model.state_out);
      CEC235_sensor.flow_model.rho = (CEC235_sensor.flow_model.rho_in+
        CEC235_sensor.flow_model.rho_out)/2;
      CEC235_sensor.flow_model.Qv_in = CEC235_sensor.flow_model.Q/
        CEC235_sensor.flow_model.rho_in;
      CEC235_sensor.flow_model.Qv_out =  -CEC235_sensor.flow_model.Q/
        CEC235_sensor.flow_model.rho_out;
      CEC235_sensor.flow_model.Qv = (CEC235_sensor.flow_model.Qv_in-
        CEC235_sensor.flow_model.Qv_out)/2;
      CEC235_sensor.flow_model.P_out-CEC235_sensor.flow_model.P_in = 
        CEC235_sensor.flow_model.DP;
      CEC235_sensor.flow_model.Q*(CEC235_sensor.flow_model.h_out-
        CEC235_sensor.flow_model.h_in) = CEC235_sensor.flow_model.W;
      CEC235_sensor.flow_model.h_out-CEC235_sensor.flow_model.h_in = 
        CEC235_sensor.flow_model.DH;
      CEC235_sensor.flow_model.T_out-CEC235_sensor.flow_model.T_in = 
        CEC235_sensor.flow_model.DT;
      CEC235_sensor.flow_model.C_in.Q+CEC235_sensor.flow_model.C_out.Q = 0;
      CEC235_sensor.flow_model.C_out.Xi_outflow = inStream(CEC235_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC235_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC235_sensor.flow_model.P = CEC235_sensor.flow_model.P_in;
      CEC235_sensor.flow_model.h = CEC235_sensor.flow_model.h_in;
      CEC235_sensor.flow_model.T = CEC235_sensor.flow_model.T_in;
      CEC235_sensor.flow_model.DP = 0;
      CEC235_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC235_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC235_sensor.faulty_flow_rate) then 
        CEC235_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC235_sensor.P = CEC235_sensor.C_in.P;
      CEC235_sensor.Q = CEC235_sensor.C_in.Q+CEC235_sensor.mass_flow_rate_bias;
      CEC235_sensor.Xi = inStream(CEC235_sensor.C_in.Xi_outflow);
      CEC235_sensor.h = inStream(CEC235_sensor.C_in.h_outflow);
      CEC235_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC235_sensor.P, CEC235_sensor.h, CEC235_sensor.Xi, 0, 0);
      assert(CEC235_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC235_sensor.T = CEC235_sensor.flow_model.T;
      CEC235_sensor.T_degC+273.15 = CEC235_sensor.T;
      CEC235_sensor.T_degF = CEC235_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC235_sensor.flow_model.C_in.P = CEC235_sensor.C_in.P;
    CEC235_sensor.C_in.Q-CEC235_sensor.flow_model.C_in.Q = 0.0;
    CEC235_sensor.flow_model.C_out.P = CEC235_sensor.C_out.P;
    CEC235_sensor.C_out.Q-CEC235_sensor.flow_model.C_out.Q = 0.0;

  // Component CoolingTower.water_inlet_flow
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.water_inlet_flow.h_in = inStream(CoolingTower.water_inlet_flow.C_in.h_outflow);
      CoolingTower.water_inlet_flow.h_out = CoolingTower.water_inlet_flow.C_out.h_outflow;
      CoolingTower.water_inlet_flow.Q = CoolingTower.water_inlet_flow.C_in.Q;
      CoolingTower.water_inlet_flow.P_in = CoolingTower.water_inlet_flow.C_in.P;
      CoolingTower.water_inlet_flow.P_out = CoolingTower.water_inlet_flow.C_out.P;
      CoolingTower.water_inlet_flow.Xi = inStream(CoolingTower.water_inlet_flow.C_in.Xi_outflow);
      CoolingTower.water_inlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.water_inlet_flow.C_in.Xi_outflow = zeros(0);
      CoolingTower.water_inlet_flow.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet_flow.P_in, CoolingTower.water_inlet_flow.h_in,
         CoolingTower.water_inlet_flow.Xi, 0, 0);
      CoolingTower.water_inlet_flow.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet_flow.P_out, CoolingTower.water_inlet_flow.h_out,
         CoolingTower.water_inlet_flow.Xi, 0, 0);
      CoolingTower.water_inlet_flow.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet_flow.state_in);
      CoolingTower.water_inlet_flow.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet_flow.state_out);
      CoolingTower.water_inlet_flow.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_inlet_flow.state_in);
      CoolingTower.water_inlet_flow.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_inlet_flow.state_out);
      CoolingTower.water_inlet_flow.rho = (CoolingTower.water_inlet_flow.rho_in+
        CoolingTower.water_inlet_flow.rho_out)/2;
      CoolingTower.water_inlet_flow.Qv_in = CoolingTower.water_inlet_flow.Q/
        CoolingTower.water_inlet_flow.rho_in;
      CoolingTower.water_inlet_flow.Qv_out =  -CoolingTower.water_inlet_flow.Q/
        CoolingTower.water_inlet_flow.rho_out;
      CoolingTower.water_inlet_flow.Qv = (CoolingTower.water_inlet_flow.Qv_in-
        CoolingTower.water_inlet_flow.Qv_out)/2;
      CoolingTower.water_inlet_flow.P_out-CoolingTower.water_inlet_flow.P_in = 
        CoolingTower.water_inlet_flow.DP;
      CoolingTower.water_inlet_flow.Q*(CoolingTower.water_inlet_flow.h_out-
        CoolingTower.water_inlet_flow.h_in) = CoolingTower.water_inlet_flow.W;
      CoolingTower.water_inlet_flow.h_out-CoolingTower.water_inlet_flow.h_in = 
        CoolingTower.water_inlet_flow.DH;
      CoolingTower.water_inlet_flow.T_out-CoolingTower.water_inlet_flow.T_in = 
        CoolingTower.water_inlet_flow.DT;
      CoolingTower.water_inlet_flow.C_in.Q+CoolingTower.water_inlet_flow.C_out.Q
         = 0;
      CoolingTower.water_inlet_flow.C_out.Xi_outflow = inStream(CoolingTower.water_inlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.water_inlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      CoolingTower.water_inlet_flow.h = CoolingTower.water_inlet_flow.h_in;
      CoolingTower.water_inlet_flow.DH = 0;
    // end of extends 
  equation
    CoolingTower.water_inlet_flow.DP = CoolingTower.water_inlet_flow.DP_input;

  // Component CoolingTower.water_outlet_flow
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.water_outlet_flow.h_in = inStream(CoolingTower.water_outlet_flow.C_in.h_outflow);
      CoolingTower.water_outlet_flow.h_out = CoolingTower.water_outlet_flow.C_out.h_outflow;
      CoolingTower.water_outlet_flow.Q = CoolingTower.water_outlet_flow.C_in.Q;
      CoolingTower.water_outlet_flow.P_in = CoolingTower.water_outlet_flow.C_in.P;
      CoolingTower.water_outlet_flow.P_out = CoolingTower.water_outlet_flow.C_out.P;
      CoolingTower.water_outlet_flow.Xi = inStream(CoolingTower.water_outlet_flow.C_in.Xi_outflow);
      CoolingTower.water_outlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.water_outlet_flow.C_in.Xi_outflow = zeros(0);
      CoolingTower.water_outlet_flow.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet_flow.P_in, CoolingTower.water_outlet_flow.h_in,
         CoolingTower.water_outlet_flow.Xi, 0, 0);
      CoolingTower.water_outlet_flow.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet_flow.P_out, CoolingTower.water_outlet_flow.h_out,
         CoolingTower.water_outlet_flow.Xi, 0, 0);
      CoolingTower.water_outlet_flow.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet_flow.state_in);
      CoolingTower.water_outlet_flow.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet_flow.state_out);
      CoolingTower.water_outlet_flow.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_outlet_flow.state_in);
      CoolingTower.water_outlet_flow.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_outlet_flow.state_out);
      CoolingTower.water_outlet_flow.rho = (CoolingTower.water_outlet_flow.rho_in
        +CoolingTower.water_outlet_flow.rho_out)/2;
      CoolingTower.water_outlet_flow.Qv_in = CoolingTower.water_outlet_flow.Q/
        CoolingTower.water_outlet_flow.rho_in;
      CoolingTower.water_outlet_flow.Qv_out =  -CoolingTower.water_outlet_flow.Q
        /CoolingTower.water_outlet_flow.rho_out;
      CoolingTower.water_outlet_flow.Qv = (CoolingTower.water_outlet_flow.Qv_in-
        CoolingTower.water_outlet_flow.Qv_out)/2;
      CoolingTower.water_outlet_flow.P_out-CoolingTower.water_outlet_flow.P_in
         = CoolingTower.water_outlet_flow.DP;
      CoolingTower.water_outlet_flow.Q*(CoolingTower.water_outlet_flow.h_out-
        CoolingTower.water_outlet_flow.h_in) = CoolingTower.water_outlet_flow.W;
      CoolingTower.water_outlet_flow.h_out-CoolingTower.water_outlet_flow.h_in
         = CoolingTower.water_outlet_flow.DH;
      CoolingTower.water_outlet_flow.T_out-CoolingTower.water_outlet_flow.T_in
         = CoolingTower.water_outlet_flow.DT;
      CoolingTower.water_outlet_flow.C_in.Q+CoolingTower.water_outlet_flow.C_out.Q
         = 0;
      CoolingTower.water_outlet_flow.C_out.Xi_outflow = inStream(
        CoolingTower.water_outlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.water_outlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.water_outlet_flow.P = CoolingTower.water_outlet_flow.P_in;
      CoolingTower.water_outlet_flow.h = CoolingTower.water_outlet_flow.h_in;
      CoolingTower.water_outlet_flow.T = CoolingTower.water_outlet_flow.T_in;
      CoolingTower.water_outlet_flow.DP = 0;
      CoolingTower.water_outlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower.water_outlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.water_outlet.C_out.P = CoolingTower.water_outlet.P_out;
      CoolingTower.water_outlet.C_out.Q = CoolingTower.water_outlet.Q_out;
      CoolingTower.water_outlet.C_out.h_outflow = CoolingTower.water_outlet.h_out;
      CoolingTower.water_outlet.C_out.Xi_outflow = CoolingTower.water_outlet.Xi_out;
      CoolingTower.water_outlet.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet.P_out, CoolingTower.water_outlet.h_out, 
        CoolingTower.water_outlet.Xi_out, 0, 0);
      CoolingTower.water_outlet.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet.state_out);
      CoolingTower.water_outlet.Qv_out = CoolingTower.water_outlet.Q_out/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.water_outlet.state_out);
    // end of extends 

  // Component CoolingTower.water_inlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.water_inlet.C_in.P = CoolingTower.water_inlet.P_in;
      CoolingTower.water_inlet.C_in.Q = CoolingTower.water_inlet.Q_in;
      inStream(CoolingTower.water_inlet.C_in.h_outflow) = CoolingTower.water_inlet.h_in;
      inStream(CoolingTower.water_inlet.C_in.Xi_outflow) = CoolingTower.water_inlet.Xi_in;
      CoolingTower.water_inlet.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet.P_in, CoolingTower.water_inlet.h_in, 
        CoolingTower.water_inlet.Xi_in, 0, 0);
      CoolingTower.water_inlet.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet.state_in);
      CoolingTower.water_inlet.Qv_in = CoolingTower.water_inlet.Q_in/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.water_inlet.state_in);
      CoolingTower.water_inlet.C_in.h_outflow = 0;
      CoolingTower.water_inlet.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component CoolingTower.air_inlet_flow
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.air_inlet_flow.h_in = inStream(CoolingTower.air_inlet_flow.C_in.h_outflow);
      CoolingTower.air_inlet_flow.h_out = CoolingTower.air_inlet_flow.C_out.h_outflow;
      CoolingTower.air_inlet_flow.Q = CoolingTower.air_inlet_flow.C_in.Q;
      CoolingTower.air_inlet_flow.P_in = CoolingTower.air_inlet_flow.C_in.P;
      CoolingTower.air_inlet_flow.P_out = CoolingTower.air_inlet_flow.C_out.P;
      CoolingTower.air_inlet_flow.Xi = inStream(CoolingTower.air_inlet_flow.C_in.Xi_outflow);
      CoolingTower.air_inlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.air_inlet_flow.C_in.Xi_outflow = zeros(1);
      CoolingTower.air_inlet_flow.state_in = setState_phX_Unique10(
        CoolingTower.air_inlet_flow.P_in, CoolingTower.air_inlet_flow.h_in, 
        CoolingTower.air_inlet_flow.Xi);
      CoolingTower.air_inlet_flow.state_out = setState_phX_Unique10(
        CoolingTower.air_inlet_flow.P_out, CoolingTower.air_inlet_flow.h_out, 
        CoolingTower.air_inlet_flow.Xi);
      CoolingTower.air_inlet_flow.T_in = temperature_Unique28(
        CoolingTower.air_inlet_flow.state_in);
      CoolingTower.air_inlet_flow.T_out = temperature_Unique28(
        CoolingTower.air_inlet_flow.state_out);
      CoolingTower.air_inlet_flow.rho_in = density_Unique29(
        CoolingTower.air_inlet_flow.state_in);
      CoolingTower.air_inlet_flow.rho_out = density_Unique29(
        CoolingTower.air_inlet_flow.state_out);
      CoolingTower.air_inlet_flow.rho = (CoolingTower.air_inlet_flow.rho_in+
        CoolingTower.air_inlet_flow.rho_out)/2;
      CoolingTower.air_inlet_flow.Qv_in = CoolingTower.air_inlet_flow.Q/
        CoolingTower.air_inlet_flow.rho_in;
      CoolingTower.air_inlet_flow.Qv_out =  -CoolingTower.air_inlet_flow.Q/
        CoolingTower.air_inlet_flow.rho_out;
      CoolingTower.air_inlet_flow.Qv = (CoolingTower.air_inlet_flow.Qv_in-
        CoolingTower.air_inlet_flow.Qv_out)/2;
      CoolingTower.air_inlet_flow.P_out-CoolingTower.air_inlet_flow.P_in = 
        CoolingTower.air_inlet_flow.DP;
      CoolingTower.air_inlet_flow.Q*(CoolingTower.air_inlet_flow.h_out-
        CoolingTower.air_inlet_flow.h_in) = CoolingTower.air_inlet_flow.W;
      CoolingTower.air_inlet_flow.h_out-CoolingTower.air_inlet_flow.h_in = 
        CoolingTower.air_inlet_flow.DH;
      CoolingTower.air_inlet_flow.T_out-CoolingTower.air_inlet_flow.T_in = 
        CoolingTower.air_inlet_flow.DT;
      CoolingTower.air_inlet_flow.C_in.Q+CoolingTower.air_inlet_flow.C_out.Q = 0;
      CoolingTower.air_inlet_flow.C_out.Xi_outflow = inStream(CoolingTower.air_inlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.air_inlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.air_inlet_flow.P = CoolingTower.air_inlet_flow.P_in;
      CoolingTower.air_inlet_flow.h = CoolingTower.air_inlet_flow.h_in;
      CoolingTower.air_inlet_flow.T = CoolingTower.air_inlet_flow.T_in;
      CoolingTower.air_inlet_flow.DP = 0;
      CoolingTower.air_inlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower.air_inlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.air_inlet.C_in.P = CoolingTower.air_inlet.P_in;
      CoolingTower.air_inlet.C_in.Q = CoolingTower.air_inlet.Q_in;
      inStream(CoolingTower.air_inlet.C_in.h_outflow) = CoolingTower.air_inlet.h_in;
      inStream(CoolingTower.air_inlet.C_in.Xi_outflow) = CoolingTower.air_inlet.Xi_in;
      CoolingTower.air_inlet.state_in = setState_phX_Unique10(CoolingTower.air_inlet.P_in,
         CoolingTower.air_inlet.h_in, CoolingTower.air_inlet.Xi_in);
      CoolingTower.air_inlet.T_in = temperature_Unique28(
        CoolingTower.air_inlet.state_in);
      CoolingTower.air_inlet.Qv_in = CoolingTower.air_inlet.Q_in/
        density_Unique29(
        CoolingTower.air_inlet.state_in);
      CoolingTower.air_inlet.C_in.h_outflow = 0;
      CoolingTower.air_inlet.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    CoolingTower.air_inlet.Xi_in[1] = massFraction_pTphi_Unique31(
      CoolingTower.air_inlet.P_in, CoolingTower.air_inlet.T_in, CoolingTower.air_inlet.relative_humidity);

  // Component CoolingTower.air_outlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.air_outlet.C_out.P = CoolingTower.air_outlet.P_out;
      CoolingTower.air_outlet.C_out.Q = CoolingTower.air_outlet.Q_out;
      CoolingTower.air_outlet.C_out.h_outflow = CoolingTower.air_outlet.h_out;
      CoolingTower.air_outlet.C_out.Xi_outflow = CoolingTower.air_outlet.Xi_out;
      CoolingTower.air_outlet.state_out = setState_phX_Unique10(CoolingTower.air_outlet.P_out,
         CoolingTower.air_outlet.h_out, CoolingTower.air_outlet.Xi_out);
      CoolingTower.air_outlet.T_out = temperature_Unique28(
        CoolingTower.air_outlet.state_out);
      CoolingTower.air_outlet.Qv_out = CoolingTower.air_outlet.Q_out/
        density_Unique29(
        CoolingTower.air_outlet.state_out);
    // end of extends 
  equation
    CoolingTower.air_outlet.Xi_out[1] = massFraction_pTphi_Unique31(
      CoolingTower.air_outlet.P_out, CoolingTower.air_outlet.T_out, 
      CoolingTower.air_outlet.relative_humidity);

  // Component CoolingTower.air_outlet_flow
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.air_outlet_flow.h_in = inStream(CoolingTower.air_outlet_flow.C_in.h_outflow);
      CoolingTower.air_outlet_flow.h_out = CoolingTower.air_outlet_flow.C_out.h_outflow;
      CoolingTower.air_outlet_flow.Q = CoolingTower.air_outlet_flow.C_in.Q;
      CoolingTower.air_outlet_flow.P_in = CoolingTower.air_outlet_flow.C_in.P;
      CoolingTower.air_outlet_flow.P_out = CoolingTower.air_outlet_flow.C_out.P;
      CoolingTower.air_outlet_flow.Xi = inStream(CoolingTower.air_outlet_flow.C_in.Xi_outflow);
      CoolingTower.air_outlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.air_outlet_flow.C_in.Xi_outflow = zeros(1);
      CoolingTower.air_outlet_flow.state_in = setState_phX_Unique10(
        CoolingTower.air_outlet_flow.P_in, CoolingTower.air_outlet_flow.h_in, 
        CoolingTower.air_outlet_flow.Xi);
      CoolingTower.air_outlet_flow.state_out = setState_phX_Unique10(
        CoolingTower.air_outlet_flow.P_out, CoolingTower.air_outlet_flow.h_out, 
        CoolingTower.air_outlet_flow.Xi);
      CoolingTower.air_outlet_flow.T_in = temperature_Unique28(
        CoolingTower.air_outlet_flow.state_in);
      CoolingTower.air_outlet_flow.T_out = temperature_Unique28(
        CoolingTower.air_outlet_flow.state_out);
      CoolingTower.air_outlet_flow.rho_in = density_Unique29(
        CoolingTower.air_outlet_flow.state_in);
      CoolingTower.air_outlet_flow.rho_out = density_Unique29(
        CoolingTower.air_outlet_flow.state_out);
      CoolingTower.air_outlet_flow.rho = (CoolingTower.air_outlet_flow.rho_in+
        CoolingTower.air_outlet_flow.rho_out)/2;
      CoolingTower.air_outlet_flow.Qv_in = CoolingTower.air_outlet_flow.Q/
        CoolingTower.air_outlet_flow.rho_in;
      CoolingTower.air_outlet_flow.Qv_out =  -CoolingTower.air_outlet_flow.Q/
        CoolingTower.air_outlet_flow.rho_out;
      CoolingTower.air_outlet_flow.Qv = (CoolingTower.air_outlet_flow.Qv_in-
        CoolingTower.air_outlet_flow.Qv_out)/2;
      CoolingTower.air_outlet_flow.P_out-CoolingTower.air_outlet_flow.P_in = 
        CoolingTower.air_outlet_flow.DP;
      CoolingTower.air_outlet_flow.Q*(CoolingTower.air_outlet_flow.h_out-
        CoolingTower.air_outlet_flow.h_in) = CoolingTower.air_outlet_flow.W;
      CoolingTower.air_outlet_flow.h_out-CoolingTower.air_outlet_flow.h_in = 
        CoolingTower.air_outlet_flow.DH;
      CoolingTower.air_outlet_flow.T_out-CoolingTower.air_outlet_flow.T_in = 
        CoolingTower.air_outlet_flow.DT;
      CoolingTower.air_outlet_flow.C_in.Q+CoolingTower.air_outlet_flow.C_out.Q
         = 0;
      CoolingTower.air_outlet_flow.C_out.Xi_outflow = inStream(CoolingTower.air_outlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.air_outlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.air_outlet_flow.P = CoolingTower.air_outlet_flow.P_in;
      CoolingTower.air_outlet_flow.h = CoolingTower.air_outlet_flow.h_in;
      CoolingTower.air_outlet_flow.T = CoolingTower.air_outlet_flow.T_in;
      CoolingTower.air_outlet_flow.DP = 0;
      CoolingTower.air_outlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower
  // class MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe
  equation
    CoolingTower.air_inlet_flow.P_out = CoolingTower.Pin[1];
    CoolingTower.air_inlet_flow.Q = CoolingTower.Q_cold_in;
    CoolingTower.air_inlet_flow.h = CoolingTower.i_initial;
    CoolingTower.air_inlet.T_in = CoolingTower.T_cold_in;
    CoolingTower.w_in = CoolingTower.air_inlet.Xi_in[1];
    CoolingTower.air_outlet_flow.P_in = CoolingTower.Pin[CoolingTower.N_step];
    CoolingTower.air_outlet_flow.Q = CoolingTower.Q_cold_out;
    CoolingTower.air_outlet_flow.h = CoolingTower.i_final;
    CoolingTower.air_outlet.T_out = CoolingTower.T_cold_out;
    CoolingTower.w_out = CoolingTower.air_outlet.Xi_out[1];
    CoolingTower.water_inlet_flow.P_out = CoolingTower.Pin[CoolingTower.N_step];
    CoolingTower.water_inlet_flow.Q = CoolingTower.Q_hot_in;
    CoolingTower.water_inlet_flow.T_in = CoolingTower.T_hot_in;
    CoolingTower.water_outlet_flow.P_out = CoolingTower.Pin[1];
    CoolingTower.water_outlet_flow.Q = CoolingTower.Q_hot_out;
    CoolingTower.water_outlet_flow.T_in = CoolingTower.T_hot_out;
    CoolingTower.W_max = CoolingTower.Qw[10]*CoolingTower.cp[1]*(CoolingTower.Tw
      [CoolingTower.N_step]-CoolingTower.Tw[1]);
    CoolingTower.W_min = CoolingTower.Qw[1]*CoolingTower.cp[1]*(CoolingTower.Tw[
      CoolingTower.N_step]-CoolingTower.Tw[1]);
    CoolingTower.deltaTw = (CoolingTower.Tw[CoolingTower.N_step]-CoolingTower.Tw
      [1])/(CoolingTower.N_step-1);
    for n in (1:CoolingTower.N_step) loop
      CoolingTower.Tw[n] = CoolingTower.T_hot_out+(CoolingTower.T_hot_in-
        CoolingTower.T_hot_out)*(n-1)/(CoolingTower.N_step-1);
      CoolingTower.Ta[n] = T_phX_Unique40(CoolingTower.Pin[n], CoolingTower.i[n],
         {CoolingTower.w[n]});
      CoolingTower.w_sat[n] = xsaturation_pT_Unique48(CoolingTower.Pin[n], 
        CoolingTower.Ta[n]);
    end for;
    for n in (1:CoolingTower.N_step-1) loop
      if (CoolingTower.w[n] < CoolingTower.w_sat[n]) then 
        CoolingTower.w[n+1] = CoolingTower.w[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.f
          (CoolingTower.Tw[n], CoolingTower.w[n], CoolingTower.i[n], 
          CoolingTower.cp[n], CoolingTower.Qw[n], CoolingTower.Qa[n], 
          CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.i[n+1] = CoolingTower.i[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.g
          (CoolingTower.Tw[n], CoolingTower.w[n], CoolingTower.i[n], 
          CoolingTower.cp[n], CoolingTower.Qw[n], CoolingTower.Qa[n], 
          CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.M[n+1] = CoolingTower.M[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.h
          (CoolingTower.Tw[n+1], CoolingTower.w[n+1], CoolingTower.i[n+1], 
          CoolingTower.cp[n+1], CoolingTower.Pin[n+1], CoolingTower.Lef[n+1]);
        CoolingTower.Qw[n+1] = CoolingTower.Qw[n]+CoolingTower.Qa[n]*(
          CoolingTower.w[n+1]-CoolingTower.w[n]);
        CoolingTower.Qa[n+1] = CoolingTower.Qa[n]*(1+CoolingTower.w[n+1]-
          CoolingTower.w[n]);
        CoolingTower.Lef[n+1] = CoolingTower.Lef[n];
        CoolingTower.cp[n+1] = CoolingTower.cp[n];
        CoolingTower.Pin[n+1] = CoolingTower.Pin[n];
      else
        CoolingTower.w[n+1] = CoolingTower.w[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.j
          (CoolingTower.Tw[n], CoolingTower.Ta[n], CoolingTower.w[n], 
          CoolingTower.i[n], CoolingTower.cp[n], CoolingTower.Qw[n], 
          CoolingTower.Qa[n], CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.i[n+1] = CoolingTower.i[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.k
          (CoolingTower.Tw[n], CoolingTower.Ta[n], CoolingTower.w[n], 
          CoolingTower.i[n], CoolingTower.cp[n], CoolingTower.Qw[n], 
          CoolingTower.Qa[n], CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.M[n+1] = CoolingTower.M[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.m
          (CoolingTower.Tw[n+1], CoolingTower.Ta[n+1], CoolingTower.w[n+1], 
          CoolingTower.i[n+1], CoolingTower.cp[n+1], CoolingTower.Pin[n+1], 
          CoolingTower.Lef[n+1]);
        CoolingTower.Qw[n+1] = CoolingTower.Qw[n]+CoolingTower.Qa[n]*(
          CoolingTower.w[n+1]-CoolingTower.w[n]);
        CoolingTower.Qa[n+1] = CoolingTower.Qa[n]*(1+CoolingTower.w[n+1]-
          CoolingTower.w[n]);
        CoolingTower.Lef[n+1] = CoolingTower.Lef[n];
        CoolingTower.cp[n+1] = CoolingTower.cp[n];
        CoolingTower.Pin[n+1] = CoolingTower.Pin[n];
      end if;
    end for;
    CoolingTower.Me = CoolingTower.hd*CoolingTower.Afr/CoolingTower.Qw[1];
    CoolingTower.M[CoolingTower.N_step] = CoolingTower.Me;
    CoolingTower.M[1] = 0;
    CoolingTower.w[1] = CoolingTower.w_in;
    CoolingTower.w[CoolingTower.N_step] = CoolingTower.w_out;
    CoolingTower.i[1] = CoolingTower.i_initial;
    CoolingTower.i[CoolingTower.N_step] = CoolingTower.i_final;
    CoolingTower.Qw[1] = CoolingTower.Q_hot_out;
    CoolingTower.Qw[CoolingTower.N_step] = CoolingTower.Q_hot_in;
    CoolingTower.Qa[1] = CoolingTower.Q_cold_in;
    CoolingTower.Qa[CoolingTower.N_step] = CoolingTower.Q_cold_out;
    CoolingTower.Lef[1] = 0.9077990913*((xsaturation_pT_Unique48(
      CoolingTower.Pin[1], CoolingTower.T_cold_in)+0.622)/(CoolingTower.w[1]+
      0.622)-1)/log((xsaturation_pT_Unique48(CoolingTower.Pin[1], 
      CoolingTower.T_cold_in)+0.622)/(CoolingTower.w[1]+0.622));
    CoolingTower.cp[1] = Modelica.Media.Water.WaterIF97_ph.specificHeatCapacityCp_Unique49
      (
      CoolingTower.water_inlet_flow.state_in);
    CoolingTower.rho_air_inlet = CoolingTower.air_inlet_flow.rho_in;
    CoolingTower.rho_air_outlet = CoolingTower.air_outlet_flow.rho_out;
    0.25*(CoolingTower.rho_air_inlet+CoolingTower.rho_air_outlet)*
      CoolingTower.Cf*abs(CoolingTower.V_inlet)*CoolingTower.V_inlet = (
      CoolingTower.rho_air_inlet-CoolingTower.rho_air_outlet)*CoolingTower.gr*
      CoolingTower.Lfi;
    CoolingTower.Q_cold_in = CoolingTower.V_inlet*CoolingTower.Afr*
      CoolingTower.rho_air_inlet*(1-CoolingTower.air_inlet.Xi_in[1]);
    CoolingTower.air_inlet_flow.C_out.P = CoolingTower.air_inlet.C_in.P;
    CoolingTower.air_inlet.C_in.Q+CoolingTower.air_inlet_flow.C_out.Q = 0.0;
    CoolingTower.air_inlet_flow.C_in.P = CoolingTower.air_inlet_connector.P;
    CoolingTower.air_inlet_connector.Q-CoolingTower.air_inlet_flow.C_in.Q = 0.0;
    CoolingTower.air_outlet_flow.C_in.P = CoolingTower.air_outlet.C_out.P;
    CoolingTower.air_outlet.C_out.Q+CoolingTower.air_outlet_flow.C_in.Q = 0.0;
    CoolingTower.air_outlet_flow.C_out.P = CoolingTower.air_outlet_connector.P;
    CoolingTower.air_outlet_connector.Q-CoolingTower.air_outlet_flow.C_out.Q = 
      0.0;
    CoolingTower.water_inlet_flow.C_out.P = CoolingTower.water_inlet.C_in.P;
    CoolingTower.water_inlet.C_in.Q+CoolingTower.water_inlet_flow.C_out.Q = 0.0;
    CoolingTower.water_inlet_flow.C_in.P = CoolingTower.water_inlet_connector.P;
    CoolingTower.water_inlet_connector.Q-CoolingTower.water_inlet_flow.C_in.Q = 
      0.0;
    CoolingTower.water_outlet_flow.C_in.P = CoolingTower.water_outlet.C_out.P;
    CoolingTower.water_outlet.C_out.Q+CoolingTower.water_outlet_flow.C_in.Q = 
      0.0;
    CoolingTower.water_outlet_flow.C_out.P = CoolingTower.water_outlet_connector.P;
    CoolingTower.water_outlet_connector.Q-CoolingTower.water_outlet_flow.C_out.Q
       = 0.0;

  // Component CEC194_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC194_sensor.flow_model.h_in = inStream(CEC194_sensor.flow_model.C_in.h_outflow);
      CEC194_sensor.flow_model.h_out = CEC194_sensor.flow_model.C_out.h_outflow;
      CEC194_sensor.flow_model.Q = CEC194_sensor.flow_model.C_in.Q;
      CEC194_sensor.flow_model.P_in = CEC194_sensor.flow_model.C_in.P;
      CEC194_sensor.flow_model.P_out = CEC194_sensor.flow_model.C_out.P;
      CEC194_sensor.flow_model.Xi = inStream(CEC194_sensor.flow_model.C_in.Xi_outflow);
      CEC194_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC194_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC194_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC194_sensor.flow_model.P_in, CEC194_sensor.flow_model.h_in, 
        CEC194_sensor.flow_model.Xi, 0, 0);
      CEC194_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC194_sensor.flow_model.P_out, CEC194_sensor.flow_model.h_out, 
        CEC194_sensor.flow_model.Xi, 0, 0);
      CEC194_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC194_sensor.flow_model.state_in);
      CEC194_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC194_sensor.flow_model.state_out);
      CEC194_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC194_sensor.flow_model.state_in);
      CEC194_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC194_sensor.flow_model.state_out);
      CEC194_sensor.flow_model.rho = (CEC194_sensor.flow_model.rho_in+
        CEC194_sensor.flow_model.rho_out)/2;
      CEC194_sensor.flow_model.Qv_in = CEC194_sensor.flow_model.Q/
        CEC194_sensor.flow_model.rho_in;
      CEC194_sensor.flow_model.Qv_out =  -CEC194_sensor.flow_model.Q/
        CEC194_sensor.flow_model.rho_out;
      CEC194_sensor.flow_model.Qv = (CEC194_sensor.flow_model.Qv_in-
        CEC194_sensor.flow_model.Qv_out)/2;
      CEC194_sensor.flow_model.P_out-CEC194_sensor.flow_model.P_in = 
        CEC194_sensor.flow_model.DP;
      CEC194_sensor.flow_model.Q*(CEC194_sensor.flow_model.h_out-
        CEC194_sensor.flow_model.h_in) = CEC194_sensor.flow_model.W;
      CEC194_sensor.flow_model.h_out-CEC194_sensor.flow_model.h_in = 
        CEC194_sensor.flow_model.DH;
      CEC194_sensor.flow_model.T_out-CEC194_sensor.flow_model.T_in = 
        CEC194_sensor.flow_model.DT;
      CEC194_sensor.flow_model.C_in.Q+CEC194_sensor.flow_model.C_out.Q = 0;
      CEC194_sensor.flow_model.C_out.Xi_outflow = inStream(CEC194_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC194_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC194_sensor.flow_model.P = CEC194_sensor.flow_model.P_in;
      CEC194_sensor.flow_model.h = CEC194_sensor.flow_model.h_in;
      CEC194_sensor.flow_model.T = CEC194_sensor.flow_model.T_in;
      CEC194_sensor.flow_model.DP = 0;
      CEC194_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC194_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC194_sensor.faulty_flow_rate) then 
        CEC194_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC194_sensor.P = CEC194_sensor.C_in.P;
      CEC194_sensor.Q = CEC194_sensor.C_in.Q+CEC194_sensor.mass_flow_rate_bias;
      CEC194_sensor.Xi = inStream(CEC194_sensor.C_in.Xi_outflow);
      CEC194_sensor.h = inStream(CEC194_sensor.C_in.h_outflow);
      CEC194_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC194_sensor.P, CEC194_sensor.h, CEC194_sensor.Xi, 0, 0);
      assert(CEC194_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC194_sensor.T = CEC194_sensor.flow_model.T;
      CEC194_sensor.T_degC+273.15 = CEC194_sensor.T;
      CEC194_sensor.T_degF = CEC194_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC194_sensor.flow_model.C_in.P = CEC194_sensor.C_in.P;
    CEC194_sensor.C_in.Q-CEC194_sensor.flow_model.C_in.Q = 0.0;
    CEC194_sensor.flow_model.C_out.P = CEC194_sensor.C_out.P;
    CEC194_sensor.C_out.Q-CEC194_sensor.flow_model.C_out.Q = 0.0;

  // Component CEC197_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC197_sensor.flow_model.h_in = inStream(CEC197_sensor.flow_model.C_in.h_outflow);
      CEC197_sensor.flow_model.h_out = CEC197_sensor.flow_model.C_out.h_outflow;
      CEC197_sensor.flow_model.Q = CEC197_sensor.flow_model.C_in.Q;
      CEC197_sensor.flow_model.P_in = CEC197_sensor.flow_model.C_in.P;
      CEC197_sensor.flow_model.P_out = CEC197_sensor.flow_model.C_out.P;
      CEC197_sensor.flow_model.Xi = inStream(CEC197_sensor.flow_model.C_in.Xi_outflow);
      CEC197_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC197_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC197_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.flow_model.P_in, CEC197_sensor.flow_model.h_in, 
        CEC197_sensor.flow_model.Xi, 0, 0);
      CEC197_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.flow_model.P_out, CEC197_sensor.flow_model.h_out, 
        CEC197_sensor.flow_model.Xi, 0, 0);
      CEC197_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC197_sensor.flow_model.state_in);
      CEC197_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC197_sensor.flow_model.state_out);
      CEC197_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.flow_model.state_in);
      CEC197_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.flow_model.state_out);
      CEC197_sensor.flow_model.rho = (CEC197_sensor.flow_model.rho_in+
        CEC197_sensor.flow_model.rho_out)/2;
      CEC197_sensor.flow_model.Qv_in = CEC197_sensor.flow_model.Q/
        CEC197_sensor.flow_model.rho_in;
      CEC197_sensor.flow_model.Qv_out =  -CEC197_sensor.flow_model.Q/
        CEC197_sensor.flow_model.rho_out;
      CEC197_sensor.flow_model.Qv = (CEC197_sensor.flow_model.Qv_in-
        CEC197_sensor.flow_model.Qv_out)/2;
      CEC197_sensor.flow_model.P_out-CEC197_sensor.flow_model.P_in = 
        CEC197_sensor.flow_model.DP;
      CEC197_sensor.flow_model.Q*(CEC197_sensor.flow_model.h_out-
        CEC197_sensor.flow_model.h_in) = CEC197_sensor.flow_model.W;
      CEC197_sensor.flow_model.h_out-CEC197_sensor.flow_model.h_in = 
        CEC197_sensor.flow_model.DH;
      CEC197_sensor.flow_model.T_out-CEC197_sensor.flow_model.T_in = 
        CEC197_sensor.flow_model.DT;
      CEC197_sensor.flow_model.C_in.Q+CEC197_sensor.flow_model.C_out.Q = 0;
      CEC197_sensor.flow_model.C_out.Xi_outflow = inStream(CEC197_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC197_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC197_sensor.flow_model.P = CEC197_sensor.flow_model.P_in;
      CEC197_sensor.flow_model.h = CEC197_sensor.flow_model.h_in;
      CEC197_sensor.flow_model.T = CEC197_sensor.flow_model.T_in;
      CEC197_sensor.flow_model.DP = 0;
      CEC197_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC197_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC197_sensor.faulty_flow_rate) then 
        CEC197_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC197_sensor.P = CEC197_sensor.C_in.P;
      CEC197_sensor.Q = CEC197_sensor.C_in.Q+CEC197_sensor.mass_flow_rate_bias;
      CEC197_sensor.Xi = inStream(CEC197_sensor.C_in.Xi_outflow);
      CEC197_sensor.h = inStream(CEC197_sensor.C_in.h_outflow);
      CEC197_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.P, CEC197_sensor.h, CEC197_sensor.Xi, 0, 0);
      assert(CEC197_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      CEC197_sensor.Qv = CEC197_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.state);
      CEC197_sensor.Q_lm = CEC197_sensor.Qv*60000;
      CEC197_sensor.Q_th = CEC197_sensor.Q*3.6;
      CEC197_sensor.Q_lbs = CEC197_sensor.Q*0.453592428;
      CEC197_sensor.Q_Mlbh = CEC197_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    CEC197_sensor.flow_model.C_in.P = CEC197_sensor.C_in.P;
    CEC197_sensor.C_in.Q-CEC197_sensor.flow_model.C_in.Q = 0.0;
    CEC197_sensor.flow_model.C_out.P = CEC197_sensor.C_out.P;
    CEC197_sensor.C_out.Q-CEC197_sensor.flow_model.C_out.Q = 0.0;

  // Component AirSource
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      AirSource.C_out.P = AirSource.P_out;
      AirSource.C_out.Q = AirSource.Q_out;
      AirSource.C_out.h_outflow = AirSource.h_out;
      AirSource.C_out.Xi_outflow = AirSource.Xi_out;
      AirSource.state_out = setState_phX_Unique10(AirSource.P_out, 
        AirSource.h_out, AirSource.Xi_out);
      AirSource.T_out = temperature_Unique28(
        AirSource.state_out);
      AirSource.Qv_out = AirSource.Q_out/density_Unique29(
        AirSource.state_out);
    // end of extends 
  equation
    AirSource.Xi_out[1] = massFraction_pTphi_Unique31(AirSource.P_out, 
      AirSource.T_out, AirSource.relative_humidity);

  // Component sink
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      sink.C_in.P = sink.P_in;
      sink.C_in.Q = sink.Q_in;
      inStream(sink.C_in.h_outflow) = sink.h_in;
      inStream(sink.C_in.Xi_outflow) = sink.Xi_in;
      sink.state_in = setState_phX_Unique10(sink.P_in, sink.h_in, sink.Xi_in);
      sink.T_in = temperature_Unique28(
        sink.state_in);
      sink.Qv_in = sink.Q_in/density_Unique29(
        sink.state_in);
      sink.C_in.h_outflow = 0;
      sink.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    sink.Xi_in[1] = massFraction_pTphi_Unique31(sink.P_in, sink.T_in, 
      sink.relative_humidity);

  // Component AirInlet_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirInlet_Flow_sensor.flow_model.h_in = inStream(AirInlet_Flow_sensor.flow_model.C_in.h_outflow);
      AirInlet_Flow_sensor.flow_model.h_out = AirInlet_Flow_sensor.flow_model.C_out.h_outflow;
      AirInlet_Flow_sensor.flow_model.Q = AirInlet_Flow_sensor.flow_model.C_in.Q;
      AirInlet_Flow_sensor.flow_model.P_in = AirInlet_Flow_sensor.flow_model.C_in.P;
      AirInlet_Flow_sensor.flow_model.P_out = AirInlet_Flow_sensor.flow_model.C_out.P;
      AirInlet_Flow_sensor.flow_model.Xi = inStream(AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow);
      AirInlet_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirInlet_Flow_sensor.flow_model.state_in = setState_phX_Unique10(
        AirInlet_Flow_sensor.flow_model.P_in, AirInlet_Flow_sensor.flow_model.h_in,
         AirInlet_Flow_sensor.flow_model.Xi);
      AirInlet_Flow_sensor.flow_model.state_out = setState_phX_Unique10(
        AirInlet_Flow_sensor.flow_model.P_out, AirInlet_Flow_sensor.flow_model.h_out,
         AirInlet_Flow_sensor.flow_model.Xi);
      AirInlet_Flow_sensor.flow_model.T_in = temperature_Unique28(
        AirInlet_Flow_sensor.flow_model.state_in);
      AirInlet_Flow_sensor.flow_model.T_out = temperature_Unique28(
        AirInlet_Flow_sensor.flow_model.state_out);
      AirInlet_Flow_sensor.flow_model.rho_in = density_Unique29(
        AirInlet_Flow_sensor.flow_model.state_in);
      AirInlet_Flow_sensor.flow_model.rho_out = density_Unique29(
        AirInlet_Flow_sensor.flow_model.state_out);
      AirInlet_Flow_sensor.flow_model.rho = (AirInlet_Flow_sensor.flow_model.rho_in
        +AirInlet_Flow_sensor.flow_model.rho_out)/2;
      AirInlet_Flow_sensor.flow_model.Qv_in = AirInlet_Flow_sensor.flow_model.Q/
        AirInlet_Flow_sensor.flow_model.rho_in;
      AirInlet_Flow_sensor.flow_model.Qv_out =  -AirInlet_Flow_sensor.flow_model.Q
        /AirInlet_Flow_sensor.flow_model.rho_out;
      AirInlet_Flow_sensor.flow_model.Qv = (AirInlet_Flow_sensor.flow_model.Qv_in
        -AirInlet_Flow_sensor.flow_model.Qv_out)/2;
      AirInlet_Flow_sensor.flow_model.P_out-AirInlet_Flow_sensor.flow_model.P_in
         = AirInlet_Flow_sensor.flow_model.DP;
      AirInlet_Flow_sensor.flow_model.Q*(AirInlet_Flow_sensor.flow_model.h_out-
        AirInlet_Flow_sensor.flow_model.h_in) = AirInlet_Flow_sensor.flow_model.W;
      AirInlet_Flow_sensor.flow_model.h_out-AirInlet_Flow_sensor.flow_model.h_in
         = AirInlet_Flow_sensor.flow_model.DH;
      AirInlet_Flow_sensor.flow_model.T_out-AirInlet_Flow_sensor.flow_model.T_in
         = AirInlet_Flow_sensor.flow_model.DT;
      AirInlet_Flow_sensor.flow_model.C_in.Q+AirInlet_Flow_sensor.flow_model.C_out.Q
         = 0;
      AirInlet_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirInlet_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(AirInlet_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirInlet_Flow_sensor.flow_model.P = AirInlet_Flow_sensor.flow_model.P_in;
      AirInlet_Flow_sensor.flow_model.h = AirInlet_Flow_sensor.flow_model.h_in;
      AirInlet_Flow_sensor.flow_model.T = AirInlet_Flow_sensor.flow_model.T_in;
      AirInlet_Flow_sensor.flow_model.DP = 0;
      AirInlet_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirInlet_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirInlet_Flow_sensor.faulty_flow_rate) then 
        AirInlet_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      AirInlet_Flow_sensor.P = AirInlet_Flow_sensor.C_in.P;
      AirInlet_Flow_sensor.Q = AirInlet_Flow_sensor.C_in.Q+AirInlet_Flow_sensor.mass_flow_rate_bias;
      AirInlet_Flow_sensor.Xi = inStream(AirInlet_Flow_sensor.C_in.Xi_outflow);
      AirInlet_Flow_sensor.h = inStream(AirInlet_Flow_sensor.C_in.h_outflow);
      AirInlet_Flow_sensor.state = setState_phX_Unique10(AirInlet_Flow_sensor.P,
         AirInlet_Flow_sensor.h, AirInlet_Flow_sensor.Xi);
      assert(AirInlet_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      AirInlet_Flow_sensor.Qv = AirInlet_Flow_sensor.Q/density_Unique29(
        AirInlet_Flow_sensor.state);
      AirInlet_Flow_sensor.Q_lm = AirInlet_Flow_sensor.Qv*60000;
      AirInlet_Flow_sensor.Q_th = AirInlet_Flow_sensor.Q*3.6;
      AirInlet_Flow_sensor.Q_lbs = AirInlet_Flow_sensor.Q*0.453592428;
      AirInlet_Flow_sensor.Q_Mlbh = AirInlet_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    AirInlet_Flow_sensor.flow_model.C_in.P = AirInlet_Flow_sensor.C_in.P;
    AirInlet_Flow_sensor.C_in.Q-AirInlet_Flow_sensor.flow_model.C_in.Q = 0.0;
    AirInlet_Flow_sensor.flow_model.C_out.P = AirInlet_Flow_sensor.C_out.P;
    AirInlet_Flow_sensor.C_out.Q-AirInlet_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component AirInlet_Temp_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirInlet_Temp_sensor.flow_model.h_in = inStream(AirInlet_Temp_sensor.flow_model.C_in.h_outflow);
      AirInlet_Temp_sensor.flow_model.h_out = AirInlet_Temp_sensor.flow_model.C_out.h_outflow;
      AirInlet_Temp_sensor.flow_model.Q = AirInlet_Temp_sensor.flow_model.C_in.Q;
      AirInlet_Temp_sensor.flow_model.P_in = AirInlet_Temp_sensor.flow_model.C_in.P;
      AirInlet_Temp_sensor.flow_model.P_out = AirInlet_Temp_sensor.flow_model.C_out.P;
      AirInlet_Temp_sensor.flow_model.Xi = inStream(AirInlet_Temp_sensor.flow_model.C_in.Xi_outflow);
      AirInlet_Temp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirInlet_Temp_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirInlet_Temp_sensor.flow_model.state_in = setState_phX_Unique10(
        AirInlet_Temp_sensor.flow_model.P_in, AirInlet_Temp_sensor.flow_model.h_in,
         AirInlet_Temp_sensor.flow_model.Xi);
      AirInlet_Temp_sensor.flow_model.state_out = setState_phX_Unique10(
        AirInlet_Temp_sensor.flow_model.P_out, AirInlet_Temp_sensor.flow_model.h_out,
         AirInlet_Temp_sensor.flow_model.Xi);
      AirInlet_Temp_sensor.flow_model.T_in = temperature_Unique28(
        AirInlet_Temp_sensor.flow_model.state_in);
      AirInlet_Temp_sensor.flow_model.T_out = temperature_Unique28(
        AirInlet_Temp_sensor.flow_model.state_out);
      AirInlet_Temp_sensor.flow_model.rho_in = density_Unique29(
        AirInlet_Temp_sensor.flow_model.state_in);
      AirInlet_Temp_sensor.flow_model.rho_out = density_Unique29(
        AirInlet_Temp_sensor.flow_model.state_out);
      AirInlet_Temp_sensor.flow_model.rho = (AirInlet_Temp_sensor.flow_model.rho_in
        +AirInlet_Temp_sensor.flow_model.rho_out)/2;
      AirInlet_Temp_sensor.flow_model.Qv_in = AirInlet_Temp_sensor.flow_model.Q/
        AirInlet_Temp_sensor.flow_model.rho_in;
      AirInlet_Temp_sensor.flow_model.Qv_out =  -AirInlet_Temp_sensor.flow_model.Q
        /AirInlet_Temp_sensor.flow_model.rho_out;
      AirInlet_Temp_sensor.flow_model.Qv = (AirInlet_Temp_sensor.flow_model.Qv_in
        -AirInlet_Temp_sensor.flow_model.Qv_out)/2;
      AirInlet_Temp_sensor.flow_model.P_out-AirInlet_Temp_sensor.flow_model.P_in
         = AirInlet_Temp_sensor.flow_model.DP;
      AirInlet_Temp_sensor.flow_model.Q*(AirInlet_Temp_sensor.flow_model.h_out-
        AirInlet_Temp_sensor.flow_model.h_in) = AirInlet_Temp_sensor.flow_model.W;
      AirInlet_Temp_sensor.flow_model.h_out-AirInlet_Temp_sensor.flow_model.h_in
         = AirInlet_Temp_sensor.flow_model.DH;
      AirInlet_Temp_sensor.flow_model.T_out-AirInlet_Temp_sensor.flow_model.T_in
         = AirInlet_Temp_sensor.flow_model.DT;
      AirInlet_Temp_sensor.flow_model.C_in.Q+AirInlet_Temp_sensor.flow_model.C_out.Q
         = 0;
      AirInlet_Temp_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirInlet_Temp_sensor.flow_model.C_in.Xi_outflow);
      assert(AirInlet_Temp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirInlet_Temp_sensor.flow_model.P = AirInlet_Temp_sensor.flow_model.P_in;
      AirInlet_Temp_sensor.flow_model.h = AirInlet_Temp_sensor.flow_model.h_in;
      AirInlet_Temp_sensor.flow_model.T = AirInlet_Temp_sensor.flow_model.T_in;
      AirInlet_Temp_sensor.flow_model.DP = 0;
      AirInlet_Temp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirInlet_Temp_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirInlet_Temp_sensor.faulty_flow_rate) then 
        AirInlet_Temp_sensor.mass_flow_rate_bias = 0;
      end if;
      AirInlet_Temp_sensor.P = AirInlet_Temp_sensor.C_in.P;
      AirInlet_Temp_sensor.Q = AirInlet_Temp_sensor.C_in.Q+AirInlet_Temp_sensor.mass_flow_rate_bias;
      AirInlet_Temp_sensor.Xi = inStream(AirInlet_Temp_sensor.C_in.Xi_outflow);
      AirInlet_Temp_sensor.h = inStream(AirInlet_Temp_sensor.C_in.h_outflow);
      AirInlet_Temp_sensor.state = setState_phX_Unique10(AirInlet_Temp_sensor.P,
         AirInlet_Temp_sensor.h, AirInlet_Temp_sensor.Xi);
      assert(AirInlet_Temp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      AirInlet_Temp_sensor.T = AirInlet_Temp_sensor.flow_model.T;
      AirInlet_Temp_sensor.T_degC+273.15 = AirInlet_Temp_sensor.T;
      AirInlet_Temp_sensor.T_degF = AirInlet_Temp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    AirInlet_Temp_sensor.flow_model.C_in.P = AirInlet_Temp_sensor.C_in.P;
    AirInlet_Temp_sensor.C_in.Q-AirInlet_Temp_sensor.flow_model.C_in.Q = 0.0;
    AirInlet_Temp_sensor.flow_model.C_out.P = AirInlet_Temp_sensor.C_out.P;
    AirInlet_Temp_sensor.C_out.Q-AirInlet_Temp_sensor.flow_model.C_out.Q = 0.0;

  // Component AirInlet_Press_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirInlet_Press_sensor.flow_model.h_in = inStream(AirInlet_Press_sensor.flow_model.C_in.h_outflow);
      AirInlet_Press_sensor.flow_model.h_out = AirInlet_Press_sensor.flow_model.C_out.h_outflow;
      AirInlet_Press_sensor.flow_model.Q = AirInlet_Press_sensor.flow_model.C_in.Q;
      AirInlet_Press_sensor.flow_model.P_in = AirInlet_Press_sensor.flow_model.C_in.P;
      AirInlet_Press_sensor.flow_model.P_out = AirInlet_Press_sensor.flow_model.C_out.P;
      AirInlet_Press_sensor.flow_model.Xi = inStream(AirInlet_Press_sensor.flow_model.C_in.Xi_outflow);
      AirInlet_Press_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirInlet_Press_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirInlet_Press_sensor.flow_model.state_in = setState_phX_Unique10(
        AirInlet_Press_sensor.flow_model.P_in, AirInlet_Press_sensor.flow_model.h_in,
         AirInlet_Press_sensor.flow_model.Xi);
      AirInlet_Press_sensor.flow_model.state_out = setState_phX_Unique10(
        AirInlet_Press_sensor.flow_model.P_out, AirInlet_Press_sensor.flow_model.h_out,
         AirInlet_Press_sensor.flow_model.Xi);
      AirInlet_Press_sensor.flow_model.T_in = temperature_Unique28(
        AirInlet_Press_sensor.flow_model.state_in);
      AirInlet_Press_sensor.flow_model.T_out = temperature_Unique28(
        AirInlet_Press_sensor.flow_model.state_out);
      AirInlet_Press_sensor.flow_model.rho_in = density_Unique29(
        AirInlet_Press_sensor.flow_model.state_in);
      AirInlet_Press_sensor.flow_model.rho_out = density_Unique29(
        AirInlet_Press_sensor.flow_model.state_out);
      AirInlet_Press_sensor.flow_model.rho = (AirInlet_Press_sensor.flow_model.rho_in
        +AirInlet_Press_sensor.flow_model.rho_out)/2;
      AirInlet_Press_sensor.flow_model.Qv_in = AirInlet_Press_sensor.flow_model.Q
        /AirInlet_Press_sensor.flow_model.rho_in;
      AirInlet_Press_sensor.flow_model.Qv_out =  -AirInlet_Press_sensor.flow_model.Q
        /AirInlet_Press_sensor.flow_model.rho_out;
      AirInlet_Press_sensor.flow_model.Qv = (AirInlet_Press_sensor.flow_model.Qv_in
        -AirInlet_Press_sensor.flow_model.Qv_out)/2;
      AirInlet_Press_sensor.flow_model.P_out-AirInlet_Press_sensor.flow_model.P_in
         = AirInlet_Press_sensor.flow_model.DP;
      AirInlet_Press_sensor.flow_model.Q*(AirInlet_Press_sensor.flow_model.h_out
        -AirInlet_Press_sensor.flow_model.h_in) = AirInlet_Press_sensor.flow_model.W;
      AirInlet_Press_sensor.flow_model.h_out-AirInlet_Press_sensor.flow_model.h_in
         = AirInlet_Press_sensor.flow_model.DH;
      AirInlet_Press_sensor.flow_model.T_out-AirInlet_Press_sensor.flow_model.T_in
         = AirInlet_Press_sensor.flow_model.DT;
      AirInlet_Press_sensor.flow_model.C_in.Q+AirInlet_Press_sensor.flow_model.C_out.Q
         = 0;
      AirInlet_Press_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirInlet_Press_sensor.flow_model.C_in.Xi_outflow);
      assert(AirInlet_Press_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirInlet_Press_sensor.flow_model.P = AirInlet_Press_sensor.flow_model.P_in;
      AirInlet_Press_sensor.flow_model.h = AirInlet_Press_sensor.flow_model.h_in;
      AirInlet_Press_sensor.flow_model.T = AirInlet_Press_sensor.flow_model.T_in;
      AirInlet_Press_sensor.flow_model.DP = 0;
      AirInlet_Press_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirInlet_Press_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirInlet_Press_sensor.faulty_flow_rate) then 
        AirInlet_Press_sensor.mass_flow_rate_bias = 0;
      end if;
      AirInlet_Press_sensor.P = AirInlet_Press_sensor.C_in.P;
      AirInlet_Press_sensor.Q = AirInlet_Press_sensor.C_in.Q+AirInlet_Press_sensor.mass_flow_rate_bias;
      AirInlet_Press_sensor.Xi = inStream(AirInlet_Press_sensor.C_in.Xi_outflow);
      AirInlet_Press_sensor.h = inStream(AirInlet_Press_sensor.C_in.h_outflow);
      AirInlet_Press_sensor.state = setState_phX_Unique10(AirInlet_Press_sensor.P,
         AirInlet_Press_sensor.h, AirInlet_Press_sensor.Xi);
      assert(AirInlet_Press_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      AirInlet_Press_sensor.P_barA = AirInlet_Press_sensor.P*1E-05;
      AirInlet_Press_sensor.P_psiA = AirInlet_Press_sensor.P*0.000145038;
      AirInlet_Press_sensor.P_MPaA = AirInlet_Press_sensor.P*1E-06;
      AirInlet_Press_sensor.P_kPaA = AirInlet_Press_sensor.P*0.001;
      AirInlet_Press_sensor.P_barG = AirInlet_Press_sensor.P_barA-1;
      AirInlet_Press_sensor.P_psiG = AirInlet_Press_sensor.P_psiA-14.50377377;
      AirInlet_Press_sensor.P_MPaG = AirInlet_Press_sensor.P_MPaA-0.1;
      AirInlet_Press_sensor.P_kPaG = AirInlet_Press_sensor.P_kPaA-100;
      AirInlet_Press_sensor.P_mbar = AirInlet_Press_sensor.P*0.01;
      AirInlet_Press_sensor.P_inHg = AirInlet_Press_sensor.P*0.0002953006;
    // end of extends 
  equation
    AirInlet_Press_sensor.flow_model.C_in.P = AirInlet_Press_sensor.C_in.P;
    AirInlet_Press_sensor.C_in.Q-AirInlet_Press_sensor.flow_model.C_in.Q = 0.0;
    AirInlet_Press_sensor.flow_model.C_out.P = AirInlet_Press_sensor.C_out.P;
    AirInlet_Press_sensor.C_out.Q-AirInlet_Press_sensor.flow_model.C_out.Q = 0.0;

  // Component source1
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      source1.C_out.P = source1.P_out;
      source1.C_out.Q = source1.Q_out;
      source1.C_out.h_outflow = source1.h_out;
      source1.C_out.Xi_outflow = source1.Xi_out;
      source1.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (source1.P_out, source1.h_out, source1.Xi_out, 0, 0);
      source1.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        source1.state_out);
      source1.Qv_out = source1.Q_out/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        source1.state_out);
    // end of extends 

  // Component V423_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V423_valve.h_in = inStream(V423_valve.C_in.h_outflow);
      V423_valve.h_out = V423_valve.C_out.h_outflow;
      V423_valve.Q = V423_valve.C_in.Q;
      V423_valve.P_in = V423_valve.C_in.P;
      V423_valve.P_out = V423_valve.C_out.P;
      V423_valve.Xi = inStream(V423_valve.C_in.Xi_outflow);
      V423_valve.C_in.h_outflow = 1000000.0;
      V423_valve.C_in.Xi_outflow = zeros(0);
      V423_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V423_valve.P_in, V423_valve.h_in, V423_valve.Xi, 0, 0);
      V423_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V423_valve.P_out, V423_valve.h_out, V423_valve.Xi, 0, 0);
      V423_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V423_valve.state_in);
      V423_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V423_valve.state_out);
      V423_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V423_valve.state_in);
      V423_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V423_valve.state_out);
      V423_valve.rho = (V423_valve.rho_in+V423_valve.rho_out)/2;
      V423_valve.Qv_in = V423_valve.Q/V423_valve.rho_in;
      V423_valve.Qv_out =  -V423_valve.Q/V423_valve.rho_out;
      V423_valve.Qv = (V423_valve.Qv_in-V423_valve.Qv_out)/2;
      V423_valve.P_out-V423_valve.P_in = V423_valve.DP;
      V423_valve.Q*(V423_valve.h_out-V423_valve.h_in) = V423_valve.W;
      V423_valve.h_out-V423_valve.h_in = V423_valve.DH;
      V423_valve.T_out-V423_valve.T_in = V423_valve.DT;
      V423_valve.C_in.Q+V423_valve.C_out.Q = 0;
      V423_valve.C_out.Xi_outflow = inStream(V423_valve.C_in.Xi_outflow);
      assert(V423_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V423_valve.h = V423_valve.h_in;
      V423_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V423_valve.DP*V423_valve.Cv*abs(V423_valve.Cv) =  -1733000000000.0*abs(
        V423_valve.Q)*V423_valve.Q/V423_valve.rho_in^2;
      V423_valve.Cv = V423_valve.Opening*V423_valve.Cv_max;
    // end of extends 

  // Component V422_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V422_valve.h_in = inStream(V422_valve.C_in.h_outflow);
      V422_valve.h_out = V422_valve.C_out.h_outflow;
      V422_valve.Q = V422_valve.C_in.Q;
      V422_valve.P_in = V422_valve.C_in.P;
      V422_valve.P_out = V422_valve.C_out.P;
      V422_valve.Xi = inStream(V422_valve.C_in.Xi_outflow);
      V422_valve.C_in.h_outflow = 1000000.0;
      V422_valve.C_in.Xi_outflow = zeros(0);
      V422_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_valve.P_in, V422_valve.h_in, V422_valve.Xi, 0, 0);
      V422_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_valve.P_out, V422_valve.h_out, V422_valve.Xi, 0, 0);
      V422_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V422_valve.state_in);
      V422_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V422_valve.state_out);
      V422_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V422_valve.state_in);
      V422_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V422_valve.state_out);
      V422_valve.rho = (V422_valve.rho_in+V422_valve.rho_out)/2;
      V422_valve.Qv_in = V422_valve.Q/V422_valve.rho_in;
      V422_valve.Qv_out =  -V422_valve.Q/V422_valve.rho_out;
      V422_valve.Qv = (V422_valve.Qv_in-V422_valve.Qv_out)/2;
      V422_valve.P_out-V422_valve.P_in = V422_valve.DP;
      V422_valve.Q*(V422_valve.h_out-V422_valve.h_in) = V422_valve.W;
      V422_valve.h_out-V422_valve.h_in = V422_valve.DH;
      V422_valve.T_out-V422_valve.T_in = V422_valve.DT;
      V422_valve.C_in.Q+V422_valve.C_out.Q = 0;
      V422_valve.C_out.Xi_outflow = inStream(V422_valve.C_in.Xi_outflow);
      assert(V422_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V422_valve.h = V422_valve.h_in;
      V422_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V422_valve.DP*V422_valve.Cv*abs(V422_valve.Cv) =  -1733000000000.0*abs(
        V422_valve.Q)*V422_valve.Q/V422_valve.rho_in^2;
      V422_valve.Cv = V422_valve.Opening*V422_valve.Cv_max;
    // end of extends 

  // Component V423_opening_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    V423_opening_sensor.Opening_pc = V423_opening_sensor.Opening*100;

  // Component V422_opening_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    V422_opening_sensor.Opening_pc = V422_opening_sensor.Opening*100;

  // Component Q_reject_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_reject_sensor.flow_model.h_in = inStream(Q_reject_sensor.flow_model.C_in.h_outflow);
      Q_reject_sensor.flow_model.h_out = Q_reject_sensor.flow_model.C_out.h_outflow;
      Q_reject_sensor.flow_model.Q = Q_reject_sensor.flow_model.C_in.Q;
      Q_reject_sensor.flow_model.P_in = Q_reject_sensor.flow_model.C_in.P;
      Q_reject_sensor.flow_model.P_out = Q_reject_sensor.flow_model.C_out.P;
      Q_reject_sensor.flow_model.Xi = inStream(Q_reject_sensor.flow_model.C_in.Xi_outflow);
      Q_reject_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_reject_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_reject_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_sensor.flow_model.P_in, Q_reject_sensor.flow_model.h_in, 
        Q_reject_sensor.flow_model.Xi, 0, 0);
      Q_reject_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_sensor.flow_model.P_out, Q_reject_sensor.flow_model.h_out, 
        Q_reject_sensor.flow_model.Xi, 0, 0);
      Q_reject_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_sensor.flow_model.state_in);
      Q_reject_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_sensor.flow_model.state_out);
      Q_reject_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_sensor.flow_model.state_in);
      Q_reject_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_sensor.flow_model.state_out);
      Q_reject_sensor.flow_model.rho = (Q_reject_sensor.flow_model.rho_in+
        Q_reject_sensor.flow_model.rho_out)/2;
      Q_reject_sensor.flow_model.Qv_in = Q_reject_sensor.flow_model.Q/
        Q_reject_sensor.flow_model.rho_in;
      Q_reject_sensor.flow_model.Qv_out =  -Q_reject_sensor.flow_model.Q/
        Q_reject_sensor.flow_model.rho_out;
      Q_reject_sensor.flow_model.Qv = (Q_reject_sensor.flow_model.Qv_in-
        Q_reject_sensor.flow_model.Qv_out)/2;
      Q_reject_sensor.flow_model.P_out-Q_reject_sensor.flow_model.P_in = 
        Q_reject_sensor.flow_model.DP;
      Q_reject_sensor.flow_model.Q*(Q_reject_sensor.flow_model.h_out-
        Q_reject_sensor.flow_model.h_in) = Q_reject_sensor.flow_model.W;
      Q_reject_sensor.flow_model.h_out-Q_reject_sensor.flow_model.h_in = 
        Q_reject_sensor.flow_model.DH;
      Q_reject_sensor.flow_model.T_out-Q_reject_sensor.flow_model.T_in = 
        Q_reject_sensor.flow_model.DT;
      Q_reject_sensor.flow_model.C_in.Q+Q_reject_sensor.flow_model.C_out.Q = 0;
      Q_reject_sensor.flow_model.C_out.Xi_outflow = inStream(Q_reject_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_reject_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_reject_sensor.flow_model.P = Q_reject_sensor.flow_model.P_in;
      Q_reject_sensor.flow_model.h = Q_reject_sensor.flow_model.h_in;
      Q_reject_sensor.flow_model.T = Q_reject_sensor.flow_model.T_in;
      Q_reject_sensor.flow_model.DP = 0;
      Q_reject_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_reject_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_reject_sensor.faulty_flow_rate) then 
        Q_reject_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_reject_sensor.P = Q_reject_sensor.C_in.P;
      Q_reject_sensor.Q = Q_reject_sensor.C_in.Q+Q_reject_sensor.mass_flow_rate_bias;
      Q_reject_sensor.Xi = inStream(Q_reject_sensor.C_in.Xi_outflow);
      Q_reject_sensor.h = inStream(Q_reject_sensor.C_in.h_outflow);
      Q_reject_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_sensor.P, Q_reject_sensor.h, Q_reject_sensor.Xi, 0, 0);
      assert(Q_reject_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Q_reject_sensor.Qv = Q_reject_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_sensor.state);
      Q_reject_sensor.Q_lm = Q_reject_sensor.Qv*60000;
      Q_reject_sensor.Q_th = Q_reject_sensor.Q*3.6;
      Q_reject_sensor.Q_lbs = Q_reject_sensor.Q*0.453592428;
      Q_reject_sensor.Q_Mlbh = Q_reject_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Q_reject_sensor.flow_model.C_in.P = Q_reject_sensor.C_in.P;
    Q_reject_sensor.C_in.Q-Q_reject_sensor.flow_model.C_in.Q = 0.0;
    Q_reject_sensor.flow_model.C_out.P = Q_reject_sensor.C_out.P;
    Q_reject_sensor.C_out.Q-Q_reject_sensor.flow_model.C_out.Q = 0.0;

  // Component Q_reject_press_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_reject_press_sensor.flow_model.h_in = inStream(Q_reject_press_sensor.flow_model.C_in.h_outflow);
      Q_reject_press_sensor.flow_model.h_out = Q_reject_press_sensor.flow_model.C_out.h_outflow;
      Q_reject_press_sensor.flow_model.Q = Q_reject_press_sensor.flow_model.C_in.Q;
      Q_reject_press_sensor.flow_model.P_in = Q_reject_press_sensor.flow_model.C_in.P;
      Q_reject_press_sensor.flow_model.P_out = Q_reject_press_sensor.flow_model.C_out.P;
      Q_reject_press_sensor.flow_model.Xi = inStream(Q_reject_press_sensor.flow_model.C_in.Xi_outflow);
      Q_reject_press_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_reject_press_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_reject_press_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.flow_model.P_in, Q_reject_press_sensor.flow_model.h_in,
         Q_reject_press_sensor.flow_model.Xi, 0, 0);
      Q_reject_press_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.flow_model.P_out, Q_reject_press_sensor.flow_model.h_out,
         Q_reject_press_sensor.flow_model.Xi, 0, 0);
      Q_reject_press_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_press_sensor.flow_model.state_in);
      Q_reject_press_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_press_sensor.flow_model.state_out);
      Q_reject_press_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_press_sensor.flow_model.state_in);
      Q_reject_press_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_press_sensor.flow_model.state_out);
      Q_reject_press_sensor.flow_model.rho = (Q_reject_press_sensor.flow_model.rho_in
        +Q_reject_press_sensor.flow_model.rho_out)/2;
      Q_reject_press_sensor.flow_model.Qv_in = Q_reject_press_sensor.flow_model.Q
        /Q_reject_press_sensor.flow_model.rho_in;
      Q_reject_press_sensor.flow_model.Qv_out =  -Q_reject_press_sensor.flow_model.Q
        /Q_reject_press_sensor.flow_model.rho_out;
      Q_reject_press_sensor.flow_model.Qv = (Q_reject_press_sensor.flow_model.Qv_in
        -Q_reject_press_sensor.flow_model.Qv_out)/2;
      Q_reject_press_sensor.flow_model.P_out-Q_reject_press_sensor.flow_model.P_in
         = Q_reject_press_sensor.flow_model.DP;
      Q_reject_press_sensor.flow_model.Q*(Q_reject_press_sensor.flow_model.h_out
        -Q_reject_press_sensor.flow_model.h_in) = Q_reject_press_sensor.flow_model.W;
      Q_reject_press_sensor.flow_model.h_out-Q_reject_press_sensor.flow_model.h_in
         = Q_reject_press_sensor.flow_model.DH;
      Q_reject_press_sensor.flow_model.T_out-Q_reject_press_sensor.flow_model.T_in
         = Q_reject_press_sensor.flow_model.DT;
      Q_reject_press_sensor.flow_model.C_in.Q+Q_reject_press_sensor.flow_model.C_out.Q
         = 0;
      Q_reject_press_sensor.flow_model.C_out.Xi_outflow = inStream(
        Q_reject_press_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_reject_press_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_reject_press_sensor.flow_model.P = Q_reject_press_sensor.flow_model.P_in;
      Q_reject_press_sensor.flow_model.h = Q_reject_press_sensor.flow_model.h_in;
      Q_reject_press_sensor.flow_model.T = Q_reject_press_sensor.flow_model.T_in;
      Q_reject_press_sensor.flow_model.DP = 0;
      Q_reject_press_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_reject_press_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_reject_press_sensor.faulty_flow_rate) then 
        Q_reject_press_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_reject_press_sensor.P = Q_reject_press_sensor.C_in.P;
      Q_reject_press_sensor.Q = Q_reject_press_sensor.C_in.Q+Q_reject_press_sensor.mass_flow_rate_bias;
      Q_reject_press_sensor.Xi = inStream(Q_reject_press_sensor.C_in.Xi_outflow);
      Q_reject_press_sensor.h = inStream(Q_reject_press_sensor.C_in.h_outflow);
      Q_reject_press_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.P, Q_reject_press_sensor.h, Q_reject_press_sensor.Xi,
         0, 0);
      assert(Q_reject_press_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Q_reject_press_sensor.P_barA = Q_reject_press_sensor.P*1E-05;
      Q_reject_press_sensor.P_psiA = Q_reject_press_sensor.P*0.000145038;
      Q_reject_press_sensor.P_MPaA = Q_reject_press_sensor.P*1E-06;
      Q_reject_press_sensor.P_kPaA = Q_reject_press_sensor.P*0.001;
      Q_reject_press_sensor.P_barG = Q_reject_press_sensor.P_barA-1;
      Q_reject_press_sensor.P_psiG = Q_reject_press_sensor.P_psiA-14.50377377;
      Q_reject_press_sensor.P_MPaG = Q_reject_press_sensor.P_MPaA-0.1;
      Q_reject_press_sensor.P_kPaG = Q_reject_press_sensor.P_kPaA-100;
      Q_reject_press_sensor.P_mbar = Q_reject_press_sensor.P*0.01;
      Q_reject_press_sensor.P_inHg = Q_reject_press_sensor.P*0.0002953006;
    // end of extends 
  equation
    Q_reject_press_sensor.flow_model.C_in.P = Q_reject_press_sensor.C_in.P;
    Q_reject_press_sensor.C_in.Q-Q_reject_press_sensor.flow_model.C_in.Q = 0.0;
    Q_reject_press_sensor.flow_model.C_out.P = Q_reject_press_sensor.C_out.P;
    Q_reject_press_sensor.C_out.Q-Q_reject_press_sensor.flow_model.C_out.Q = 0.0;

  // Component Pump
  // class MetroscopeModelingLibrary.WaterSteam.Machines.Pump
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Pump.h_in = inStream(Pump.C_in.h_outflow);
      Pump.h_out = Pump.C_out.h_outflow;
      Pump.Q = Pump.C_in.Q;
      Pump.P_in = Pump.C_in.P;
      Pump.P_out = Pump.C_out.P;
      Pump.Xi = inStream(Pump.C_in.Xi_outflow);
      Pump.C_in.h_outflow = 1000000.0;
      Pump.C_in.Xi_outflow = zeros(0);
      Pump.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        Pump.P_in, Pump.h_in, Pump.Xi, 0, 0);
      Pump.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        Pump.P_out, Pump.h_out, Pump.Xi, 0, 0);
      Pump.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        Pump.state_in);
      Pump.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        Pump.state_out);
      Pump.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        Pump.state_in);
      Pump.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        Pump.state_out);
      Pump.rho = (Pump.rho_in+Pump.rho_out)/2;
      Pump.Qv_in = Pump.Q/Pump.rho_in;
      Pump.Qv_out =  -Pump.Q/Pump.rho_out;
      Pump.Qv = (Pump.Qv_in-Pump.Qv_out)/2;
      Pump.P_out-Pump.P_in = Pump.DP;
      Pump.Q*(Pump.h_out-Pump.h_in) = Pump.W;
      Pump.h_out-Pump.h_in = Pump.DH;
      Pump.T_out-Pump.T_in = Pump.DT;
      Pump.C_in.Q+Pump.C_out.Q = 0;
      Pump.C_out.Xi_outflow = inStream(Pump.C_in.Xi_outflow);
      assert(Pump.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Machines.Pump
    equation
      Pump.R = Pump.VRot/Pump.VRotn;
      Pump.hn = Pump.a1*Pump.Qv^2+Pump.a2*Pump.Qv*Pump.R+Pump.a3*Pump.R^2;
      Pump.rh = noEvent(max((if Pump.R > 1E-05 then Pump.b1*Pump.Qv^2/Pump.R^2+
        Pump.b2*Pump.Qv/Pump.R+Pump.b3 else Pump.b3), Pump.rh_min));
      Pump.DP = Pump.rho*9.80665*Pump.hn;
      Pump.DH = 9.80665*Pump.hn/Pump.rh;
      Pump.Wm = Pump.C_power.W;
      Pump.Wm = Pump.W/Pump.rm;
      Pump.Wh = Pump.Qv*Pump.DP/Pump.rh;
    // end of extends 

  // Component CEC180_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC180_sensor.flow_model.h_in = inStream(CEC180_sensor.flow_model.C_in.h_outflow);
      CEC180_sensor.flow_model.h_out = CEC180_sensor.flow_model.C_out.h_outflow;
      CEC180_sensor.flow_model.Q = CEC180_sensor.flow_model.C_in.Q;
      CEC180_sensor.flow_model.P_in = CEC180_sensor.flow_model.C_in.P;
      CEC180_sensor.flow_model.P_out = CEC180_sensor.flow_model.C_out.P;
      CEC180_sensor.flow_model.Xi = inStream(CEC180_sensor.flow_model.C_in.Xi_outflow);
      CEC180_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC180_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC180_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC180_sensor.flow_model.P_in, CEC180_sensor.flow_model.h_in, 
        CEC180_sensor.flow_model.Xi, 0, 0);
      CEC180_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC180_sensor.flow_model.P_out, CEC180_sensor.flow_model.h_out, 
        CEC180_sensor.flow_model.Xi, 0, 0);
      CEC180_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC180_sensor.flow_model.state_in);
      CEC180_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC180_sensor.flow_model.state_out);
      CEC180_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC180_sensor.flow_model.state_in);
      CEC180_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC180_sensor.flow_model.state_out);
      CEC180_sensor.flow_model.rho = (CEC180_sensor.flow_model.rho_in+
        CEC180_sensor.flow_model.rho_out)/2;
      CEC180_sensor.flow_model.Qv_in = CEC180_sensor.flow_model.Q/
        CEC180_sensor.flow_model.rho_in;
      CEC180_sensor.flow_model.Qv_out =  -CEC180_sensor.flow_model.Q/
        CEC180_sensor.flow_model.rho_out;
      CEC180_sensor.flow_model.Qv = (CEC180_sensor.flow_model.Qv_in-
        CEC180_sensor.flow_model.Qv_out)/2;
      CEC180_sensor.flow_model.P_out-CEC180_sensor.flow_model.P_in = 
        CEC180_sensor.flow_model.DP;
      CEC180_sensor.flow_model.Q*(CEC180_sensor.flow_model.h_out-
        CEC180_sensor.flow_model.h_in) = CEC180_sensor.flow_model.W;
      CEC180_sensor.flow_model.h_out-CEC180_sensor.flow_model.h_in = 
        CEC180_sensor.flow_model.DH;
      CEC180_sensor.flow_model.T_out-CEC180_sensor.flow_model.T_in = 
        CEC180_sensor.flow_model.DT;
      CEC180_sensor.flow_model.C_in.Q+CEC180_sensor.flow_model.C_out.Q = 0;
      CEC180_sensor.flow_model.C_out.Xi_outflow = inStream(CEC180_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC180_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC180_sensor.flow_model.P = CEC180_sensor.flow_model.P_in;
      CEC180_sensor.flow_model.h = CEC180_sensor.flow_model.h_in;
      CEC180_sensor.flow_model.T = CEC180_sensor.flow_model.T_in;
      CEC180_sensor.flow_model.DP = 0;
      CEC180_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC180_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC180_sensor.faulty_flow_rate) then 
        CEC180_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC180_sensor.P = CEC180_sensor.C_in.P;
      CEC180_sensor.Q = CEC180_sensor.C_in.Q+CEC180_sensor.mass_flow_rate_bias;
      CEC180_sensor.Xi = inStream(CEC180_sensor.C_in.Xi_outflow);
      CEC180_sensor.h = inStream(CEC180_sensor.C_in.h_outflow);
      CEC180_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC180_sensor.P, CEC180_sensor.h, CEC180_sensor.Xi, 0, 0);
      assert(CEC180_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC180_sensor.T = CEC180_sensor.flow_model.T;
      CEC180_sensor.T_degC+273.15 = CEC180_sensor.T;
      CEC180_sensor.T_degF = CEC180_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC180_sensor.flow_model.C_in.P = CEC180_sensor.C_in.P;
    CEC180_sensor.C_in.Q-CEC180_sensor.flow_model.C_in.Q = 0.0;
    CEC180_sensor.flow_model.C_out.P = CEC180_sensor.C_out.P;
    CEC180_sensor.C_out.Q-CEC180_sensor.flow_model.C_out.Q = 0.0;

  // Component Press1_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Press1_sensor.flow_model.h_in = inStream(Press1_sensor.flow_model.C_in.h_outflow);
      Press1_sensor.flow_model.h_out = Press1_sensor.flow_model.C_out.h_outflow;
      Press1_sensor.flow_model.Q = Press1_sensor.flow_model.C_in.Q;
      Press1_sensor.flow_model.P_in = Press1_sensor.flow_model.C_in.P;
      Press1_sensor.flow_model.P_out = Press1_sensor.flow_model.C_out.P;
      Press1_sensor.flow_model.Xi = inStream(Press1_sensor.flow_model.C_in.Xi_outflow);
      Press1_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Press1_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Press1_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.flow_model.P_in, Press1_sensor.flow_model.h_in, 
        Press1_sensor.flow_model.Xi, 0, 0);
      Press1_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.flow_model.P_out, Press1_sensor.flow_model.h_out, 
        Press1_sensor.flow_model.Xi, 0, 0);
      Press1_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press1_sensor.flow_model.state_in);
      Press1_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press1_sensor.flow_model.state_out);
      Press1_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press1_sensor.flow_model.state_in);
      Press1_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press1_sensor.flow_model.state_out);
      Press1_sensor.flow_model.rho = (Press1_sensor.flow_model.rho_in+
        Press1_sensor.flow_model.rho_out)/2;
      Press1_sensor.flow_model.Qv_in = Press1_sensor.flow_model.Q/
        Press1_sensor.flow_model.rho_in;
      Press1_sensor.flow_model.Qv_out =  -Press1_sensor.flow_model.Q/
        Press1_sensor.flow_model.rho_out;
      Press1_sensor.flow_model.Qv = (Press1_sensor.flow_model.Qv_in-
        Press1_sensor.flow_model.Qv_out)/2;
      Press1_sensor.flow_model.P_out-Press1_sensor.flow_model.P_in = 
        Press1_sensor.flow_model.DP;
      Press1_sensor.flow_model.Q*(Press1_sensor.flow_model.h_out-
        Press1_sensor.flow_model.h_in) = Press1_sensor.flow_model.W;
      Press1_sensor.flow_model.h_out-Press1_sensor.flow_model.h_in = 
        Press1_sensor.flow_model.DH;
      Press1_sensor.flow_model.T_out-Press1_sensor.flow_model.T_in = 
        Press1_sensor.flow_model.DT;
      Press1_sensor.flow_model.C_in.Q+Press1_sensor.flow_model.C_out.Q = 0;
      Press1_sensor.flow_model.C_out.Xi_outflow = inStream(Press1_sensor.flow_model.C_in.Xi_outflow);
      assert(Press1_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Press1_sensor.flow_model.P = Press1_sensor.flow_model.P_in;
      Press1_sensor.flow_model.h = Press1_sensor.flow_model.h_in;
      Press1_sensor.flow_model.T = Press1_sensor.flow_model.T_in;
      Press1_sensor.flow_model.DP = 0;
      Press1_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Press1_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Press1_sensor.faulty_flow_rate) then 
        Press1_sensor.mass_flow_rate_bias = 0;
      end if;
      Press1_sensor.P = Press1_sensor.C_in.P;
      Press1_sensor.Q = Press1_sensor.C_in.Q+Press1_sensor.mass_flow_rate_bias;
      Press1_sensor.Xi = inStream(Press1_sensor.C_in.Xi_outflow);
      Press1_sensor.h = inStream(Press1_sensor.C_in.h_outflow);
      Press1_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.P, Press1_sensor.h, Press1_sensor.Xi, 0, 0);
      assert(Press1_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Press1_sensor.P_barA = Press1_sensor.P*1E-05;
      Press1_sensor.P_psiA = Press1_sensor.P*0.000145038;
      Press1_sensor.P_MPaA = Press1_sensor.P*1E-06;
      Press1_sensor.P_kPaA = Press1_sensor.P*0.001;
      Press1_sensor.P_barG = Press1_sensor.P_barA-1;
      Press1_sensor.P_psiG = Press1_sensor.P_psiA-14.50377377;
      Press1_sensor.P_MPaG = Press1_sensor.P_MPaA-0.1;
      Press1_sensor.P_kPaG = Press1_sensor.P_kPaA-100;
      Press1_sensor.P_mbar = Press1_sensor.P*0.01;
      Press1_sensor.P_inHg = Press1_sensor.P*0.0002953006;
    // end of extends 
  equation
    Press1_sensor.flow_model.C_in.P = Press1_sensor.C_in.P;
    Press1_sensor.C_in.Q-Press1_sensor.flow_model.C_in.Q = 0.0;
    Press1_sensor.flow_model.C_out.P = Press1_sensor.C_out.P;
    Press1_sensor.C_out.Q-Press1_sensor.flow_model.C_out.Q = 0.0;

  // Component source
  // class MetroscopeModelingLibrary.Power.BoundaryConditions.Source
  equation
    source.W_out = source.C_out.W;

  // Component V421_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V421_valve.h_in = inStream(V421_valve.C_in.h_outflow);
      V421_valve.h_out = V421_valve.C_out.h_outflow;
      V421_valve.Q = V421_valve.C_in.Q;
      V421_valve.P_in = V421_valve.C_in.P;
      V421_valve.P_out = V421_valve.C_out.P;
      V421_valve.Xi = inStream(V421_valve.C_in.Xi_outflow);
      V421_valve.C_in.h_outflow = 1000000.0;
      V421_valve.C_in.Xi_outflow = zeros(0);
      V421_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V421_valve.P_in, V421_valve.h_in, V421_valve.Xi, 0, 0);
      V421_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V421_valve.P_out, V421_valve.h_out, V421_valve.Xi, 0, 0);
      V421_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V421_valve.state_in);
      V421_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V421_valve.state_out);
      V421_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V421_valve.state_in);
      V421_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V421_valve.state_out);
      V421_valve.rho = (V421_valve.rho_in+V421_valve.rho_out)/2;
      V421_valve.Qv_in = V421_valve.Q/V421_valve.rho_in;
      V421_valve.Qv_out =  -V421_valve.Q/V421_valve.rho_out;
      V421_valve.Qv = (V421_valve.Qv_in-V421_valve.Qv_out)/2;
      V421_valve.P_out-V421_valve.P_in = V421_valve.DP;
      V421_valve.Q*(V421_valve.h_out-V421_valve.h_in) = V421_valve.W;
      V421_valve.h_out-V421_valve.h_in = V421_valve.DH;
      V421_valve.T_out-V421_valve.T_in = V421_valve.DT;
      V421_valve.C_in.Q+V421_valve.C_out.Q = 0;
      V421_valve.C_out.Xi_outflow = inStream(V421_valve.C_in.Xi_outflow);
      assert(V421_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V421_valve.h = V421_valve.h_in;
      V421_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V421_valve.DP*V421_valve.Cv*abs(V421_valve.Cv) =  -1733000000000.0*abs(
        V421_valve.Q)*V421_valve.Q/V421_valve.rho_in^2;
      V421_valve.Cv = V421_valve.Opening*V421_valve.Cv_max;
    // end of extends 

  // Component V421_opening_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    V421_opening_sensor.Opening_pc = V421_opening_sensor.Opening*100;

  // Component Q_recirculation_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_recirculation_sensor.flow_model.h_in = inStream(Q_recirculation_sensor.flow_model.C_in.h_outflow);
      Q_recirculation_sensor.flow_model.h_out = Q_recirculation_sensor.flow_model.C_out.h_outflow;
      Q_recirculation_sensor.flow_model.Q = Q_recirculation_sensor.flow_model.C_in.Q;
      Q_recirculation_sensor.flow_model.P_in = Q_recirculation_sensor.flow_model.C_in.P;
      Q_recirculation_sensor.flow_model.P_out = Q_recirculation_sensor.flow_model.C_out.P;
      Q_recirculation_sensor.flow_model.Xi = inStream(Q_recirculation_sensor.flow_model.C_in.Xi_outflow);
      Q_recirculation_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_recirculation_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_recirculation_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.flow_model.P_in, Q_recirculation_sensor.flow_model.h_in,
         Q_recirculation_sensor.flow_model.Xi, 0, 0);
      Q_recirculation_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.flow_model.P_out, Q_recirculation_sensor.flow_model.h_out,
         Q_recirculation_sensor.flow_model.Xi, 0, 0);
      Q_recirculation_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_recirculation_sensor.flow_model.state_in);
      Q_recirculation_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_recirculation_sensor.flow_model.state_out);
      Q_recirculation_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.flow_model.state_in);
      Q_recirculation_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.flow_model.state_out);
      Q_recirculation_sensor.flow_model.rho = (Q_recirculation_sensor.flow_model.rho_in
        +Q_recirculation_sensor.flow_model.rho_out)/2;
      Q_recirculation_sensor.flow_model.Qv_in = Q_recirculation_sensor.flow_model.Q
        /Q_recirculation_sensor.flow_model.rho_in;
      Q_recirculation_sensor.flow_model.Qv_out =  -Q_recirculation_sensor.flow_model.Q
        /Q_recirculation_sensor.flow_model.rho_out;
      Q_recirculation_sensor.flow_model.Qv = (Q_recirculation_sensor.flow_model.Qv_in
        -Q_recirculation_sensor.flow_model.Qv_out)/2;
      Q_recirculation_sensor.flow_model.P_out-Q_recirculation_sensor.flow_model.P_in
         = Q_recirculation_sensor.flow_model.DP;
      Q_recirculation_sensor.flow_model.Q*(Q_recirculation_sensor.flow_model.h_out
        -Q_recirculation_sensor.flow_model.h_in) = Q_recirculation_sensor.flow_model.W;
      Q_recirculation_sensor.flow_model.h_out-Q_recirculation_sensor.flow_model.h_in
         = Q_recirculation_sensor.flow_model.DH;
      Q_recirculation_sensor.flow_model.T_out-Q_recirculation_sensor.flow_model.T_in
         = Q_recirculation_sensor.flow_model.DT;
      Q_recirculation_sensor.flow_model.C_in.Q+Q_recirculation_sensor.flow_model.C_out.Q
         = 0;
      Q_recirculation_sensor.flow_model.C_out.Xi_outflow = inStream(
        Q_recirculation_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_recirculation_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_recirculation_sensor.flow_model.P = Q_recirculation_sensor.flow_model.P_in;
      Q_recirculation_sensor.flow_model.h = Q_recirculation_sensor.flow_model.h_in;
      Q_recirculation_sensor.flow_model.T = Q_recirculation_sensor.flow_model.T_in;
      Q_recirculation_sensor.flow_model.DP = 0;
      Q_recirculation_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_recirculation_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_recirculation_sensor.faulty_flow_rate) then 
        Q_recirculation_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_recirculation_sensor.P = Q_recirculation_sensor.C_in.P;
      Q_recirculation_sensor.Q = Q_recirculation_sensor.C_in.Q+Q_recirculation_sensor.mass_flow_rate_bias;
      Q_recirculation_sensor.Xi = inStream(Q_recirculation_sensor.C_in.Xi_outflow);
      Q_recirculation_sensor.h = inStream(Q_recirculation_sensor.C_in.h_outflow);
      Q_recirculation_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.P, Q_recirculation_sensor.h, Q_recirculation_sensor.Xi,
         0, 0);
      assert(Q_recirculation_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Q_recirculation_sensor.Qv = Q_recirculation_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.state);
      Q_recirculation_sensor.Q_lm = Q_recirculation_sensor.Qv*60000;
      Q_recirculation_sensor.Q_th = Q_recirculation_sensor.Q*3.6;
      Q_recirculation_sensor.Q_lbs = Q_recirculation_sensor.Q*0.453592428;
      Q_recirculation_sensor.Q_Mlbh = Q_recirculation_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Q_recirculation_sensor.flow_model.C_in.P = Q_recirculation_sensor.C_in.P;
    Q_recirculation_sensor.C_in.Q-Q_recirculation_sensor.flow_model.C_in.Q = 0.0;
    Q_recirculation_sensor.flow_model.C_out.P = Q_recirculation_sensor.C_out.P;
    Q_recirculation_sensor.C_out.Q-Q_recirculation_sensor.flow_model.C_out.Q = 
      0.0;

  // This model
  // class TIH3_CoolingLoop.TIH_CoolingLoop_Rev5_Poppe_Start_Values
    // extends TIH3_CoolingLoop.TIH_CoolingLoop_Rev5_Poppe
    equation
      Hotside_Temp_sensor.T_degC = Hotside_Temp;
      VCT178_sensor.P_barA = VCT178;
      CEC180_sensor.T_degC = CEC180;
      Press1_sensor.P_barA = Pressure1;
      AirInlet_Temp_sensor.T_degC = AirInlet_Temp;
      AirInlet_Press_sensor.P_barA = AirInlet_Press;
      AirSource.relative_humidity = AirSource_relative_humidity;
      Q_reject_press_sensor.P_barA = Q_reject_press;
      Coldside_Flow_sensor.Q = Coldside_Flow;
      Hotside_Flow_sensor.Q = Hotside_Flow;
      LOA.S = 100;
      LOA.water_height = 1;
      LOA.C_incond = 0;
      LOA.P_offset = 0;
      LOA.Kfr_cold = 0;
      LOA.Kth = LOA_Kth;
      CEC231_sensor.T_degC = CEC231;
      Coldside_Press_sensor.P_barA = Coldside_Press;
      Pump.Qv = Pump_Qv;
      Pump.VRotn = 4000;
      Pump.VRot = 4000;
      Pump.rm = 0.85;
      Pump.a1 = 0;
      Pump.a2 = 0;
      Pump.b1 = 0;
      Pump.b2 = 0;
      Pump.rh_min = 0.2;
      Pump.hn = Extraction_Pump_hn;
      Pump.rh = Extraction_Pump_rh;
      CEC235_sensor.T_degC = CEC235;
      CEC194_sensor.T_degC = CEC194;
      CoolingTower.Lfi = 15;
      CoolingTower.Afr = 3000;
      CoolingTower.Cf = 0.025509778;
      CoolingTower.hd = hd;
      CoolingTower.V_inlet = V_inlet;
      V423_opening_sensor.Opening = V423_opening;
      V422_opening_sensor.Opening = V422_opening;
      V421_opening_sensor.Opening = V421_opening;
      V423_valve.Cv_max = Cvmax_V423;
      V422_valve.Cv_max = Cvmax_V422;
      V421_valve.Cv_max = Cvmax_V421;
      V423_valve.Qv = V422_valve.Qv;
      V423_valve.Qv = V421_valve.Qv;
      Q_reject_sensor.Q = Q_reject;
      Q_recirculation_sensor.Q = Q_recirculation;
    // end of extends 
  equation
    AirSource.C_out.P = AirInlet_Flow_sensor.C_in.P;
    AirInlet_Flow_sensor.C_in.Q+AirSource.C_out.Q = 0.0;
    AirInlet_Temp_sensor.C_in.P = AirInlet_Flow_sensor.C_out.P;
    AirInlet_Flow_sensor.C_out.Q+AirInlet_Temp_sensor.C_in.Q = 0.0;
    AirInlet_Temp_sensor.C_out.P = AirInlet_Press_sensor.C_in.P;
    AirInlet_Press_sensor.C_in.Q+AirInlet_Temp_sensor.C_out.Q = 0.0;
    CoolingTower.air_inlet_connector.P = AirInlet_Press_sensor.C_out.P;
    AirInlet_Press_sensor.C_out.Q+CoolingTower.air_inlet_connector.Q = 0.0;
    Coldside_Flow_sensor.C_out.P = CEC180_sensor.C_in.P;
    CEC180_sensor.C_in.Q+Coldside_Flow_sensor.C_out.Q = 0.0;
    Press1_sensor.C_in.P = CEC180_sensor.C_out.P;
    CEC180_sensor.C_out.Q+Press1_sensor.C_in.Q = 0.0;
    CoolingTower.water_outlet_connector.P = CEC194_sensor.C_in.P;
    CEC194_sensor.C_in.Q+CoolingTower.water_outlet_connector.Q = 0.0;
    CEC197_sensor.C_in.P = CEC194_sensor.C_out.P;
    CEC194_sensor.C_out.Q+CEC197_sensor.C_in.Q = 0.0;
    V421_valve.C_in.P = CEC197_sensor.C_out.P;
    V422_valve.C_in.P = CEC197_sensor.C_out.P;
    V423_valve.C_in.P = CEC197_sensor.C_out.P;
    CEC197_sensor.C_out.Q+V421_valve.C_in.Q+V422_valve.C_in.Q+V423_valve.C_in.Q
       = 0.0;
    Pump.C_out.P = CEC231_sensor.C_in.P;
    CEC231_sensor.C_in.Q+Pump.C_out.Q = 0.0;
    Coldside_Press_sensor.C_in.P = CEC231_sensor.C_out.P;
    CEC231_sensor.C_out.Q+Coldside_Press_sensor.C_in.Q = 0.0;
    LOA.C_cold_out.P = CEC235_sensor.C_in.P;
    CEC235_sensor.C_in.Q+LOA.C_cold_out.Q = 0.0;
    CoolingTower.water_inlet_connector.P = CEC235_sensor.C_out.P;
    CEC235_sensor.C_out.Q+CoolingTower.water_inlet_connector.Q = 0.0;
    source1.C_out.P = Coldside_Flow_sensor.C_in.P;
    Coldside_Flow_sensor.C_in.Q+source1.C_out.Q = 0.0;
    LOA.C_cold_in.P = Coldside_Press_sensor.C_out.P;
    Coldside_Press_sensor.C_out.Q+LOA.C_cold_in.Q = 0.0;
    sink.C_in.P = CoolingTower.air_outlet_connector.P;
    CoolingTower.air_outlet_connector.Q+sink.C_in.Q = 0.0;
    turbine_outlet.C_out.P = Hotside_Flow_sensor.C_in.P;
    Hotside_Flow_sensor.C_in.Q+turbine_outlet.C_out.Q = 0.0;
    Hotside_Temp_sensor.C_in.P = Hotside_Flow_sensor.C_out.P;
    Hotside_Flow_sensor.C_out.Q+Hotside_Temp_sensor.C_in.Q = 0.0;
    VCT178_sensor.C_in.P = Hotside_Temp_sensor.C_out.P;
    Hotside_Temp_sensor.C_out.Q+VCT178_sensor.C_in.Q = 0.0;
    VCT178_sensor.C_out.P = LOA.C_hot_in.P;
    LOA.C_hot_in.Q+VCT178_sensor.C_out.Q = 0.0;
    condensate_sink.C_in.P = LOA.C_hot_out.P;
    LOA.C_hot_out.Q+condensate_sink.C_in.Q = 0.0;
    Pump.C_in.P = Press1_sensor.C_out.P;
    Q_recirculation_sensor.C_out.P = Press1_sensor.C_out.P;
    Press1_sensor.C_out.Q+Pump.C_in.Q+Q_recirculation_sensor.C_out.Q = 0.0;
    Pump.C_power.W+source.C_out.W = 0.0;
    V421_valve.C_out.P = Q_recirculation_sensor.C_in.P;
    Q_recirculation_sensor.C_in.Q+V421_valve.C_out.Q = 0.0;
    Q_reject_sensor.C_out.P = Q_reject_press_sensor.C_in.P;
    Q_reject_press_sensor.C_in.Q+Q_reject_sensor.C_out.Q = 0.0;
    cooling_sink.C_in.P = Q_reject_press_sensor.C_out.P;
    Q_reject_press_sensor.C_out.Q+cooling_sink.C_in.Q = 0.0;
    V422_valve.C_out.P = Q_reject_sensor.C_in.P;
    V423_valve.C_out.P = Q_reject_sensor.C_in.P;
    Q_reject_sensor.C_in.Q+V422_valve.C_out.Q+V423_valve.C_out.Q = 0.0;
    V421_valve.Opening = V421_opening_sensor.Opening;
    V422_valve.Opening = V422_opening_sensor.Opening;
    V423_valve.Opening = V423_opening_sensor.Opening;

end TIH_CoolingLoop_Rev5_Poppe_Start_Values;
