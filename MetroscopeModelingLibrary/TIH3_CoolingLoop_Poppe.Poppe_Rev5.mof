model Poppe_Rev5
  input Real AirInletTemp(start = 10) "deg_C";
  input Real airInletPress(start = 1) "bar";
  input MetroscopeModelingLibrary.Utilities.Units.Fraction cold_source_relative_humidity
    (start = 0.5) "1";
  input Real WaterOutletTemp(start = 18.9) "deg_C";
  parameter MetroscopeModelingLibrary.Utilities.Units.Area Afr = 3000;
  parameter Real Lfi = 15;
  parameter Real Cf = 0.025509778;
  input Real Press2(start = 0.055);
  input Real Temp2(start = 40);
  input Real Temp1(start = 18.99);
  input Real Press1(start = 5);
  input Real CEC197(start = 5.5) "m3/s";
  input Real V423_opening(start = 0.35);
  input Real V422_opening(start = 0.15);
  input Real Q_reject_press(start = 2.99) "bar";
  input Real Pump_Qv(start = 37.3) "m3/s";
  input Real CEC809(start = 18.9) "deg_C";
  input Real Press3(start = 1) "bar";
  input Real V421_opening(start = 15);
  parameter Integer CoolingTower.N_step = 10;
  constant Real CoolingTower.gr(unit = "m/s2") = 9.80665;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_in_0 = CoolingTower.water_inlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_out_0 = CoolingTower.water_inlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_inlet_flow.DP_0 = CoolingTower.water_inlet_flow.P_out_0-
    CoolingTower.water_inlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_in_0 = CoolingTower.water_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_out_0 = CoolingTower.water_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_inlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_inlet_flow.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_in_0 = CoolingTower.water_outlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_out_0 = CoolingTower.water_outlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_outlet_flow.DP_0 = CoolingTower.water_outlet_flow.P_out_0
    -CoolingTower.water_outlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_in_0 = CoolingTower.water_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_out_0 = CoolingTower.water_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.water_outlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.water_outlet_flow.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_in_0 = CoolingTower.air_inlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_out_0 = CoolingTower.air_inlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_inlet_flow.DP_0 = CoolingTower.air_inlet_flow.P_out_0-
    CoolingTower.air_inlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_in_0 = CoolingTower.air_inlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_out_0 = 108262.83;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_inlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_inlet_flow.h_0 = 500000.0;
  parameter Real CoolingTower.air_inlet.relative_humidity_0(min = 0.0, max = 1.0)
     = 0.1;
  parameter Real CoolingTower.air_outlet.relative_humidity_0(min = 0.0, max = 
    1.0) = 0.1;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_in_0 = CoolingTower.air_outlet_flow.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_out_0 = CoolingTower.air_outlet_flow.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_outlet_flow.DP_0 = CoolingTower.air_outlet_flow.P_out_0-
    CoolingTower.air_outlet_flow.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_in_0 = CoolingTower.air_outlet_flow.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_out_0 = 20400.438;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CoolingTower.air_outlet_flow.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CoolingTower.air_outlet_flow.h_0 = 500000.0;
  parameter Real cold_source.relative_humidity_0(min = 0.0, max = 1.0) = 0.1;
  parameter Real cold_sink.relative_humidity_0(min = 0.0, max = 1.0) = 0.1;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.P_0
     = 100000;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.h_0 = 500000.0;
  parameter Boolean waterInletPress_sensor.faulty_flow_rate = false;
  parameter String waterInletPress_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String waterInletPress_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean waterInletPress_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletPress_sensor.flow_model.T_in_0 = waterInletPress_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletPress_sensor.flow_model.T_out_0 = waterInletPress_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletPress_sensor.flow_model.DP_0 = waterInletPress_sensor.flow_model.P_out_0
    -waterInletPress_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.flow_model.h_in_0 = waterInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.flow_model.h_out_0 = waterInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletPress_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletPress_sensor.flow_model.h_0 = 500000.0;
  parameter Boolean waterInletPress_sensor.display_output "Used to switch ON or OFF output display";
  parameter String waterInletPress_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.h_0 = 500000.0;
  parameter Boolean AirInletTemp_sensor.faulty_flow_rate = false;
  parameter String AirInletTemp_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String AirInletTemp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean AirInletTemp_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.flow_model.T_in_0 = AirInletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.flow_model.T_out_0 = AirInletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInletTemp_sensor.flow_model.DP_0 = AirInletTemp_sensor.flow_model.P_out_0
    -AirInletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.flow_model.h_in_0 = AirInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.flow_model.h_out_0 = AirInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirInletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirInletTemp_sensor.T_0 = 300;
  parameter String AirInletTemp_sensor.display_unit = "degC" "Specify the display unit";
  parameter Boolean AirInletTemp_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.h_0 = 500000.0;
  parameter Boolean waterInletTemp_sensor.faulty_flow_rate = false;
  parameter String waterInletTemp_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String waterInletTemp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean waterInletTemp_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.flow_model.T_in_0 = waterInletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.flow_model.T_out_0 = waterInletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletTemp_sensor.flow_model.DP_0 = waterInletTemp_sensor.flow_model.P_out_0
    -waterInletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.flow_model.h_in_0 = waterInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.flow_model.h_out_0 = waterInletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterInletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterInletTemp_sensor.T_0 = 300;
  parameter String waterInletTemp_sensor.display_unit = "degC" "Specify the display unit";
  parameter Boolean waterInletTemp_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.h_0 = 500000.0;
  parameter Boolean WaterOutletTemp_sensor.faulty_flow_rate = false;
  parameter String WaterOutletTemp_sensor.sensor_function = "BC" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String WaterOutletTemp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean WaterOutletTemp_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.flow_model.T_in_0 = WaterOutletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.flow_model.T_out_0 = WaterOutletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    WaterOutletTemp_sensor.flow_model.DP_0 = WaterOutletTemp_sensor.flow_model.P_out_0
    -WaterOutletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.flow_model.h_in_0 = WaterOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.flow_model.h_out_0 = WaterOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    WaterOutletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    WaterOutletTemp_sensor.T_0 = 300;
  parameter String WaterOutletTemp_sensor.display_unit = "degC" "Specify the display unit";
  parameter Boolean WaterOutletTemp_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.h_0 = 500000.0;
  parameter Boolean waterFlow_sensor.faulty_flow_rate = waterFlow_sensor.faulty;
  parameter String waterFlow_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String waterFlow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean waterFlow_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterFlow_sensor.flow_model.T_in_0 = waterFlow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterFlow_sensor.flow_model.T_out_0 = waterFlow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterFlow_sensor.flow_model.DP_0 = waterFlow_sensor.flow_model.P_out_0-
    waterFlow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.flow_model.h_in_0 = waterFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.flow_model.h_out_0 = waterFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    waterFlow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    waterFlow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    waterFlow_sensor.Qv_0 = 0.1;
  parameter Boolean waterFlow_sensor.faulty = false;
  parameter String waterFlow_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Boolean waterFlow_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.h_0 = 500000.0;
  parameter Boolean AirOutletTemp_sensor.faulty_flow_rate = false;
  parameter String AirOutletTemp_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String AirOutletTemp_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean AirOutletTemp_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_in_0 = AirOutletTemp_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_out_0 = AirOutletTemp_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirOutletTemp_sensor.flow_model.DP_0 = AirOutletTemp_sensor.flow_model.P_out_0
    -AirOutletTemp_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_in_0 = AirOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_out_0 = AirOutletTemp_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    AirOutletTemp_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    AirOutletTemp_sensor.T_0 = 300;
  parameter String AirOutletTemp_sensor.display_unit = "degC" "Specify the display unit";
  parameter Boolean AirOutletTemp_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.h_0 = 500000.0;
  parameter Boolean airInletFlow_sensor.faulty_flow_rate = airInletFlow_sensor.faulty;
  parameter String airInletFlow_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String airInletFlow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean airInletFlow_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletFlow_sensor.flow_model.T_in_0 = airInletFlow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletFlow_sensor.flow_model.T_out_0 = airInletFlow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletFlow_sensor.flow_model.DP_0 = airInletFlow_sensor.flow_model.P_out_0
    -airInletFlow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.flow_model.h_in_0 = airInletFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.flow_model.h_out_0 = airInletFlow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletFlow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletFlow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    airInletFlow_sensor.Qv_0 = 0.1;
  parameter Boolean airInletFlow_sensor.faulty = false;
  parameter String airInletFlow_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Boolean airInletFlow_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.h_0 = 500000.0;
  parameter Boolean airInletPress_sensor.faulty_flow_rate = false;
  parameter String airInletPress_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String airInletPress_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean airInletPress_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletPress_sensor.flow_model.T_in_0 = airInletPress_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletPress_sensor.flow_model.T_out_0 = airInletPress_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletPress_sensor.flow_model.DP_0 = airInletPress_sensor.flow_model.P_out_0
    -airInletPress_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.flow_model.h_in_0 = airInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.flow_model.h_out_0 = airInletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airInletPress_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airInletPress_sensor.flow_model.h_0 = 500000.0;
  parameter Boolean airInletPress_sensor.display_output "Used to switch ON or OFF output display";
  parameter String airInletPress_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.h_0 = 500000.0;
  parameter Boolean airOutletPress_sensor.faulty_flow_rate = false;
  parameter String airOutletPress_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String airOutletPress_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean airOutletPress_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airOutletPress_sensor.flow_model.T_in_0 = airOutletPress_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airOutletPress_sensor.flow_model.T_out_0 = airOutletPress_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airOutletPress_sensor.flow_model.DP_0 = airOutletPress_sensor.flow_model.P_out_0
    -airOutletPress_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.flow_model.h_in_0 = airOutletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.flow_model.h_out_0 = airOutletPress_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    airOutletPress_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    airOutletPress_sensor.flow_model.h_0 = 500000.0;
  parameter Boolean airOutletPress_sensor.display_output "Used to switch ON or OFF output display";
  parameter String airOutletPress_sensor.display_unit = "barA" "Specify the display unit";
  parameter String Condenser.QCp_max_side = "cold";
  constant Real Condenser.R(unit = "J/(mol.K)") = 8.31446261815324 
    "ideal gas constant";
  parameter Boolean Condenser.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.MassFlowRate 
    Condenser.Q_cold_0 = 5000;
  parameter MetroscopeModelingLibrary.Utilities.Units.MassFlowRate 
    Condenser.Q_hot_0 = 1000;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.Psat_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.P_cold_in_0
     = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.P_cold_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.T_cold_in_0 = 288.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.T_cold_out_0 = 298.15;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.T_hot_in_0 = Condenser.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.T_hot_out_0 = Condenser.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.h_cold_in_0 = 50000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.h_cold_out_0 = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.h_hot_in_0 = 2000000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.h_liq_sat_0 = Modelica.Media.Water.WaterIF97_ph.bubbleEnthalpy_Unique47
    (
    Modelica.Media.Water.WaterIF97_ph.setSat_p_Unique48(Condenser.Psat_0));
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.Tsat_0 = Modelica.Media.Water.WaterIF97_ph.saturationTemperature_Unique49
    (Condenser.Psat_0);
  constant MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.water_height_DP_0 = 9000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.cold_side_pipe.T_in_0 = Condenser.cold_side_pipe.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.cold_side_pipe.T_out_0 = Condenser.cold_side_pipe.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side_pipe.P_in_0
     = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side_pipe.P_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.cold_side_pipe.DP_0 = Condenser.cold_side_pipe.P_out_0-
    Condenser.cold_side_pipe.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.cold_side_pipe.h_in_0 = Condenser.cold_side_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.cold_side_pipe.h_out_0 = Condenser.cold_side_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side_pipe.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.cold_side_pipe.Q_0 = Condenser.Q_cold_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.cold_side_pipe.T_0 = Condenser.T_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.cold_side_pipe.h_0 = Condenser.h_cold_in_0;
  parameter Boolean Condenser.cold_side_pipe.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.hot_side.T_in_0 = Condenser.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.hot_side.T_out_0 = Condenser.Tsat_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.hot_side.DP_0 = Condenser.hot_side.P_out_0-Condenser.hot_side.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.hot_side.h_in_0 = Condenser.h_hot_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.hot_side.h_out_0 = Condenser.h_liq_sat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Condenser.hot_side.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.hot_side.Q_0 = Condenser.Q_hot_0 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.P_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.cold_side.T_in_0 = Condenser.T_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.cold_side.T_out_0 = Condenser.T_cold_out_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.P_in_0
     = 400000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.P_out_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.cold_side.DP_0 = Condenser.cold_side.P_out_0-Condenser.cold_side.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.cold_side.h_in_0 = Condenser.h_cold_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.cold_side.h_out_0 = Condenser.h_cold_out_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.cold_side.Q_0 = Condenser.Q_cold_0 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.P_0
     = 400000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.water_height_pipe.T_in_0 = Condenser.water_height_pipe.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.water_height_pipe.T_out_0 = Condenser.water_height_pipe.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.water_height_pipe.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.water_height_pipe.P_out_0
     = 14000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.water_height_pipe.DP_0 = Condenser.water_height_pipe.P_out_0-
    Condenser.water_height_pipe.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.water_height_pipe.h_in_0 = Condenser.water_height_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.water_height_pipe.h_out_0 = Condenser.water_height_pipe.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Condenser.water_height_pipe.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.water_height_pipe.Q_0 = Condenser.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.water_height_pipe.T_0 = Condenser.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.water_height_pipe.h_0 = Condenser.h_liq_sat_0;
  parameter Boolean Condenser.water_height_pipe.faulty = false;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.incondensables_in.T_in_0 = Condenser.incondensables_in.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.incondensables_in.T_out_0 = Condenser.incondensables_in.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_in.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_in.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.incondensables_in.DP_0 = Condenser.incondensables_in.P_out_0-
    Condenser.incondensables_in.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.incondensables_in.h_in_0 = Condenser.incondensables_in.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.incondensables_in.h_out_0 = Condenser.incondensables_in.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_in.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.incondensables_in.Q_0 = Condenser.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.incondensables_in.T_0 = Condenser.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.incondensables_in.h_0 = Condenser.h_hot_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.incondensables_out.T_in_0 = Condenser.incondensables_out.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.incondensables_out.T_out_0 = Condenser.incondensables_out.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_out.P_in_0
     = 5000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_out.P_out_0
     = 5000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.incondensables_out.DP_0 = Condenser.incondensables_out.P_out_0-
    Condenser.incondensables_out.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.incondensables_out.h_in_0 = Condenser.incondensables_out.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.incondensables_out.h_out_0 = Condenser.incondensables_out.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_out.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.incondensables_out.Q_0 = Condenser.Q_hot_0 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Condenser.incondensables_out.T_0 = Condenser.Tsat_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Condenser.incondensables_out.h_0 = Condenser.h_liq_sat_0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp2_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp2_sensor.h_0 = 500000.0;
  parameter Boolean Temp2_sensor.faulty_flow_rate = false;
  parameter String Temp2_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Temp2_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Temp2_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp2_sensor.flow_model.T_in_0 = Temp2_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp2_sensor.flow_model.T_out_0 = Temp2_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Temp2_sensor.flow_model.DP_0 = Temp2_sensor.flow_model.P_out_0-
    Temp2_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp2_sensor.flow_model.h_in_0 = Temp2_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp2_sensor.flow_model.h_out_0 = Temp2_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Temp2_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp2_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp2_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp2_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp2_sensor.T_0 = 300;
  parameter String Temp2_sensor.display_unit = "degC" "Specify the display unit";
  parameter Boolean Temp2_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press2_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press2_sensor.h_0 = 500000.0;
  parameter Boolean Press2_sensor.faulty_flow_rate = false;
  parameter String Press2_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Press2_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Press2_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press2_sensor.flow_model.T_in_0 = Press2_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press2_sensor.flow_model.T_out_0 = Press2_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press2_sensor.flow_model.DP_0 = Press2_sensor.flow_model.P_out_0-
    Press2_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press2_sensor.flow_model.h_in_0 = Press2_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press2_sensor.flow_model.h_out_0 = Press2_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Press2_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press2_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press2_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press2_sensor.flow_model.h_0 = 500000.0;
  parameter Boolean Press2_sensor.display_output "Used to switch ON or OFF output display";
  parameter String Press2_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow2_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow2_sensor.h_0 = 500000.0;
  parameter Boolean Flow2_sensor.faulty_flow_rate = Flow2_sensor.faulty;
  parameter String Flow2_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Flow2_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Flow2_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Flow2_sensor.flow_model.T_in_0 = Flow2_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Flow2_sensor.flow_model.T_out_0 = Flow2_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Flow2_sensor.flow_model.DP_0 = Flow2_sensor.flow_model.P_out_0-
    Flow2_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow2_sensor.flow_model.h_in_0 = Flow2_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow2_sensor.flow_model.h_out_0 = Flow2_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Flow2_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow2_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Flow2_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow2_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Flow2_sensor.Qv_0 = 0.1;
  parameter Boolean Flow2_sensor.faulty = false;
  parameter String Flow2_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Boolean Flow2_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow1_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow1_sensor.h_0 = 500000.0;
  parameter Boolean Flow1_sensor.faulty_flow_rate = Flow1_sensor.faulty;
  parameter String Flow1_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Flow1_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Flow1_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Flow1_sensor.flow_model.T_in_0 = Flow1_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Flow1_sensor.flow_model.T_out_0 = Flow1_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Flow1_sensor.flow_model.DP_0 = Flow1_sensor.flow_model.P_out_0-
    Flow1_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow1_sensor.flow_model.h_in_0 = Flow1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow1_sensor.flow_model.h_out_0 = Flow1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Flow1_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow1_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Flow1_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Flow1_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Flow1_sensor.Qv_0 = 0.1;
  parameter Boolean Flow1_sensor.faulty = false;
  parameter String Flow1_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Boolean Flow1_sensor.display_output "Used to switch ON or OFF output display";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_valve.T_in_0 = V422_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_valve.T_out_0 = V422_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V422_valve.DP_0 = V422_valve.P_out_0-V422_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_in_0 = V422_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_out_0 = V422_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_valve.h_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V423_valve.T_in_0 = V423_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V423_valve.T_out_0 = V423_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V423_valve.DP_0 = V423_valve.P_out_0-V423_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_in_0 = V423_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_out_0 = V423_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V423_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V423_valve.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.h_0 = 500000.0;
  parameter Boolean CEC197_sensor.faulty_flow_rate = CEC197_sensor.faulty;
  parameter String CEC197_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String CEC197_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean CEC197_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_in_0 = CEC197_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_out_0 = CEC197_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC197_sensor.flow_model.DP_0 = CEC197_sensor.flow_model.P_out_0-
    CEC197_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_in_0 = CEC197_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_out_0 = CEC197_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC197_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC197_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    CEC197_sensor.Qv_0 = 0.1;
  parameter Boolean CEC197_sensor.faulty = false;
  parameter String CEC197_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Boolean CEC197_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.h_0 = 500000.0;
  parameter Boolean V422_Flow_sensor.faulty_flow_rate = V422_Flow_sensor.faulty;
  parameter String V422_Flow_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String V422_Flow_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean V422_Flow_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_Flow_sensor.flow_model.T_in_0 = V422_Flow_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_Flow_sensor.flow_model.T_out_0 = V422_Flow_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V422_Flow_sensor.flow_model.DP_0 = V422_Flow_sensor.flow_model.P_out_0-
    V422_Flow_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.flow_model.h_in_0 = V422_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.flow_model.h_out_0 = V422_Flow_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V422_Flow_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V422_Flow_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    V422_Flow_sensor.Qv_0 = 0.1;
  parameter Boolean V422_Flow_sensor.faulty = false;
  parameter String V422_Flow_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Boolean V422_Flow_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.h_0 = 500000.0;
  parameter Boolean Q_reject_press_sensor.faulty_flow_rate = false;
  parameter String Q_reject_press_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Q_reject_press_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Q_reject_press_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_in_0 = Q_reject_press_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_out_0 = Q_reject_press_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_press_sensor.flow_model.DP_0 = Q_reject_press_sensor.flow_model.P_out_0
    -Q_reject_press_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_in_0 = Q_reject_press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_out_0 = Q_reject_press_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_reject_press_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_reject_press_sensor.flow_model.h_0 = 500000.0;
  parameter Boolean Q_reject_press_sensor.display_output "Used to switch ON or OFF output display";
  parameter String Q_reject_press_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage SP189_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String SP189_sensor.sensor_function = "Calibration" "Specify if the sensor is a BC or used for calibration";
  parameter String SP189_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean SP189_sensor.show_causality "Used to show or not the causality";
  parameter Boolean SP189_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage CEC195_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String CEC195_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC195_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean CEC195_sensor.show_causality "Used to show or not the causality";
  parameter Boolean CEC195_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp1_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp1_sensor.h_0 = 500000.0;
  parameter Boolean Temp1_sensor.faulty_flow_rate = false;
  parameter String Temp1_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Temp1_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Temp1_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp1_sensor.flow_model.T_in_0 = Temp1_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp1_sensor.flow_model.T_out_0 = Temp1_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Temp1_sensor.flow_model.DP_0 = Temp1_sensor.flow_model.P_out_0-
    Temp1_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp1_sensor.flow_model.h_in_0 = Temp1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp1_sensor.flow_model.h_out_0 = Temp1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Temp1_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp1_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp1_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Temp1_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Temp1_sensor.T_0 = 300;
  parameter String Temp1_sensor.display_unit = "degC" "Specify the display unit";
  parameter Boolean Temp1_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.h_0 = 500000.0;
  parameter Boolean Press1_sensor.faulty_flow_rate = false;
  parameter String Press1_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Press1_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Press1_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_in_0 = Press1_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_out_0 = Press1_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press1_sensor.flow_model.DP_0 = Press1_sensor.flow_model.P_out_0-
    Press1_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_in_0 = Press1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_out_0 = Press1_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press1_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press1_sensor.flow_model.h_0 = 500000.0;
  parameter Boolean Press1_sensor.display_output "Used to switch ON or OFF output display";
  parameter String Press1_sensor.display_unit = "barA" "Specify the display unit";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_in_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_out_0
     = 300;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_in_0 = 
    100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_out_0 = 
    1000000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Pump.DP_0 = Pump.P_out_0-Pump.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Pump.h_in_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Pump.h_out_0 = 500000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_0 = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Pump.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press3_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press3_sensor.h_0 = 500000.0;
  parameter Boolean Press3_sensor.faulty_flow_rate = false;
  parameter String Press3_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String Press3_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Press3_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press3_sensor.flow_model.T_in_0 = Press3_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press3_sensor.flow_model.T_out_0 = Press3_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press3_sensor.flow_model.DP_0 = Press3_sensor.flow_model.P_out_0-
    Press3_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press3_sensor.flow_model.h_in_0 = Press3_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press3_sensor.flow_model.h_out_0 = Press3_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Press3_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press3_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Press3_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Press3_sensor.flow_model.h_0 = 500000.0;
  parameter Boolean Press3_sensor.display_output "Used to switch ON or OFF output display";
  parameter String Press3_sensor.display_unit = "barA" "Specify the display unit";
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.h_0 = 500000.0;
  parameter Boolean CEC809_sensor.faulty_flow_rate = false;
  parameter String CEC809_sensor.sensor_function = "BC" "Specify if the sensor is a BC or used for calibration";
  parameter String CEC809_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean CEC809_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.flow_model.T_in_0 = CEC809_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.flow_model.T_out_0 = CEC809_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC809_sensor.flow_model.DP_0 = CEC809_sensor.flow_model.P_out_0-
    CEC809_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.flow_model.h_in_0 = CEC809_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.flow_model.h_out_0 = CEC809_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    CEC809_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Temperature 
    CEC809_sensor.T_0 = 300;
  parameter String CEC809_sensor.display_unit = "degC" "Specify the display unit";
  parameter Boolean CEC809_sensor.display_output "Used to switch ON or OFF output display";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V421_valve.T_in_0 = V421_valve.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    V421_valve.T_out_0 = V421_valve.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V421_valve.DP_0 = V421_valve.P_out_0-V421_valve.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_in_0 = V421_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_out_0 = V421_valve.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V421_valve.Q_0 = 1000 "Inlet Mass flow rate";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_0
     = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    V421_valve.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.Q_0 = 100;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.h_0 = 500000.0;
  parameter Boolean Q_recirculation_sensor.faulty_flow_rate = Q_recirculation_sensor.faulty;
  parameter String Q_recirculation_sensor.sensor_function = "Unidentified" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String Q_recirculation_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean Q_recirculation_sensor.show_causality "Used to show or not the causality";
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_in_0 = Q_recirculation_sensor.flow_model.T_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_out_0 = Q_recirculation_sensor.flow_model.T_0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_in_0
     = 100000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_out_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_recirculation_sensor.flow_model.DP_0 = Q_recirculation_sensor.flow_model.P_out_0
    -Q_recirculation_sensor.flow_model.P_in_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_in_0 = Q_recirculation_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_out_0 = Q_recirculation_sensor.flow_model.h_0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_0
     = 998;
  parameter MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.Q_0 = 1000 "Inlet Mass flow rate";
  constant MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_0
     = 100000.0;
  parameter MetroscopeModelingLibrary.Utilities.Units.Temperature 
    Q_recirculation_sensor.flow_model.T_0 = 300;
  parameter MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy 
    Q_recirculation_sensor.flow_model.h_0 = 500000.0;
  constant MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate 
    Q_recirculation_sensor.Qv_0 = 0.1;
  parameter Boolean Q_recirculation_sensor.faulty = false;
  parameter String Q_recirculation_sensor.display_unit = "kg/s" "Specify the display unit";
  parameter Boolean Q_recirculation_sensor.display_output "Used to switch ON or OFF output display";
  constant MetroscopeModelingLibrary.Utilities.Units.Percentage CEC191_sensor.Opening_pc_0
    (unit = "1") = 15;
  parameter String CEC191_sensor.sensor_function = "Calibration" 
    "Specify if the sensor is a BC or used for calibration";
  parameter String CEC191_sensor.causality = "" "Specify which parameter is calibrated by this sensor";
  parameter Boolean CEC191_sensor.show_causality "Used to show or not the causality";
  parameter Boolean CEC191_sensor.display_output "Used to switch ON or OFF output display";

  output Real waterInletTemp(start = 31) "deg_C";
  output Real waterInletPress(start = 5) "bar";
  output Real hd(start = 8.849857);
  output Real V_inlet(start = 12.871763) "m/s";
  output Real Flow1(start = 37);
  output MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V423;
  output MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V422;
  output Real Pump_hn;
  output Real Pump_rh;
  output MetroscopeModelingLibrary.Utilities.Units.Cv Cvmax_V421;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy hot_sink.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction hot_sink.Xi_in[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure hot_sink.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate hot_sink.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    hot_sink.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature hot_sink.T_in;
  Modelica.Media.Interfaces.Types.FixedPhase hot_sink.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy hot_sink.state_in.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density hot_sink.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature hot_sink.state_in.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure hot_sink.state_in.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate hot_sink.C_in.Q
    (nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure hot_sink.C_in.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy hot_sink.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction hot_sink.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Velocity CoolingTower.V_inlet;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.hd;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputArea CoolingTower.Afr;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal CoolingTower.Lfi;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    CoolingTower.Cf;
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_inlet;
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.rho_air_outlet;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_hot_out;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Q_cold_out;
  Real CoolingTower.w_in;
  Real CoolingTower.w_out(start = 0.0018949909);
  Real CoolingTower.w_sat[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_initial;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.i_final;
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.W_max;
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.W_min;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_in;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_cold_out;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_in;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.T_hot_out;
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.deltaTw;
  Real CoolingTower.w[CoolingTower.N_step];
  Real CoolingTower.M[CoolingTower.N_step];
  Real CoolingTower.Me;
  Real CoolingTower.i[CoolingTower.N_step];
  Real CoolingTower.Tw[CoolingTower.N_step];
  Real CoolingTower.Ta[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.HeatCapacity CoolingTower.cp[
    CoolingTower.N_step];
  Real CoolingTower.Pin[CoolingTower.N_step];
  Real CoolingTower.Lef[CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Qw[
    CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CoolingTower.Qa[
    CoolingTower.N_step];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_connector.Q(start = 500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_connector.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet_connector.Q(start = -500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_connector.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_connector.Q(start = 500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_connector.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet_connector.Q(start = -500, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_connector.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_connector.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_connector.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h_in
    (start = CoolingTower.water_inlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h_out
    (start = CoolingTower.water_inlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.Q(start = CoolingTower.water_inlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_in
    (start = CoolingTower.water_inlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.P_out
    (start = CoolingTower.water_inlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_inlet_flow.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_in
    (start = CoolingTower.water_inlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho_out
    (start = CoolingTower.water_inlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_inlet_flow.rho
    (start = CoolingTower.water_inlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet_flow.T_in
    (start = CoolingTower.water_inlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet_flow.T_out
    (start = CoolingTower.water_inlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet_flow.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet_flow.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet_flow.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet_flow.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet_flow.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet_flow.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet_flow.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet_flow.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet_flow.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet_flow.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_inlet_flow.DP(start = CoolingTower.water_inlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.water_inlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.water_inlet_flow.DH(start = CoolingTower.water_inlet_flow.h_out_0
    -CoolingTower.water_inlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.water_inlet_flow.DT(start = CoolingTower.water_inlet_flow.T_out_0
    -CoolingTower.water_inlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet_flow.C_in.Q(start = CoolingTower.water_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.C_in.P
    (start = CoolingTower.water_inlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_flow.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_inlet_flow.C_out.Q(start =  -CoolingTower.water_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet_flow.C_out.P
    (start = CoolingTower.water_inlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.C_out.h_outflow
    (start = CoolingTower.water_inlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet_flow.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet_flow.h
    (start = CoolingTower.water_inlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    CoolingTower.water_inlet_flow.DP_input(start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h_in
    (start = CoolingTower.water_outlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h_out
    (start = CoolingTower.water_outlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.Q(start = CoolingTower.water_outlet_flow.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_in
    (start = CoolingTower.water_outlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P_out
    (start = CoolingTower.water_outlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_outlet_flow.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_in
    (start = CoolingTower.water_outlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho_out
    (start = CoolingTower.water_outlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.water_outlet_flow.rho
    (start = CoolingTower.water_outlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_outlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T_in
    (start = CoolingTower.water_outlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T_out
    (start = CoolingTower.water_outlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet_flow.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet_flow.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet_flow.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet_flow.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet_flow.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet_flow.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet_flow.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet_flow.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet_flow.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet_flow.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.water_outlet_flow.DP(start = CoolingTower.water_outlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.water_outlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.water_outlet_flow.DH(start = CoolingTower.water_outlet_flow.h_out_0
    -CoolingTower.water_outlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.water_outlet_flow.DT(start = CoolingTower.water_outlet_flow.T_out_0
    -CoolingTower.water_outlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_outlet_flow.C_in.Q(start = CoolingTower.water_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.C_in.P
    (start = CoolingTower.water_outlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_flow.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet_flow.C_out.Q(start =  -CoolingTower.water_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.C_out.P
    (start = CoolingTower.water_outlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.C_out.h_outflow
    (start = CoolingTower.water_outlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet_flow.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet_flow.h
    (start = CoolingTower.water_outlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet_flow.P
    (start = CoolingTower.water_outlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet_flow.T
    (start = CoolingTower.water_outlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.water_outlet.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.water_outlet.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.water_outlet.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.water_outlet.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_outlet.T_out;
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_outlet.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_outlet.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_outlet.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_outlet.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_outlet.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.water_outlet.C_out.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_outlet.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_outlet.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_outlet.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.water_inlet.Xi_in
    [0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.water_inlet.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.water_inlet.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.water_inlet.T_in;
  Modelica.Media.Interfaces.Types.FixedPhase CoolingTower.water_inlet.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CoolingTower.water_inlet.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CoolingTower.water_inlet.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.water_inlet.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.water_inlet.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.water_inlet.C_in.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.water_inlet.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.water_inlet.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.water_inlet.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h_in
    (start = CoolingTower.air_inlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h_out
    (start = CoolingTower.air_inlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.Q(start = CoolingTower.air_inlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_in
    (start = CoolingTower.air_inlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P_out
    (start = CoolingTower.air_inlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_inlet_flow.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_in
    (start = CoolingTower.air_inlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho_out
    (start = CoolingTower.air_inlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_inlet_flow.rho
    (start = CoolingTower.air_inlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T_in
    (start = CoolingTower.air_inlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T_out
    (start = CoolingTower.air_inlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet_flow.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet_flow.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet_flow.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet_flow.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_inlet_flow.DP(start = CoolingTower.air_inlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.air_inlet_flow.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.air_inlet_flow.DH(start = CoolingTower.air_inlet_flow.h_out_0-
    CoolingTower.air_inlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.air_inlet_flow.DT(start = CoolingTower.air_inlet_flow.T_out_0-
    CoolingTower.air_inlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet_flow.C_in.Q(start = CoolingTower.air_inlet_flow.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.C_in.P
    (start = CoolingTower.air_inlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_inlet_flow.C_out.Q(start =  -CoolingTower.air_inlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.C_out.P
    (start = CoolingTower.air_inlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.C_out.h_outflow
    (start = CoolingTower.air_inlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet_flow.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet_flow.h
    (start = CoolingTower.air_inlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet_flow.P
    (start = CoolingTower.air_inlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet_flow.T
    (start = CoolingTower.air_inlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_inlet.Xi_in
    [1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.air_inlet.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_inlet.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_inlet.T_in;
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_inlet.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_inlet.state_in.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_inlet.C_in.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_inlet.C_in.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_inlet.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_inlet.C_in.Xi_outflow
    [1];
  Real CoolingTower.air_inlet.relative_humidity(start = CoolingTower.air_inlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    CoolingTower.air_outlet.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    CoolingTower.air_outlet.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    CoolingTower.air_outlet.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_outlet.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet.T_out;
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet.C_out.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet.C_out.P
    (start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet.C_out.Xi_outflow
    [1];
  Real CoolingTower.air_outlet.relative_humidity(start = CoolingTower.air_outlet.relative_humidity_0,
     min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h_in
    (start = CoolingTower.air_outlet_flow.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h_out
    (start = CoolingTower.air_outlet_flow.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.Q(start = CoolingTower.air_outlet_flow.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_in
    (start = CoolingTower.air_outlet_flow.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P_out
    (start = CoolingTower.air_outlet_flow.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CoolingTower.air_outlet_flow.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_in
    (start = CoolingTower.air_outlet_flow.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho_out
    (start = CoolingTower.air_outlet_flow.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CoolingTower.air_outlet_flow.rho
    (start = CoolingTower.air_outlet_flow.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CoolingTower.air_outlet_flow.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T_in
    (start = CoolingTower.air_outlet_flow.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T_out
    (start = CoolingTower.air_outlet_flow.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet_flow.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet_flow.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure CoolingTower.air_outlet_flow.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature CoolingTower.air_outlet_flow.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CoolingTower.air_outlet_flow.DP(start = CoolingTower.air_outlet_flow.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CoolingTower.air_outlet_flow.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CoolingTower.air_outlet_flow.DH(start = CoolingTower.air_outlet_flow.h_out_0
    -CoolingTower.air_outlet_flow.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CoolingTower.air_outlet_flow.DT(start = CoolingTower.air_outlet_flow.T_out_0
    -CoolingTower.air_outlet_flow.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CoolingTower.air_outlet_flow.C_in.Q(start = CoolingTower.air_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.C_in.P
    (start = CoolingTower.air_outlet_flow.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CoolingTower.air_outlet_flow.C_out.Q(start =  -CoolingTower.air_outlet_flow.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.C_out.P
    (start = CoolingTower.air_outlet_flow.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.C_out.h_outflow
    (start = CoolingTower.air_outlet_flow.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CoolingTower.air_outlet_flow.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CoolingTower.air_outlet_flow.h
    (start = CoolingTower.air_outlet_flow.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CoolingTower.air_outlet_flow.P
    (start = CoolingTower.air_outlet_flow.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CoolingTower.air_outlet_flow.T
    (start = CoolingTower.air_outlet_flow.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    cold_source.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    cold_source.Xi_out[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    cold_source.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    cold_source.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    cold_source.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature cold_source.T_out;
  Modelica.Media.Interfaces.Types.AbsolutePressure cold_source.state_out.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature cold_source.state_out.T(min = 
    190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction cold_source.state_out.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    cold_source.C_out.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure cold_source.C_out.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cold_source.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction cold_source.C_out.Xi_outflow[1];
  Real cold_source.relative_humidity(start = cold_source.relative_humidity_0, 
    min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cold_sink.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction cold_sink.Xi_in[1];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure cold_sink.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate cold_sink.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    cold_sink.Qv_in(start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature cold_sink.T_in;
  Modelica.Media.Interfaces.Types.AbsolutePressure cold_sink.state_in.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature cold_sink.state_in.T(min = 190.0, 
    max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction cold_sink.state_in.X[2](start = {
    0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    cold_sink.C_in.Q(nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure cold_sink.C_in.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy cold_sink.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction cold_sink.C_in.Xi_outflow[1];
  Real cold_sink.relative_humidity(start = cold_sink.relative_humidity_0, min = 
    0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.Q(start = waterInletPress_sensor.Q_0, nominal = 100.0)
     "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletPress_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.P(
    start = waterInletPress_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.h
    (start = waterInletPress_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletPress_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletPress_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletPress_sensor.state.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletPress_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletPress_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate waterInletPress_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.C_in.Q(start = waterInletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.C_in.P
    (start = waterInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletPress_sensor.C_out.Q(start =  -waterInletPress_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.C_out.P
    (start = waterInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.h_in
    (start = waterInletPress_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.h_out
    (start = waterInletPress_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.flow_model.Q(start = waterInletPress_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_in
    (start = waterInletPress_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P_out
    (start = waterInletPress_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletPress_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho_in
    (start = waterInletPress_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho_out
    (start = waterInletPress_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletPress_sensor.flow_model.rho
    (start = waterInletPress_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletPress_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    waterInletPress_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletPress_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletPress_sensor.flow_model.T_in
    (start = waterInletPress_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletPress_sensor.flow_model.T_out
    (start = waterInletPress_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletPress_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletPress_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletPress_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletPress_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletPress_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletPress_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletPress_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletPress_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletPress_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletPress_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletPress_sensor.flow_model.DP(start = waterInletPress_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power waterInletPress_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    waterInletPress_sensor.flow_model.DH(start = waterInletPress_sensor.flow_model.h_out_0
    -waterInletPress_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    waterInletPress_sensor.flow_model.DT(start = waterInletPress_sensor.flow_model.T_out_0
    -waterInletPress_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletPress_sensor.flow_model.C_in.Q(start = waterInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.C_in.P
    (start = waterInletPress_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletPress_sensor.flow_model.C_out.Q(start =  -waterInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.C_out.P
    (start = waterInletPress_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.C_out.h_outflow
    (start = waterInletPress_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletPress_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletPress_sensor.flow_model.h
    (start = waterInletPress_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletPress_sensor.flow_model.P
    (start = waterInletPress_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletPress_sensor.flow_model.T
    (start = waterInletPress_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real waterInletPress_sensor.P_barG(start = waterInletPress_sensor.P_0*1E-05-1,
     nominal = 100000.0);
  Real waterInletPress_sensor.P_psiG(start = waterInletPress_sensor.P_0*
    0.000145038-14.50377377, nominal = 14.5038);
  Real waterInletPress_sensor.P_MPaG(start = waterInletPress_sensor.P_0*1E-06-
    0.1, nominal = 0.09999999999999999);
  Real waterInletPress_sensor.P_kPaG(start = waterInletPress_sensor.P_0*0.001-100,
     nominal = 100.0);
  Real waterInletPress_sensor.P_barA(start = waterInletPress_sensor.P_0*1E-05, 
    nominal = 1.0, unit = "bar");
  Real waterInletPress_sensor.P_psiA(start = waterInletPress_sensor.P_0*
    0.000145038, nominal = 14.5038);
  Real waterInletPress_sensor.P_MPaA(start = waterInletPress_sensor.P_0*1E-06, 
    nominal = 0.09999999999999999);
  Real waterInletPress_sensor.P_kPaA(start = waterInletPress_sensor.P_0*0.001, 
    nominal = 100.0);
  Real waterInletPress_sensor.P_inHg(start = waterInletPress_sensor.P_0*
    0.0002953006, nominal = 29.530060000000002);
  Real waterInletPress_sensor.P_mbar(start = waterInletPress_sensor.P_0*0.01, 
    nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.Q(start = AirInletTemp_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInletTemp_sensor.Xi[1]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.P(
    start = AirInletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.h
    (start = AirInletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInletTemp_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInletTemp_sensor.state.T(min = 
    190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirInletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.C_in.Q(start = AirInletTemp_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.C_in.P(
    start = AirInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInletTemp_sensor.C_out.Q(start =  -AirInletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.C_out.P
    (start = AirInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.h_in
    (start = AirInletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.h_out
    (start = AirInletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.flow_model.Q(start = AirInletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_in
    (start = AirInletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P_out
    (start = AirInletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirInletTemp_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho_in
    (start = AirInletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho_out
    (start = AirInletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirInletTemp_sensor.flow_model.rho
    (start = AirInletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirInletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirInletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.flow_model.T_in
    (start = AirInletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.flow_model.T_out
    (start = AirInletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInletTemp_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInletTemp_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirInletTemp_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirInletTemp_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirInletTemp_sensor.flow_model.DP(start = AirInletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirInletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirInletTemp_sensor.flow_model.DH(start = AirInletTemp_sensor.flow_model.h_out_0
    -AirInletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirInletTemp_sensor.flow_model.DT(start = AirInletTemp_sensor.flow_model.T_out_0
    -AirInletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirInletTemp_sensor.flow_model.C_in.Q(start = AirInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.C_in.P
    (start = AirInletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirInletTemp_sensor.flow_model.C_out.Q(start =  -AirInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.C_out.P
    (start = AirInletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.C_out.h_outflow
    (start = AirInletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction AirInletTemp_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirInletTemp_sensor.flow_model.h
    (start = AirInletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirInletTemp_sensor.flow_model.P
    (start = AirInletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.flow_model.T
    (start = AirInletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirInletTemp_sensor.T(
    start = AirInletTemp_sensor.T_0);
  Real AirInletTemp_sensor.T_degC(start = AirInletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real AirInletTemp_sensor.T_degF(start = (AirInletTemp_sensor.T_0+273.15)*1.8+32,
     nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.Q(start = waterInletTemp_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletTemp_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.P(
    start = waterInletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.h
    (start = waterInletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletTemp_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletTemp_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletTemp_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletTemp_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletTemp_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate waterInletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.C_in.Q(start = waterInletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.C_in.P
    (start = waterInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletTemp_sensor.C_out.Q(start =  -waterInletTemp_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.C_out.P
    (start = waterInletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.h_in
    (start = waterInletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.h_out
    (start = waterInletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.flow_model.Q(start = waterInletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_in
    (start = waterInletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P_out
    (start = waterInletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterInletTemp_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho_in
    (start = waterInletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho_out
    (start = waterInletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterInletTemp_sensor.flow_model.rho
    (start = waterInletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    waterInletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterInletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.flow_model.T_in
    (start = waterInletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.flow_model.T_out
    (start = waterInletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletTemp_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletTemp_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletTemp_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletTemp_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletTemp_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase waterInletTemp_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterInletTemp_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterInletTemp_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterInletTemp_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterInletTemp_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterInletTemp_sensor.flow_model.DP(start = waterInletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power waterInletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    waterInletTemp_sensor.flow_model.DH(start = waterInletTemp_sensor.flow_model.h_out_0
    -waterInletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    waterInletTemp_sensor.flow_model.DT(start = waterInletTemp_sensor.flow_model.T_out_0
    -waterInletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterInletTemp_sensor.flow_model.C_in.Q(start = waterInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.C_in.P
    (start = waterInletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterInletTemp_sensor.flow_model.C_out.Q(start =  -waterInletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.C_out.P
    (start = waterInletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.C_out.h_outflow
    (start = waterInletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction waterInletTemp_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterInletTemp_sensor.flow_model.h
    (start = waterInletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterInletTemp_sensor.flow_model.P
    (start = waterInletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.flow_model.T
    (start = waterInletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterInletTemp_sensor.T(
    start = waterInletTemp_sensor.T_0);
  Real waterInletTemp_sensor.T_degC(start = waterInletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real waterInletTemp_sensor.T_degF(start = (waterInletTemp_sensor.T_0+273.15)*
    1.8+32, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.Q(start = WaterOutletTemp_sensor.Q_0, nominal = 100.0)
     "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction WaterOutletTemp_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.P(
    start = WaterOutletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.h
    (start = WaterOutletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase WaterOutletTemp_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy WaterOutletTemp_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density WaterOutletTemp_sensor.state.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature WaterOutletTemp_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure WaterOutletTemp_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate WaterOutletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.C_in.Q(start = WaterOutletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.C_in.P
    (start = WaterOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    WaterOutletTemp_sensor.C_out.Q(start =  -WaterOutletTemp_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.C_out.P
    (start = WaterOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.h_in
    (start = WaterOutletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.h_out
    (start = WaterOutletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.flow_model.Q(start = WaterOutletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_in
    (start = WaterOutletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P_out
    (start = WaterOutletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction WaterOutletTemp_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho_in
    (start = WaterOutletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho_out
    (start = WaterOutletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density WaterOutletTemp_sensor.flow_model.rho
    (start = WaterOutletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    WaterOutletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    WaterOutletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    WaterOutletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.flow_model.T_in
    (start = WaterOutletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.flow_model.T_out
    (start = WaterOutletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase WaterOutletTemp_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density WaterOutletTemp_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature WaterOutletTemp_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure WaterOutletTemp_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase WaterOutletTemp_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density WaterOutletTemp_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature WaterOutletTemp_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure WaterOutletTemp_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    WaterOutletTemp_sensor.flow_model.DP(start = WaterOutletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power WaterOutletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    WaterOutletTemp_sensor.flow_model.DH(start = WaterOutletTemp_sensor.flow_model.h_out_0
    -WaterOutletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    WaterOutletTemp_sensor.flow_model.DT(start = WaterOutletTemp_sensor.flow_model.T_out_0
    -WaterOutletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    WaterOutletTemp_sensor.flow_model.C_in.Q(start = WaterOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.C_in.P
    (start = WaterOutletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    WaterOutletTemp_sensor.flow_model.C_out.Q(start =  -WaterOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.C_out.P
    (start = WaterOutletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.C_out.h_outflow
    (start = WaterOutletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction WaterOutletTemp_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy WaterOutletTemp_sensor.flow_model.h
    (start = WaterOutletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure WaterOutletTemp_sensor.flow_model.P
    (start = WaterOutletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.flow_model.T
    (start = WaterOutletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature WaterOutletTemp_sensor.T
    (start = WaterOutletTemp_sensor.T_0);
  Real WaterOutletTemp_sensor.T_degC(start = WaterOutletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real WaterOutletTemp_sensor.T_degF(start = (WaterOutletTemp_sensor.T_0+273.15)
    *1.8+32, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.Q(start = waterFlow_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterFlow_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.P(start = 
    waterFlow_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.h(
    start = waterFlow_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase waterFlow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterFlow_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterFlow_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterFlow_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterFlow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate waterFlow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.C_in.Q(start = waterFlow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.C_in.P(
    start = waterFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterFlow_sensor.C_out.Q(start =  -waterFlow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.C_out.P(
    start = waterFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.h_in
    (start = waterFlow_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.h_out
    (start = waterFlow_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.flow_model.Q(start = waterFlow_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_in
    (start = waterFlow_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P_out
    (start = waterFlow_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction waterFlow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho_in
    (start = waterFlow_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho_out
    (start = waterFlow_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density waterFlow_sensor.flow_model.rho
    (start = waterFlow_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterFlow_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    waterFlow_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    waterFlow_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterFlow_sensor.flow_model.T_in
    (start = waterFlow_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterFlow_sensor.flow_model.T_out
    (start = waterFlow_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase waterFlow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterFlow_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterFlow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterFlow_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterFlow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase waterFlow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy waterFlow_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density waterFlow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature waterFlow_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure waterFlow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    waterFlow_sensor.flow_model.DP(start = waterFlow_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power waterFlow_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    waterFlow_sensor.flow_model.DH(start = waterFlow_sensor.flow_model.h_out_0-
    waterFlow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    waterFlow_sensor.flow_model.DT(start = waterFlow_sensor.flow_model.T_out_0-
    waterFlow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    waterFlow_sensor.flow_model.C_in.Q(start = waterFlow_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.C_in.P
    (start = waterFlow_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    waterFlow_sensor.flow_model.C_out.Q(start =  -waterFlow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.C_out.P
    (start = waterFlow_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.C_out.h_outflow
    (start = waterFlow_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction waterFlow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy waterFlow_sensor.flow_model.h
    (start = waterFlow_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure waterFlow_sensor.flow_model.P
    (start = waterFlow_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature waterFlow_sensor.flow_model.T
    (start = waterFlow_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate waterFlow_sensor.Qv(
    start = waterFlow_sensor.Qv_0);
  Real waterFlow_sensor.Q_lm(start = waterFlow_sensor.Qv_0*60000, nominal = 
    6000.0);
  Real waterFlow_sensor.Q_th(start = waterFlow_sensor.Q_0*3.6, nominal = 360.0);
  Real waterFlow_sensor.Q_lbs(start = waterFlow_sensor.Q_0*0.453592428, 
    nominal = 45.3592428);
  Real waterFlow_sensor.Q_Mlbh(start = waterFlow_sensor.Q_0*0.0079366414387, 
    nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.Q(start = AirOutletTemp_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirOutletTemp_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.P(
    start = AirOutletTemp_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.h
    (start = AirOutletTemp_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate AirOutletTemp_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.C_in.Q(start = AirOutletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.C_in.P
    (start = AirOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirOutletTemp_sensor.C_out.Q(start =  -AirOutletTemp_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.C_out.P
    (start = AirOutletTemp_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h_in
    (start = AirOutletTemp_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h_out
    (start = AirOutletTemp_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.Q(start = AirOutletTemp_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_in
    (start = AirOutletTemp_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P_out
    (start = AirOutletTemp_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction AirOutletTemp_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_in
    (start = AirOutletTemp_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho_out
    (start = AirOutletTemp_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density AirOutletTemp_sensor.flow_model.rho
    (start = AirOutletTemp_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    AirOutletTemp_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T_in
    (start = AirOutletTemp_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T_out
    (start = AirOutletTemp_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure AirOutletTemp_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature AirOutletTemp_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    AirOutletTemp_sensor.flow_model.DP(start = AirOutletTemp_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power AirOutletTemp_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    AirOutletTemp_sensor.flow_model.DH(start = AirOutletTemp_sensor.flow_model.h_out_0
    -AirOutletTemp_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    AirOutletTemp_sensor.flow_model.DT(start = AirOutletTemp_sensor.flow_model.T_out_0
    -AirOutletTemp_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    AirOutletTemp_sensor.flow_model.C_in.Q(start = AirOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.C_in.P
    (start = AirOutletTemp_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    AirOutletTemp_sensor.flow_model.C_out.Q(start =  -AirOutletTemp_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.C_out.P
    (start = AirOutletTemp_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.C_out.h_outflow
    (start = AirOutletTemp_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction AirOutletTemp_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy AirOutletTemp_sensor.flow_model.h
    (start = AirOutletTemp_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure AirOutletTemp_sensor.flow_model.P
    (start = AirOutletTemp_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.flow_model.T
    (start = AirOutletTemp_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature AirOutletTemp_sensor.T(
    start = AirOutletTemp_sensor.T_0);
  Real AirOutletTemp_sensor.T_degC(start = AirOutletTemp_sensor.T_0+273.15, 
    nominal = 573.15, unit = "degC");
  Real AirOutletTemp_sensor.T_degF(start = (AirOutletTemp_sensor.T_0+273.15)*1.8
    +32, nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.Q(start = airInletFlow_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletFlow_sensor.Xi[1]
     "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.P(
    start = airInletFlow_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.h
    (start = airInletFlow_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletFlow_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletFlow_sensor.state.T(min = 
    190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate airInletFlow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.C_in.Q(start = airInletFlow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.C_in.P(
    start = airInletFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletFlow_sensor.C_out.Q(start =  -airInletFlow_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.C_out.P
    (start = airInletFlow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.h_in
    (start = airInletFlow_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.h_out
    (start = airInletFlow_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.flow_model.Q(start = airInletFlow_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_in
    (start = airInletFlow_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P_out
    (start = airInletFlow_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletFlow_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho_in
    (start = airInletFlow_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho_out
    (start = airInletFlow_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletFlow_sensor.flow_model.rho
    (start = airInletFlow_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletFlow_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    airInletFlow_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletFlow_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletFlow_sensor.flow_model.T_in
    (start = airInletFlow_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletFlow_sensor.flow_model.T_out
    (start = airInletFlow_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletFlow_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletFlow_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletFlow_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletFlow_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletFlow_sensor.flow_model.DP(start = airInletFlow_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power airInletFlow_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    airInletFlow_sensor.flow_model.DH(start = airInletFlow_sensor.flow_model.h_out_0
    -airInletFlow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    airInletFlow_sensor.flow_model.DT(start = airInletFlow_sensor.flow_model.T_out_0
    -airInletFlow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletFlow_sensor.flow_model.C_in.Q(start = airInletFlow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.C_in.P
    (start = airInletFlow_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletFlow_sensor.flow_model.C_out.Q(start =  -airInletFlow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.C_out.P
    (start = airInletFlow_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.C_out.h_outflow
    (start = airInletFlow_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction airInletFlow_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletFlow_sensor.flow_model.h
    (start = airInletFlow_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletFlow_sensor.flow_model.P
    (start = airInletFlow_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletFlow_sensor.flow_model.T
    (start = airInletFlow_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate airInletFlow_sensor.Qv
    (start = airInletFlow_sensor.Qv_0);
  Real airInletFlow_sensor.Q_lm(start = airInletFlow_sensor.Qv_0*60000, 
    nominal = 6000.0);
  Real airInletFlow_sensor.Q_th(start = airInletFlow_sensor.Q_0*3.6, nominal = 
    360.0);
  Real airInletFlow_sensor.Q_lbs(start = airInletFlow_sensor.Q_0*0.453592428, 
    nominal = 45.3592428);
  Real airInletFlow_sensor.Q_Mlbh(start = airInletFlow_sensor.Q_0*
    0.0079366414387, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.Q(start = airInletPress_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletPress_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.P(
    start = airInletPress_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.h
    (start = airInletPress_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletPress_sensor.state.p 
    "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletPress_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate airInletPress_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.C_in.Q(start = airInletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.C_in.P
    (start = airInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletPress_sensor.C_out.Q(start =  -airInletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.C_out.P
    (start = airInletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.h_in
    (start = airInletPress_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.h_out
    (start = airInletPress_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.flow_model.Q(start = airInletPress_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_in
    (start = airInletPress_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P_out
    (start = airInletPress_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airInletPress_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho_in
    (start = airInletPress_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho_out
    (start = airInletPress_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airInletPress_sensor.flow_model.rho
    (start = airInletPress_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletPress_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    airInletPress_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airInletPress_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletPress_sensor.flow_model.T_in
    (start = airInletPress_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletPress_sensor.flow_model.T_out
    (start = airInletPress_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletPress_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletPress_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure airInletPress_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airInletPress_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airInletPress_sensor.flow_model.DP(start = airInletPress_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power airInletPress_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    airInletPress_sensor.flow_model.DH(start = airInletPress_sensor.flow_model.h_out_0
    -airInletPress_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    airInletPress_sensor.flow_model.DT(start = airInletPress_sensor.flow_model.T_out_0
    -airInletPress_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airInletPress_sensor.flow_model.C_in.Q(start = airInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.C_in.P
    (start = airInletPress_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airInletPress_sensor.flow_model.C_out.Q(start =  -airInletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.C_out.P
    (start = airInletPress_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.C_out.h_outflow
    (start = airInletPress_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction airInletPress_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airInletPress_sensor.flow_model.h
    (start = airInletPress_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airInletPress_sensor.flow_model.P
    (start = airInletPress_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airInletPress_sensor.flow_model.T
    (start = airInletPress_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real airInletPress_sensor.P_barG(start = airInletPress_sensor.P_0*1E-05-1, 
    nominal = 100000.0);
  Real airInletPress_sensor.P_psiG(start = airInletPress_sensor.P_0*0.000145038-
    14.50377377, nominal = 14.5038);
  Real airInletPress_sensor.P_MPaG(start = airInletPress_sensor.P_0*1E-06-0.1, 
    nominal = 0.09999999999999999);
  Real airInletPress_sensor.P_kPaG(start = airInletPress_sensor.P_0*0.001-100, 
    nominal = 100.0);
  Real airInletPress_sensor.P_barA(start = airInletPress_sensor.P_0*1E-05, 
    nominal = 1.0, unit = "bar");
  Real airInletPress_sensor.P_psiA(start = airInletPress_sensor.P_0*0.000145038,
     nominal = 14.5038);
  Real airInletPress_sensor.P_MPaA(start = airInletPress_sensor.P_0*1E-06, 
    nominal = 0.09999999999999999);
  Real airInletPress_sensor.P_kPaA(start = airInletPress_sensor.P_0*0.001, 
    nominal = 100.0);
  Real airInletPress_sensor.P_inHg(start = airInletPress_sensor.P_0*0.0002953006,
     nominal = 29.530060000000002);
  Real airInletPress_sensor.P_mbar(start = airInletPress_sensor.P_0*0.01, 
    nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.Q(start = airOutletPress_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airOutletPress_sensor.Xi
    [1] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.P(
    start = airOutletPress_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.h
    (start = airOutletPress_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.AbsolutePressure airOutletPress_sensor.state.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airOutletPress_sensor.state.T(
    min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.state.X[2](
    start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate airOutletPress_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.C_in.Q(start = airOutletPress_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.C_in.P
    (start = airOutletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airOutletPress_sensor.C_out.Q(start =  -airOutletPress_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.C_out.P
    (start = airOutletPress_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.h_in
    (start = airOutletPress_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.h_out
    (start = airOutletPress_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.flow_model.Q(start = airOutletPress_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_in
    (start = airOutletPress_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P_out
    (start = airOutletPress_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction airOutletPress_sensor.flow_model.Xi
    [1] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho_in
    (start = airOutletPress_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho_out
    (start = airOutletPress_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density airOutletPress_sensor.flow_model.rho
    (start = airOutletPress_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airOutletPress_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    airOutletPress_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    airOutletPress_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airOutletPress_sensor.flow_model.T_in
    (start = airOutletPress_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airOutletPress_sensor.flow_model.T_out
    (start = airOutletPress_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure airOutletPress_sensor.flow_model.state_in.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airOutletPress_sensor.flow_model.state_in.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.state_in.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  Modelica.Media.Interfaces.Types.AbsolutePressure airOutletPress_sensor.flow_model.state_out.p
     "Absolute pressure of medium";
  Modelica.Media.Interfaces.Types.Temperature airOutletPress_sensor.flow_model.state_out.T
    (min = 190.0, max = 647.0) "Temperature of medium";
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.state_out.X
    [2](start = {0.01, 0.99}) "Mass fractions (= (component mass)/total mass  m_i/m)";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    airOutletPress_sensor.flow_model.DP(start = airOutletPress_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power airOutletPress_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    airOutletPress_sensor.flow_model.DH(start = airOutletPress_sensor.flow_model.h_out_0
    -airOutletPress_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    airOutletPress_sensor.flow_model.DT(start = airOutletPress_sensor.flow_model.T_out_0
    -airOutletPress_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    airOutletPress_sensor.flow_model.C_in.Q(start = airOutletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.C_in.P
    (start = airOutletPress_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.C_in.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    airOutletPress_sensor.flow_model.C_out.Q(start =  -airOutletPress_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.C_out.P
    (start = airOutletPress_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.C_out.h_outflow
    (start = airOutletPress_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction airOutletPress_sensor.flow_model.C_out.Xi_outflow
    [1];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy airOutletPress_sensor.flow_model.h
    (start = airOutletPress_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure airOutletPress_sensor.flow_model.P
    (start = airOutletPress_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature airOutletPress_sensor.flow_model.T
    (start = airOutletPress_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real airOutletPress_sensor.P_barG(start = airOutletPress_sensor.P_0*1E-05-1, 
    nominal = 100000.0);
  Real airOutletPress_sensor.P_psiG(start = airOutletPress_sensor.P_0*
    0.000145038-14.50377377, nominal = 14.5038);
  Real airOutletPress_sensor.P_MPaG(start = airOutletPress_sensor.P_0*1E-06-0.1,
     nominal = 0.09999999999999999);
  Real airOutletPress_sensor.P_kPaG(start = airOutletPress_sensor.P_0*0.001-100,
     nominal = 100.0);
  Real airOutletPress_sensor.P_barA(start = airOutletPress_sensor.P_0*1E-05, 
    nominal = 1.0, unit = "bar");
  Real airOutletPress_sensor.P_psiA(start = airOutletPress_sensor.P_0*
    0.000145038, nominal = 14.5038);
  Real airOutletPress_sensor.P_MPaA(start = airOutletPress_sensor.P_0*1E-06, 
    nominal = 0.09999999999999999);
  Real airOutletPress_sensor.P_kPaA(start = airOutletPress_sensor.P_0*0.001, 
    nominal = 100.0);
  Real airOutletPress_sensor.P_inHg(start = airOutletPress_sensor.P_0*
    0.0002953006, nominal = 29.530060000000002);
  Real airOutletPress_sensor.P_mbar(start = airOutletPress_sensor.P_0*0.01, 
    nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    source.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    source.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure source.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate source.Qv_out
    (start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature source.T_out;
  Modelica.Media.Interfaces.Types.FixedPhase source.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy source.state_out.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density source.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature source.state_out.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure source.state_out.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source.C_out.Q(
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure source.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy source.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction source.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputHeight Condenser.water_height;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    Condenser.Kfr_cold;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputArea Condenser.S;
  MetroscopeModelingLibrary.Utilities.Units.HeatExchangeCoefficient 
    Condenser.Kth;
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Condenser.Qv_cold_in(
    start = Condenser.Q_cold_0/1000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Condenser.W;
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Condenser.Q_cold(
    start = Condenser.Q_cold_0);
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Condenser.Q_hot(
    start = Condenser.Q_hot_0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.T_cold_in(
    start = Condenser.T_cold_in_0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.T_cold_out(
    start = Condenser.T_cold_out_0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.T_hot_in(
    start = Condenser.T_hot_in_0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.T_hot_out(
    start = Condenser.T_hot_out_0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.P_tot(start = 
    Condenser.Psat_0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.Psat(start = 
    Condenser.Psat_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.Tsat(start = 
    Condenser.Tsat_0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.P_incond(start = 
    0.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.water_height_DP(start = Condenser.water_height_DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Condenser.C_incond(
    start = 0, unit = "mol/m3", min = 0.0) "Incondensable molar concentration";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure 
    Condenser.P_offset(start = 0) "Offset correction for ideal gas law";
  MetroscopeModelingLibrary.Utilities.Units.Percentage Condenser.fouling(
    start = 0, nominal = 10.0);
  Real Condenser.air_intake(start = 0, nominal = 0.001, unit = "mol/m3", min = 
    0.0);
  MetroscopeModelingLibrary.Utilities.Units.Percentage Condenser.Qv_cold_in_decrease
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.C_cold_in.Q(start = Condenser.Q_cold_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.C_cold_in.P(
    start = 100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.C_cold_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.C_cold_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.C_hot_in.Q(start = Condenser.Q_hot_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.C_hot_in.P(
    start = Condenser.Psat_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.C_hot_in.h_outflow
    (start = 0.0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.C_hot_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.C_hot_out.Q(start =  -Condenser.Q_hot_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.C_hot_out.P(
    start = Condenser.Psat_0+Condenser.water_height_DP_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.C_hot_out.h_outflow
    (start = Condenser.h_liq_sat_0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.C_hot_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.C_cold_out.Q(start =  -Condenser.Q_cold_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.C_cold_out.P(
    start = Condenser.P_cold_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.C_cold_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.C_cold_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side_pipe.h_in
    (start = Condenser.cold_side_pipe.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side_pipe.h_out
    (start = Condenser.cold_side_pipe.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.cold_side_pipe.Q(start = Condenser.cold_side_pipe.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side_pipe.P_in
    (start = Condenser.cold_side_pipe.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side_pipe.P_out
    (start = Condenser.cold_side_pipe.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Condenser.cold_side_pipe.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side_pipe.rho_in
    (start = Condenser.cold_side_pipe.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side_pipe.rho_out
    (start = Condenser.cold_side_pipe.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side_pipe.rho
    (start = Condenser.cold_side_pipe.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.cold_side_pipe.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Condenser.cold_side_pipe.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.cold_side_pipe.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.cold_side_pipe.T_in
    (start = Condenser.cold_side_pipe.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.cold_side_pipe.T_out
    (start = Condenser.cold_side_pipe.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.cold_side_pipe.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.cold_side_pipe.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.cold_side_pipe.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.cold_side_pipe.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.cold_side_pipe.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.cold_side_pipe.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.cold_side_pipe.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.cold_side_pipe.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.cold_side_pipe.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.cold_side_pipe.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.cold_side_pipe.DP(start = Condenser.cold_side_pipe.DP_0, 
    nominal = 500000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Condenser.cold_side_pipe.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Condenser.cold_side_pipe.DH(start = Condenser.cold_side_pipe.h_out_0-
    Condenser.cold_side_pipe.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Condenser.cold_side_pipe.DT(start = Condenser.cold_side_pipe.T_out_0-
    Condenser.cold_side_pipe.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.cold_side_pipe.C_in.Q(start = Condenser.cold_side_pipe.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side_pipe.C_in.P
    (start = Condenser.cold_side_pipe.P_in_0, nominal = 500000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side_pipe.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.cold_side_pipe.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.cold_side_pipe.C_out.Q(start =  -Condenser.cold_side_pipe.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side_pipe.C_out.P
    (start = Condenser.cold_side_pipe.P_out_0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side_pipe.C_out.h_outflow
    (start = Condenser.cold_side_pipe.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.cold_side_pipe.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side_pipe.h
    (start = Condenser.cold_side_pipe.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    Condenser.cold_side_pipe.Kfr(start = 10) "Friction pressure loss coefficient";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialHeight 
    Condenser.cold_side_pipe.delta_z(nominal = 5.0) "Height difference between outlet and inlet";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.cold_side_pipe.DP_f "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.cold_side_pipe.DP_z "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.Percentage Condenser.cold_side_pipe.fouling;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.hot_side.h_in
    (start = Condenser.hot_side.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.hot_side.h_out
    (start = Condenser.hot_side.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.hot_side.Q(start = Condenser.hot_side.Q_0) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.P_in(
    start = Condenser.hot_side.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.P_out(
    start = Condenser.hot_side.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Condenser.hot_side.Xi[0]
     "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.hot_side.rho_in(
    start = Condenser.hot_side.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.hot_side.rho_out(
    start = Condenser.hot_side.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.hot_side.rho(
    start = Condenser.hot_side.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.hot_side.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Condenser.hot_side.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.hot_side.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.hot_side.T_in(
    start = Condenser.hot_side.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.hot_side.T_out
    (start = Condenser.hot_side.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.hot_side.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.hot_side.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.hot_side.state_in.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.hot_side.state_in.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.hot_side.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.hot_side.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.hot_side.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.hot_side.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.hot_side.state_out.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.hot_side.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.hot_side.DP(start = Condenser.hot_side.DP_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Condenser.hot_side.W(start = 0,
     nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Condenser.hot_side.DH(start = Condenser.hot_side.h_out_0-Condenser.hot_side.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Condenser.hot_side.DT(start = Condenser.hot_side.T_out_0-Condenser.hot_side.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.hot_side.C_in.Q(start = Condenser.hot_side.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.C_in.P(
    start = Condenser.hot_side.P_in_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.hot_side.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.hot_side.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.hot_side.C_out.Q(start =  -Condenser.hot_side.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.C_out.P(
    start = Condenser.hot_side.P_out_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.hot_side.C_out.h_outflow
    (start = Condenser.hot_side.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.hot_side.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.hot_side.P(
    start = Condenser.hot_side.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPower Condenser.hot_side.W_input
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side.h_in
    (start = Condenser.cold_side.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side.h_out
    (start = Condenser.cold_side.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.cold_side.Q(start = Condenser.cold_side.Q_0) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.P_in(
    start = Condenser.cold_side.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.P_out(
    start = Condenser.cold_side.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Condenser.cold_side.Xi[0]
     "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side.rho_in(
    start = Condenser.cold_side.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side.rho_out(
    start = Condenser.cold_side.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.cold_side.rho(
    start = Condenser.cold_side.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.cold_side.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Condenser.cold_side.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.cold_side.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.cold_side.T_in
    (start = Condenser.cold_side.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.cold_side.T_out
    (start = Condenser.cold_side.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.cold_side.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.cold_side.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.cold_side.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.cold_side.state_in.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.cold_side.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.cold_side.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.cold_side.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.cold_side.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.cold_side.state_out.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.cold_side.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.cold_side.DP(start = Condenser.cold_side.DP_0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Condenser.cold_side.W(start = 0,
     nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Condenser.cold_side.DH(start = Condenser.cold_side.h_out_0-Condenser.cold_side.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Condenser.cold_side.DT(start = Condenser.cold_side.T_out_0-Condenser.cold_side.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.cold_side.C_in.Q(start = Condenser.cold_side.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.C_in.P(
    start = Condenser.cold_side.P_in_0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.cold_side.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.cold_side.C_out.Q(start =  -Condenser.cold_side.Q_0, nominal = 
    500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.C_out.P
    (start = Condenser.cold_side.P_out_0, nominal = 400000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.cold_side.C_out.h_outflow
    (start = Condenser.cold_side.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.cold_side.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.cold_side.P(
    start = Condenser.cold_side.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPower Condenser.cold_side.W_input
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.water_height_pipe.h_in
    (start = Condenser.water_height_pipe.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.water_height_pipe.h_out
    (start = Condenser.water_height_pipe.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.water_height_pipe.Q(start = Condenser.water_height_pipe.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.water_height_pipe.P_in
    (start = Condenser.water_height_pipe.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.water_height_pipe.P_out
    (start = Condenser.water_height_pipe.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Condenser.water_height_pipe.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.water_height_pipe.rho_in
    (start = Condenser.water_height_pipe.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.water_height_pipe.rho_out
    (start = Condenser.water_height_pipe.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.water_height_pipe.rho
    (start = Condenser.water_height_pipe.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.water_height_pipe.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Condenser.water_height_pipe.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.water_height_pipe.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.water_height_pipe.T_in
    (start = Condenser.water_height_pipe.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.water_height_pipe.T_out
    (start = Condenser.water_height_pipe.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.water_height_pipe.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.water_height_pipe.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.water_height_pipe.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.water_height_pipe.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.water_height_pipe.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.water_height_pipe.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.water_height_pipe.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.water_height_pipe.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.water_height_pipe.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.water_height_pipe.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.water_height_pipe.DP(start = Condenser.water_height_pipe.DP_0, 
    nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Condenser.water_height_pipe.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Condenser.water_height_pipe.DH(start = Condenser.water_height_pipe.h_out_0-
    Condenser.water_height_pipe.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Condenser.water_height_pipe.DT(start = Condenser.water_height_pipe.T_out_0-
    Condenser.water_height_pipe.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.water_height_pipe.C_in.Q(start = Condenser.water_height_pipe.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.water_height_pipe.C_in.P
    (start = Condenser.water_height_pipe.P_in_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.water_height_pipe.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.water_height_pipe.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.water_height_pipe.C_out.Q(start =  -Condenser.water_height_pipe.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.water_height_pipe.C_out.P
    (start = Condenser.water_height_pipe.P_out_0, nominal = 14000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.water_height_pipe.C_out.h_outflow
    (start = Condenser.water_height_pipe.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.water_height_pipe.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.water_height_pipe.h
    (start = Condenser.water_height_pipe.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputFrictionCoefficient 
    Condenser.water_height_pipe.Kfr(start = 10) "Friction pressure loss coefficient";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialHeight 
    Condenser.water_height_pipe.delta_z(nominal = 5.0) "Height difference between outlet and inlet";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.water_height_pipe.DP_f "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.water_height_pipe.DP_z "Singular pressure loss";
  MetroscopeModelingLibrary.Utilities.Units.Percentage Condenser.water_height_pipe.fouling;
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_in.h_in
    (start = Condenser.incondensables_in.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_in.h_out
    (start = Condenser.incondensables_in.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.incondensables_in.Q(start = Condenser.incondensables_in.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_in.P_in
    (start = Condenser.incondensables_in.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_in.P_out
    (start = Condenser.incondensables_in.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Condenser.incondensables_in.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_in.rho_in
    (start = Condenser.incondensables_in.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_in.rho_out
    (start = Condenser.incondensables_in.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_in.rho
    (start = Condenser.incondensables_in.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.incondensables_in.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Condenser.incondensables_in.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.incondensables_in.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.incondensables_in.T_in
    (start = Condenser.incondensables_in.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.incondensables_in.T_out
    (start = Condenser.incondensables_in.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.incondensables_in.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.incondensables_in.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.incondensables_in.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.incondensables_in.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.incondensables_in.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.incondensables_in.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.incondensables_in.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.incondensables_in.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.incondensables_in.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.incondensables_in.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.incondensables_in.DP(start = Condenser.incondensables_in.DP_0, 
    nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Condenser.incondensables_in.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Condenser.incondensables_in.DH(start = Condenser.incondensables_in.h_out_0-
    Condenser.incondensables_in.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Condenser.incondensables_in.DT(start = Condenser.incondensables_in.T_out_0-
    Condenser.incondensables_in.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.incondensables_in.C_in.Q(start = Condenser.incondensables_in.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_in.C_in.P
    (start = Condenser.incondensables_in.P_in_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_in.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.incondensables_in.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.incondensables_in.C_out.Q(start =  -Condenser.incondensables_in.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_in.C_out.P
    (start = Condenser.incondensables_in.P_out_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_in.C_out.h_outflow
    (start = Condenser.incondensables_in.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.incondensables_in.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_in.h
    (start = Condenser.incondensables_in.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    Condenser.incondensables_in.DP_input(start = 0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_out.h_in
    (start = Condenser.incondensables_out.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_out.h_out
    (start = Condenser.incondensables_out.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.incondensables_out.Q(start = Condenser.incondensables_out.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_out.P_in
    (start = Condenser.incondensables_out.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_out.P_out
    (start = Condenser.incondensables_out.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Condenser.incondensables_out.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_out.rho_in
    (start = Condenser.incondensables_out.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_out.rho_out
    (start = Condenser.incondensables_out.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Condenser.incondensables_out.rho
    (start = Condenser.incondensables_out.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.incondensables_out.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Condenser.incondensables_out.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Condenser.incondensables_out.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.incondensables_out.T_in
    (start = Condenser.incondensables_out.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Condenser.incondensables_out.T_out
    (start = Condenser.incondensables_out.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.incondensables_out.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.incondensables_out.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.incondensables_out.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.incondensables_out.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.incondensables_out.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Condenser.incondensables_out.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Condenser.incondensables_out.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Condenser.incondensables_out.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Condenser.incondensables_out.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Condenser.incondensables_out.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Condenser.incondensables_out.DP(start = Condenser.incondensables_out.DP_0, 
    nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.Power Condenser.incondensables_out.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Condenser.incondensables_out.DH(start = Condenser.incondensables_out.h_out_0
    -Condenser.incondensables_out.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Condenser.incondensables_out.DT(start = Condenser.incondensables_out.T_out_0
    -Condenser.incondensables_out.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Condenser.incondensables_out.C_in.Q(start = Condenser.incondensables_out.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_out.C_in.P
    (start = Condenser.incondensables_out.P_in_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_out.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.incondensables_out.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Condenser.incondensables_out.C_out.Q(start =  -Condenser.incondensables_out.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Condenser.incondensables_out.C_out.P
    (start = Condenser.incondensables_out.P_out_0, nominal = 5000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_out.C_out.h_outflow
    (start = Condenser.incondensables_out.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Condenser.incondensables_out.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Condenser.incondensables_out.h
    (start = Condenser.incondensables_out.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputDifferentialPressure 
    Condenser.incondensables_out.DP_input(start = 0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputSpecificEnthalpy 
    source2.h_out;
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputMassFraction 
    source2.Xi_out[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure source2.P_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source2.Q_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    source2.Qv_out(start = -1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature source2.T_out;
  Modelica.Media.Interfaces.Types.FixedPhase source2.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy source2.state_out.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density source2.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature source2.state_out.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure source2.state_out.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate source2.C_out.Q
    (nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure source2.C_out.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy source2.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction source2.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy sink.h_in;
  MetroscopeModelingLibrary.Utilities.Units.MassFraction sink.Xi_in[0];
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPressure sink.P_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate sink.Q_in;
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate sink.Qv_in(
    start = 1);
  MetroscopeModelingLibrary.Utilities.Units.Temperature sink.T_in;
  Modelica.Media.Interfaces.Types.FixedPhase sink.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy sink.state_in.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density sink.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature sink.state_in.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure sink.state_in.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate sink.C_in.Q(
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure sink.C_in.P(start = 
    100000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy sink.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction sink.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Temp2_sensor.Q(
    start = Temp2_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Temp2_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.P(start = 
    Temp2_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.h(
    start = Temp2_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Temp2_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Temp2_sensor.state.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Temp2_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Temp2_sensor.state.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Temp2_sensor.state.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Temp2_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp2_sensor.C_in.Q(start = Temp2_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.C_in.P(
    start = Temp2_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Temp2_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Temp2_sensor.C_out.Q(start =  -Temp2_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.C_out.P(
    start = Temp2_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Temp2_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.flow_model.h_in
    (start = Temp2_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.flow_model.h_out
    (start = Temp2_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp2_sensor.flow_model.Q(start = Temp2_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.P_in
    (start = Temp2_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.P_out
    (start = Temp2_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Temp2_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Temp2_sensor.flow_model.rho_in
    (start = Temp2_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Temp2_sensor.flow_model.rho_out
    (start = Temp2_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Temp2_sensor.flow_model.rho(
    start = Temp2_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Temp2_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Temp2_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Temp2_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp2_sensor.flow_model.T_in
    (start = Temp2_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp2_sensor.flow_model.T_out
    (start = Temp2_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Temp2_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Temp2_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Temp2_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Temp2_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Temp2_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Temp2_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Temp2_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Temp2_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Temp2_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Temp2_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Temp2_sensor.flow_model.DP(start = Temp2_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Temp2_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Temp2_sensor.flow_model.DH(start = Temp2_sensor.flow_model.h_out_0-
    Temp2_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Temp2_sensor.flow_model.DT(start = Temp2_sensor.flow_model.T_out_0-
    Temp2_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp2_sensor.flow_model.C_in.Q(start = Temp2_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.C_in.P
    (start = Temp2_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Temp2_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Temp2_sensor.flow_model.C_out.Q(start =  -Temp2_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.C_out.P
    (start = Temp2_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.flow_model.C_out.h_outflow
    (start = Temp2_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Temp2_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp2_sensor.flow_model.h
    (start = Temp2_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp2_sensor.flow_model.P(
    start = Temp2_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp2_sensor.flow_model.T
    (start = Temp2_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp2_sensor.T(start = 
    Temp2_sensor.T_0);
  Real Temp2_sensor.T_degC(start = Temp2_sensor.T_0+273.15, nominal = 573.15, 
    unit = "degC");
  Real Temp2_sensor.T_degF(start = (Temp2_sensor.T_0+273.15)*1.8+32, nominal = 
    1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Press2_sensor.Q
    (start = Press2_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press2_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.P(start = 
    Press2_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.h(
    start = Press2_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Press2_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press2_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press2_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press2_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press2_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Press2_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press2_sensor.C_in.Q(start = Press2_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.C_in.P(
    start = Press2_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press2_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press2_sensor.C_out.Q(start =  -Press2_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.C_out.P(
    start = Press2_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press2_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.flow_model.h_in
    (start = Press2_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.flow_model.h_out
    (start = Press2_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press2_sensor.flow_model.Q(start = Press2_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.P_in
    (start = Press2_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.P_out
    (start = Press2_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press2_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Press2_sensor.flow_model.rho_in
    (start = Press2_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press2_sensor.flow_model.rho_out
    (start = Press2_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press2_sensor.flow_model.rho
    (start = Press2_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press2_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Press2_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press2_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press2_sensor.flow_model.T_in
    (start = Press2_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press2_sensor.flow_model.T_out
    (start = Press2_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Press2_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press2_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press2_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press2_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press2_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Press2_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press2_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press2_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press2_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press2_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press2_sensor.flow_model.DP(start = Press2_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Press2_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Press2_sensor.flow_model.DH(start = Press2_sensor.flow_model.h_out_0-
    Press2_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Press2_sensor.flow_model.DT(start = Press2_sensor.flow_model.T_out_0-
    Press2_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press2_sensor.flow_model.C_in.Q(start = Press2_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.C_in.P
    (start = Press2_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Press2_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press2_sensor.flow_model.C_out.Q(start =  -Press2_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.C_out.P
    (start = Press2_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.flow_model.C_out.h_outflow
    (start = Press2_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Press2_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press2_sensor.flow_model.h
    (start = Press2_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press2_sensor.flow_model.P(
    start = Press2_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press2_sensor.flow_model.T
    (start = Press2_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real Press2_sensor.P_barG(start = Press2_sensor.P_0*1E-05-1, nominal = 
    100000.0);
  Real Press2_sensor.P_psiG(start = Press2_sensor.P_0*0.000145038-14.50377377, 
    nominal = 14.5038);
  Real Press2_sensor.P_MPaG(start = Press2_sensor.P_0*1E-06-0.1, nominal = 
    0.09999999999999999);
  Real Press2_sensor.P_kPaG(start = Press2_sensor.P_0*0.001-100, nominal = 100.0);
  Real Press2_sensor.P_barA(start = Press2_sensor.P_0*1E-05, nominal = 1.0, 
    unit = "bar");
  Real Press2_sensor.P_psiA(start = Press2_sensor.P_0*0.000145038, nominal = 
    14.5038);
  Real Press2_sensor.P_MPaA(start = Press2_sensor.P_0*1E-06, nominal = 
    0.09999999999999999);
  Real Press2_sensor.P_kPaA(start = Press2_sensor.P_0*0.001, nominal = 100.0);
  Real Press2_sensor.P_inHg(start = Press2_sensor.P_0*0.0002953006, nominal = 
    29.530060000000002);
  Real Press2_sensor.P_mbar(start = Press2_sensor.P_0*0.01, nominal = 1000.0, 
    unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Flow2_sensor.Q(
    start = Flow2_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Flow2_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.P(start = 
    Flow2_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.h(
    start = Flow2_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Flow2_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Flow2_sensor.state.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Flow2_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Flow2_sensor.state.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Flow2_sensor.state.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Flow2_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow2_sensor.C_in.Q(start = Flow2_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.C_in.P(
    start = Flow2_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Flow2_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Flow2_sensor.C_out.Q(start =  -Flow2_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.C_out.P(
    start = Flow2_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Flow2_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.flow_model.h_in
    (start = Flow2_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.flow_model.h_out
    (start = Flow2_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow2_sensor.flow_model.Q(start = Flow2_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.P_in
    (start = Flow2_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.P_out
    (start = Flow2_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Flow2_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Flow2_sensor.flow_model.rho_in
    (start = Flow2_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Flow2_sensor.flow_model.rho_out
    (start = Flow2_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Flow2_sensor.flow_model.rho(
    start = Flow2_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Flow2_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Flow2_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Flow2_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Flow2_sensor.flow_model.T_in
    (start = Flow2_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Flow2_sensor.flow_model.T_out
    (start = Flow2_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Flow2_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Flow2_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Flow2_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Flow2_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Flow2_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Flow2_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Flow2_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Flow2_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Flow2_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Flow2_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Flow2_sensor.flow_model.DP(start = Flow2_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Flow2_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Flow2_sensor.flow_model.DH(start = Flow2_sensor.flow_model.h_out_0-
    Flow2_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Flow2_sensor.flow_model.DT(start = Flow2_sensor.flow_model.T_out_0-
    Flow2_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow2_sensor.flow_model.C_in.Q(start = Flow2_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.C_in.P
    (start = Flow2_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Flow2_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Flow2_sensor.flow_model.C_out.Q(start =  -Flow2_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.C_out.P
    (start = Flow2_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.flow_model.C_out.h_outflow
    (start = Flow2_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Flow2_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow2_sensor.flow_model.h
    (start = Flow2_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow2_sensor.flow_model.P(
    start = Flow2_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Flow2_sensor.flow_model.T
    (start = Flow2_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Flow2_sensor.Qv(
    start = Flow2_sensor.Qv_0);
  Real Flow2_sensor.Q_lm(start = Flow2_sensor.Qv_0*60000, nominal = 6000.0);
  Real Flow2_sensor.Q_th(start = Flow2_sensor.Q_0*3.6, nominal = 360.0);
  Real Flow2_sensor.Q_lbs(start = Flow2_sensor.Q_0*0.453592428, nominal = 
    45.3592428);
  Real Flow2_sensor.Q_Mlbh(start = Flow2_sensor.Q_0*0.0079366414387, nominal = 
    0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Flow1_sensor.Q(
    start = Flow1_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Flow1_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.P(start = 
    Flow1_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.h(
    start = Flow1_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Flow1_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Flow1_sensor.state.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Flow1_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Flow1_sensor.state.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Flow1_sensor.state.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Flow1_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow1_sensor.C_in.Q(start = Flow1_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.C_in.P(
    start = Flow1_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Flow1_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Flow1_sensor.C_out.Q(start =  -Flow1_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.C_out.P(
    start = Flow1_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Flow1_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.flow_model.h_in
    (start = Flow1_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.flow_model.h_out
    (start = Flow1_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow1_sensor.flow_model.Q(start = Flow1_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.P_in
    (start = Flow1_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.P_out
    (start = Flow1_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Flow1_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Flow1_sensor.flow_model.rho_in
    (start = Flow1_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Flow1_sensor.flow_model.rho_out
    (start = Flow1_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Flow1_sensor.flow_model.rho(
    start = Flow1_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Flow1_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Flow1_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Flow1_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Flow1_sensor.flow_model.T_in
    (start = Flow1_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Flow1_sensor.flow_model.T_out
    (start = Flow1_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Flow1_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Flow1_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Flow1_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Flow1_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Flow1_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Flow1_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Flow1_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Flow1_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Flow1_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Flow1_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Flow1_sensor.flow_model.DP(start = Flow1_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Flow1_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Flow1_sensor.flow_model.DH(start = Flow1_sensor.flow_model.h_out_0-
    Flow1_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Flow1_sensor.flow_model.DT(start = Flow1_sensor.flow_model.T_out_0-
    Flow1_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Flow1_sensor.flow_model.C_in.Q(start = Flow1_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.C_in.P
    (start = Flow1_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Flow1_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Flow1_sensor.flow_model.C_out.Q(start =  -Flow1_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.C_out.P
    (start = Flow1_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.flow_model.C_out.h_outflow
    (start = Flow1_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Flow1_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Flow1_sensor.flow_model.h
    (start = Flow1_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Flow1_sensor.flow_model.P(
    start = Flow1_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Flow1_sensor.flow_model.T
    (start = Flow1_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Flow1_sensor.Qv(
    start = Flow1_sensor.Qv_0);
  Real Flow1_sensor.Q_lm(start = Flow1_sensor.Qv_0*60000, nominal = 6000.0);
  Real Flow1_sensor.Q_th(start = Flow1_sensor.Q_0*3.6, nominal = 360.0);
  Real Flow1_sensor.Q_lbs(start = Flow1_sensor.Q_0*0.453592428, nominal = 
    45.3592428);
  Real Flow1_sensor.Q_Mlbh(start = Flow1_sensor.Q_0*0.0079366414387, nominal = 
    0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h_in(
    start = V422_valve.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h_out(
    start = V422_valve.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V422_valve.Q(
    start = V422_valve.Q_0) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_in(start = 
    V422_valve.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.P_out(start = 
    V422_valve.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V422_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_in(start = 
    V422_valve.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho_out(start = 
    V422_valve.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_valve.rho(start = 
    V422_valve.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V422_valve.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V422_valve.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V422_valve.Qv
     "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_in(start = 
    V422_valve.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_valve.T_out(
    start = V422_valve.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V422_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_valve.state_in.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_valve.state_in.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V422_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_valve.state_out.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_valve.state_out.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V422_valve.DP(
    start = V422_valve.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power V422_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V422_valve.DH(
    start = V422_valve.h_out_0-V422_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V422_valve.DT(start = V422_valve.T_out_0-V422_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_valve.C_in.Q(start = V422_valve.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.C_in.P(start = 
    V422_valve.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction V422_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V422_valve.C_out.Q(start =  -V422_valve.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_valve.C_out.P(start = 
    V422_valve.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.C_out.h_outflow
    (start = V422_valve.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction V422_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_valve.h(
    start = V422_valve.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V422_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V422_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V422_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h_in(
    start = V423_valve.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h_out(
    start = V423_valve.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V423_valve.Q(
    start = V423_valve.Q_0) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_in(start = 
    V423_valve.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.P_out(start = 
    V423_valve.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V423_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_in(start = 
    V423_valve.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho_out(start = 
    V423_valve.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V423_valve.rho(start = 
    V423_valve.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V423_valve.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V423_valve.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V423_valve.Qv
     "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_in(start = 
    V423_valve.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V423_valve.T_out(
    start = V423_valve.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V423_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V423_valve.state_in.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V423_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V423_valve.state_in.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V423_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V423_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V423_valve.state_out.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V423_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V423_valve.state_out.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V423_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V423_valve.DP(
    start = V423_valve.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power V423_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V423_valve.DH(
    start = V423_valve.h_out_0-V423_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V423_valve.DT(start = V423_valve.T_out_0-V423_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V423_valve.C_in.Q(start = V423_valve.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.C_in.P(start = 
    V423_valve.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction V423_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V423_valve.C_out.Q(start =  -V423_valve.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V423_valve.C_out.P(start = 
    V423_valve.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.C_out.h_outflow
    (start = V423_valve.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction V423_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V423_valve.h(
    start = V423_valve.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V423_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V423_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V423_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC197_sensor.Q
    (start = CEC197_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC197_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.P(start = 
    CEC197_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.h(
    start = CEC197_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC197_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.C_in.Q(start = CEC197_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.C_in.P(
    start = CEC197_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC197_sensor.C_out.Q(start =  -CEC197_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.C_out.P(
    start = CEC197_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h_in
    (start = CEC197_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h_out
    (start = CEC197_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.Q(start = CEC197_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_in
    (start = CEC197_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P_out
    (start = CEC197_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC197_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_in
    (start = CEC197_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho_out
    (start = CEC197_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC197_sensor.flow_model.rho
    (start = CEC197_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC197_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC197_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC197_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T_in
    (start = CEC197_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T_out
    (start = CEC197_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC197_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC197_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC197_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC197_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC197_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC197_sensor.flow_model.DP(start = CEC197_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC197_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC197_sensor.flow_model.DH(start = CEC197_sensor.flow_model.h_out_0-
    CEC197_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC197_sensor.flow_model.DT(start = CEC197_sensor.flow_model.T_out_0-
    CEC197_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC197_sensor.flow_model.C_in.Q(start = CEC197_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.C_in.P
    (start = CEC197_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC197_sensor.flow_model.C_out.Q(start =  -CEC197_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.C_out.P
    (start = CEC197_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.C_out.h_outflow
    (start = CEC197_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CEC197_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC197_sensor.flow_model.h
    (start = CEC197_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC197_sensor.flow_model.P(
    start = CEC197_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC197_sensor.flow_model.T
    (start = CEC197_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate CEC197_sensor.Qv(
    start = CEC197_sensor.Qv_0);
  Real CEC197_sensor.Q_lm(start = CEC197_sensor.Qv_0*60000, nominal = 6000.0);
  Real CEC197_sensor.Q_th(start = CEC197_sensor.Q_0*3.6, nominal = 360.0);
  Real CEC197_sensor.Q_lbs(start = CEC197_sensor.Q_0*0.453592428, nominal = 
    45.3592428);
  Real CEC197_sensor.Q_Mlbh(start = CEC197_sensor.Q_0*0.0079366414387, 
    nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.Q(start = V422_Flow_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V422_Flow_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.P(start = 
    V422_Flow_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.h(
    start = V422_Flow_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase V422_Flow_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_Flow_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_Flow_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_Flow_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_Flow_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate V422_Flow_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.C_in.Q(start = V422_Flow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.C_in.P(
    start = V422_Flow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V422_Flow_sensor.C_out.Q(start =  -V422_Flow_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.C_out.P(
    start = V422_Flow_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.h_in
    (start = V422_Flow_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.h_out
    (start = V422_Flow_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.flow_model.Q(start = V422_Flow_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_in
    (start = V422_Flow_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P_out
    (start = V422_Flow_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V422_Flow_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho_in
    (start = V422_Flow_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho_out
    (start = V422_Flow_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V422_Flow_sensor.flow_model.rho
    (start = V422_Flow_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V422_Flow_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V422_Flow_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V422_Flow_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_Flow_sensor.flow_model.T_in
    (start = V422_Flow_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_Flow_sensor.flow_model.T_out
    (start = V422_Flow_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V422_Flow_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_Flow_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_Flow_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_Flow_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_Flow_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V422_Flow_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V422_Flow_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V422_Flow_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V422_Flow_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V422_Flow_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    V422_Flow_sensor.flow_model.DP(start = V422_Flow_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power V422_Flow_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    V422_Flow_sensor.flow_model.DH(start = V422_Flow_sensor.flow_model.h_out_0-
    V422_Flow_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V422_Flow_sensor.flow_model.DT(start = V422_Flow_sensor.flow_model.T_out_0-
    V422_Flow_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V422_Flow_sensor.flow_model.C_in.Q(start = V422_Flow_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.C_in.P
    (start = V422_Flow_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V422_Flow_sensor.flow_model.C_out.Q(start =  -V422_Flow_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.C_out.P
    (start = V422_Flow_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.C_out.h_outflow
    (start = V422_Flow_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction V422_Flow_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V422_Flow_sensor.flow_model.h
    (start = V422_Flow_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V422_Flow_sensor.flow_model.P
    (start = V422_Flow_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V422_Flow_sensor.flow_model.T
    (start = V422_Flow_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate V422_Flow_sensor.Qv(
    start = V422_Flow_sensor.Qv_0);
  Real V422_Flow_sensor.Q_lm(start = V422_Flow_sensor.Qv_0*60000, nominal = 
    6000.0);
  Real V422_Flow_sensor.Q_th(start = V422_Flow_sensor.Q_0*3.6, nominal = 360.0);
  Real V422_Flow_sensor.Q_lbs(start = V422_Flow_sensor.Q_0*0.453592428, 
    nominal = 45.3592428);
  Real V422_Flow_sensor.Q_Mlbh(start = V422_Flow_sensor.Q_0*0.0079366414387, 
    nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.Q(start = Q_reject_press_sensor.Q_0, nominal = 100.0) 
    "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_press_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.P(
    start = Q_reject_press_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.h
    (start = Q_reject_press_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.state.d(start = 150,
     nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_reject_press_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.C_in.Q(start = Q_reject_press_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.C_in.P
    (start = Q_reject_press_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_press_sensor.C_out.Q(start =  -Q_reject_press_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.C_out.P
    (start = Q_reject_press_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h_in
    (start = Q_reject_press_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h_out
    (start = Q_reject_press_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.Q(start = Q_reject_press_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_in
    (start = Q_reject_press_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P_out
    (start = Q_reject_press_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_reject_press_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_in
    (start = Q_reject_press_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho_out
    (start = Q_reject_press_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_reject_press_sensor.flow_model.rho
    (start = Q_reject_press_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_reject_press_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T_in
    (start = Q_reject_press_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T_out
    (start = Q_reject_press_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_reject_press_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_reject_press_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_reject_press_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_reject_press_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_reject_press_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_reject_press_sensor.flow_model.DP(start = Q_reject_press_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_reject_press_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_reject_press_sensor.flow_model.DH(start = Q_reject_press_sensor.flow_model.h_out_0
    -Q_reject_press_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_reject_press_sensor.flow_model.DT(start = Q_reject_press_sensor.flow_model.T_out_0
    -Q_reject_press_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_reject_press_sensor.flow_model.C_in.Q(start = Q_reject_press_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.C_in.P
    (start = Q_reject_press_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_reject_press_sensor.flow_model.C_out.Q(start =  -Q_reject_press_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.C_out.P
    (start = Q_reject_press_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.C_out.h_outflow
    (start = Q_reject_press_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Q_reject_press_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_reject_press_sensor.flow_model.h
    (start = Q_reject_press_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_reject_press_sensor.flow_model.P
    (start = Q_reject_press_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_reject_press_sensor.flow_model.T
    (start = Q_reject_press_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real Q_reject_press_sensor.P_barG(start = Q_reject_press_sensor.P_0*1E-05-1, 
    nominal = 100000.0);
  Real Q_reject_press_sensor.P_psiG(start = Q_reject_press_sensor.P_0*
    0.000145038-14.50377377, nominal = 14.5038);
  Real Q_reject_press_sensor.P_MPaG(start = Q_reject_press_sensor.P_0*1E-06-0.1,
     nominal = 0.09999999999999999);
  Real Q_reject_press_sensor.P_kPaG(start = Q_reject_press_sensor.P_0*0.001-100,
     nominal = 100.0);
  Real Q_reject_press_sensor.P_barA(start = Q_reject_press_sensor.P_0*1E-05, 
    nominal = 1.0, unit = "bar");
  Real Q_reject_press_sensor.P_psiA(start = Q_reject_press_sensor.P_0*
    0.000145038, nominal = 14.5038);
  Real Q_reject_press_sensor.P_MPaA(start = Q_reject_press_sensor.P_0*1E-06, 
    nominal = 0.09999999999999999);
  Real Q_reject_press_sensor.P_kPaA(start = Q_reject_press_sensor.P_0*0.001, 
    nominal = 100.0);
  Real Q_reject_press_sensor.P_inHg(start = Q_reject_press_sensor.P_0*
    0.0002953006, nominal = 29.530060000000002);
  Real Q_reject_press_sensor.P_mbar(start = Q_reject_press_sensor.P_0*0.01, 
    nominal = 1000.0, unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    SP189_sensor.Opening_pc(start = SP189_sensor.Opening_pc_0, nominal = 15.0, 
    unit = "1");
  Modelica.Blocks.Interfaces.RealOutput SP189_sensor.Opening(start = 
    SP189_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0, max = 
    1.0);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    CEC195_sensor.Opening_pc(start = CEC195_sensor.Opening_pc_0, nominal = 15.0,
     unit = "1");
  Modelica.Blocks.Interfaces.RealOutput CEC195_sensor.Opening(start = 
    CEC195_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0, 
    max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Temp1_sensor.Q(
    start = Temp1_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Temp1_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.P(start = 
    Temp1_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.h(
    start = Temp1_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Temp1_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Temp1_sensor.state.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Temp1_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Temp1_sensor.state.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Temp1_sensor.state.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Temp1_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp1_sensor.C_in.Q(start = Temp1_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.C_in.P(
    start = Temp1_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Temp1_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Temp1_sensor.C_out.Q(start =  -Temp1_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.C_out.P(
    start = Temp1_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Temp1_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.flow_model.h_in
    (start = Temp1_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.flow_model.h_out
    (start = Temp1_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp1_sensor.flow_model.Q(start = Temp1_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.P_in
    (start = Temp1_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.P_out
    (start = Temp1_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Temp1_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Temp1_sensor.flow_model.rho_in
    (start = Temp1_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Temp1_sensor.flow_model.rho_out
    (start = Temp1_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Temp1_sensor.flow_model.rho(
    start = Temp1_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Temp1_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Temp1_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Temp1_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp1_sensor.flow_model.T_in
    (start = Temp1_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp1_sensor.flow_model.T_out
    (start = Temp1_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Temp1_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Temp1_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Temp1_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Temp1_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Temp1_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Temp1_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Temp1_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Temp1_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Temp1_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Temp1_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Temp1_sensor.flow_model.DP(start = Temp1_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Temp1_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Temp1_sensor.flow_model.DH(start = Temp1_sensor.flow_model.h_out_0-
    Temp1_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Temp1_sensor.flow_model.DT(start = Temp1_sensor.flow_model.T_out_0-
    Temp1_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Temp1_sensor.flow_model.C_in.Q(start = Temp1_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.C_in.P
    (start = Temp1_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Temp1_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Temp1_sensor.flow_model.C_out.Q(start =  -Temp1_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.C_out.P
    (start = Temp1_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.flow_model.C_out.h_outflow
    (start = Temp1_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Temp1_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Temp1_sensor.flow_model.h
    (start = Temp1_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Temp1_sensor.flow_model.P(
    start = Temp1_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp1_sensor.flow_model.T
    (start = Temp1_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Temp1_sensor.T(start = 
    Temp1_sensor.T_0);
  Real Temp1_sensor.T_degC(start = Temp1_sensor.T_0+273.15, nominal = 573.15, 
    unit = "degC");
  Real Temp1_sensor.T_degF(start = (Temp1_sensor.T_0+273.15)*1.8+32, nominal = 
    1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Press1_sensor.Q
    (start = Press1_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press1_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.P(start = 
    Press1_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.h(
    start = Press1_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Press1_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.C_in.Q(start = Press1_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.C_in.P(
    start = Press1_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press1_sensor.C_out.Q(start =  -Press1_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.C_out.P(
    start = Press1_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h_in
    (start = Press1_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h_out
    (start = Press1_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.Q(start = Press1_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_in
    (start = Press1_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P_out
    (start = Press1_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press1_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_in
    (start = Press1_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho_out
    (start = Press1_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press1_sensor.flow_model.rho
    (start = Press1_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press1_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Press1_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press1_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T_in
    (start = Press1_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T_out
    (start = Press1_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Press1_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press1_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press1_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press1_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press1_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press1_sensor.flow_model.DP(start = Press1_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Press1_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Press1_sensor.flow_model.DH(start = Press1_sensor.flow_model.h_out_0-
    Press1_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Press1_sensor.flow_model.DT(start = Press1_sensor.flow_model.T_out_0-
    Press1_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press1_sensor.flow_model.C_in.Q(start = Press1_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.C_in.P
    (start = Press1_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press1_sensor.flow_model.C_out.Q(start =  -Press1_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.C_out.P
    (start = Press1_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.C_out.h_outflow
    (start = Press1_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Press1_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press1_sensor.flow_model.h
    (start = Press1_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press1_sensor.flow_model.P(
    start = Press1_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press1_sensor.flow_model.T
    (start = Press1_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real Press1_sensor.P_barG(start = Press1_sensor.P_0*1E-05-1, nominal = 
    100000.0);
  Real Press1_sensor.P_psiG(start = Press1_sensor.P_0*0.000145038-14.50377377, 
    nominal = 14.5038);
  Real Press1_sensor.P_MPaG(start = Press1_sensor.P_0*1E-06-0.1, nominal = 
    0.09999999999999999);
  Real Press1_sensor.P_kPaG(start = Press1_sensor.P_0*0.001-100, nominal = 100.0);
  Real Press1_sensor.P_barA(start = Press1_sensor.P_0*1E-05, nominal = 1.0, 
    unit = "bar");
  Real Press1_sensor.P_psiA(start = Press1_sensor.P_0*0.000145038, nominal = 
    14.5038);
  Real Press1_sensor.P_MPaA(start = Press1_sensor.P_0*1E-06, nominal = 
    0.09999999999999999);
  Real Press1_sensor.P_kPaA(start = Press1_sensor.P_0*0.001, nominal = 100.0);
  Real Press1_sensor.P_inHg(start = Press1_sensor.P_0*0.0002953006, nominal = 
    29.530060000000002);
  Real Press1_sensor.P_mbar(start = Press1_sensor.P_0*0.01, nominal = 1000.0, 
    unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.h_in(start = 
    Pump.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.h_out(start = 
    Pump.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Pump.Q(start = 
    Pump.Q_0) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_in(start = 
    Pump.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.P_out(start = 
    Pump.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Pump.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_in(start = 
    Pump.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho_out(start = 
    Pump.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Pump.rho(start = Pump.rho_0)
     "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate Pump.Qv_in 
    "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate Pump.Qv_out 
    "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate Pump.Qv 
    "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_in(start = 
    Pump.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Pump.T_out(start = 
    Pump.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Pump.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Pump.state_in.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Pump.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Pump.state_in.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Pump.state_in.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Pump.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Pump.state_out.h(start = 
    100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Pump.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Pump.state_out.T(start = 500, 
    nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Pump.state_out.p(start = 
    5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure Pump.DP(
    start = Pump.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Pump.W(start = 0, nominal = 
    1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy Pump.DH(
    start = Pump.h_out_0-Pump.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature Pump.DT(
    start = Pump.T_out_0-Pump.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Pump.C_in.Q(
    start = Pump.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.C_in.P(start = 
    Pump.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Pump.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate Pump.C_out.Q(
    start =  -Pump.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Pump.C_out.P(start = 
    Pump.P_out_0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Pump.C_out.h_outflow
    (start = Pump.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Pump.C_out.Xi_outflow[0];
  Real Pump.VRotn(start = 1400, nominal = 2000.0, min = 0.0) "Nominal rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.a1(start = 0) 
    "x^2 coef. of the pump characteristics hn = f(vol_flow) (s2/m5)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.a2(start = 0) 
    "x coef. of the pump characteristics hn = f(vol_flow) (s/m2)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputHeight Pump.a3(start = 10)
     "Constant coef. of the pump characteristics hn = f(vol_flow) (m)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.b1(start = 0) 
    "x^2 coef. of the pump efficiency characteristics rh = f(vol_flow) (s2/m6)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputReal Pump.b2(start = 0) 
    "x coef. of the pump efficiency characteristics rh = f(vol_flow) (s/m3)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.b3(start = 
    0.8) "Constant coef. of the pump efficiency characteristics rh = f(vol_flow) (s.u.)";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.rm(start = 
    0.85) "Product of the pump mechanical and electrical efficiencies";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputYield Pump.rh_min(
    start = 0.2) "Minimum efficiency to avoid zero crossings";
  MetroscopeModelingLibrary.Utilities.Units.Yield Pump.rh "Hydraulic efficiency";
  MetroscopeModelingLibrary.Utilities.Units.Height Pump.hn(start = 10) 
    "Pump head";
  MetroscopeModelingLibrary.Utilities.Units.Fraction Pump.R(start = 1) 
    "Reduced rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.Power Pump.Wh "Hydraulic power";
  MetroscopeModelingLibrary.Utilities.Units.PositivePower Pump.Wm 
    "Mechanical power";
  Modelica.Blocks.Interfaces.RealInput Pump.VRot "Pump rotational speed";
  MetroscopeModelingLibrary.Utilities.Units.PositivePower Pump.C_power.W;
  MetroscopeModelingLibrary.Utilities.Units.NegativePower source1.W_out;
  MetroscopeModelingLibrary.Utilities.Units.NegativePower source1.C_out.W;
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate Press3_sensor.Q
    (start = Press3_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press3_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.P(start = 
    Press3_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.h(
    start = Press3_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Press3_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press3_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press3_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press3_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press3_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Press3_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press3_sensor.C_in.Q(start = Press3_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.C_in.P(
    start = Press3_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press3_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press3_sensor.C_out.Q(start =  -Press3_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.C_out.P(
    start = Press3_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Press3_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.flow_model.h_in
    (start = Press3_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.flow_model.h_out
    (start = Press3_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press3_sensor.flow_model.Q(start = Press3_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.P_in
    (start = Press3_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.P_out
    (start = Press3_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Press3_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Press3_sensor.flow_model.rho_in
    (start = Press3_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press3_sensor.flow_model.rho_out
    (start = Press3_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Press3_sensor.flow_model.rho
    (start = Press3_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press3_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Press3_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Press3_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press3_sensor.flow_model.T_in
    (start = Press3_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press3_sensor.flow_model.T_out
    (start = Press3_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Press3_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press3_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press3_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press3_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press3_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Press3_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Press3_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Press3_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Press3_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Press3_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Press3_sensor.flow_model.DP(start = Press3_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Press3_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Press3_sensor.flow_model.DH(start = Press3_sensor.flow_model.h_out_0-
    Press3_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Press3_sensor.flow_model.DT(start = Press3_sensor.flow_model.T_out_0-
    Press3_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Press3_sensor.flow_model.C_in.Q(start = Press3_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.C_in.P
    (start = Press3_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Press3_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Press3_sensor.flow_model.C_out.Q(start =  -Press3_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.C_out.P
    (start = Press3_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.flow_model.C_out.h_outflow
    (start = Press3_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Press3_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Press3_sensor.flow_model.h
    (start = Press3_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Press3_sensor.flow_model.P(
    start = Press3_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Press3_sensor.flow_model.T
    (start = Press3_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  Real Press3_sensor.P_barG(start = Press3_sensor.P_0*1E-05-1, nominal = 
    100000.0);
  Real Press3_sensor.P_psiG(start = Press3_sensor.P_0*0.000145038-14.50377377, 
    nominal = 14.5038);
  Real Press3_sensor.P_MPaG(start = Press3_sensor.P_0*1E-06-0.1, nominal = 
    0.09999999999999999);
  Real Press3_sensor.P_kPaG(start = Press3_sensor.P_0*0.001-100, nominal = 100.0);
  Real Press3_sensor.P_barA(start = Press3_sensor.P_0*1E-05, nominal = 1.0, 
    unit = "bar");
  Real Press3_sensor.P_psiA(start = Press3_sensor.P_0*0.000145038, nominal = 
    14.5038);
  Real Press3_sensor.P_MPaA(start = Press3_sensor.P_0*1E-06, nominal = 
    0.09999999999999999);
  Real Press3_sensor.P_kPaA(start = Press3_sensor.P_0*0.001, nominal = 100.0);
  Real Press3_sensor.P_inHg(start = Press3_sensor.P_0*0.0002953006, nominal = 
    29.530060000000002);
  Real Press3_sensor.P_mbar(start = Press3_sensor.P_0*0.01, nominal = 1000.0, 
    unit = "mbar");
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate CEC809_sensor.Q
    (start = CEC809_sensor.Q_0, nominal = 100.0) "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC809_sensor.Xi[0] 
    "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.P(start = 
    CEC809_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.h(
    start = CEC809_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase CEC809_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC809_sensor.state.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC809_sensor.state.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC809_sensor.state.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC809_sensor.state.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate CEC809_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.C_in.Q(start = CEC809_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.C_in.P(
    start = CEC809_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC809_sensor.C_out.Q(start =  -CEC809_sensor.Q_0, nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.C_out.P(
    start = CEC809_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.h_in
    (start = CEC809_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.h_out
    (start = CEC809_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.flow_model.Q(start = CEC809_sensor.flow_model.Q_0) 
    "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_in
    (start = CEC809_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P_out
    (start = CEC809_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction CEC809_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho_in
    (start = CEC809_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho_out
    (start = CEC809_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density CEC809_sensor.flow_model.rho
    (start = CEC809_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC809_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    CEC809_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    CEC809_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.flow_model.T_in
    (start = CEC809_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.flow_model.T_out
    (start = CEC809_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase CEC809_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC809_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC809_sensor.flow_model.state_in.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC809_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC809_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase CEC809_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy CEC809_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density CEC809_sensor.flow_model.state_out.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature CEC809_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure CEC809_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    CEC809_sensor.flow_model.DP(start = CEC809_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power CEC809_sensor.flow_model.W(
    start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    CEC809_sensor.flow_model.DH(start = CEC809_sensor.flow_model.h_out_0-
    CEC809_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    CEC809_sensor.flow_model.DT(start = CEC809_sensor.flow_model.T_out_0-
    CEC809_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    CEC809_sensor.flow_model.C_in.Q(start = CEC809_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.C_in.P
    (start = CEC809_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    CEC809_sensor.flow_model.C_out.Q(start =  -CEC809_sensor.flow_model.Q_0, 
    nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.C_out.P
    (start = CEC809_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.C_out.h_outflow
    (start = CEC809_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction CEC809_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy CEC809_sensor.flow_model.h
    (start = CEC809_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure CEC809_sensor.flow_model.P(
    start = CEC809_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.flow_model.T
    (start = CEC809_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature CEC809_sensor.T(start = 
    CEC809_sensor.T_0);
  Real CEC809_sensor.T_degC(start = CEC809_sensor.T_0+273.15, nominal = 573.15, 
    unit = "degC");
  Real CEC809_sensor.T_degF(start = (CEC809_sensor.T_0+273.15)*1.8+32, 
    nominal = 1063.67, unit = "degF");
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h_in(
    start = V421_valve.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h_out(
    start = V421_valve.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate V421_valve.Q(
    start = V421_valve.Q_0) "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_in(start = 
    V421_valve.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.P_out(start = 
    V421_valve.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction V421_valve.Xi[0] 
    "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_in(start = 
    V421_valve.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho_out(start = 
    V421_valve.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density V421_valve.rho(start = 
    V421_valve.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    V421_valve.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    V421_valve.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate V421_valve.Qv
     "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_in(start = 
    V421_valve.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature V421_valve.T_out(
    start = V421_valve.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase V421_valve.state_in.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V421_valve.state_in.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V421_valve.state_in.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V421_valve.state_in.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V421_valve.state_in.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase V421_valve.state_out.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy V421_valve.state_out.h(
    start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density V421_valve.state_out.d(start = 150, 
    nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature V421_valve.state_out.T(start = 500,
     nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure V421_valve.state_out.p(
    start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure V421_valve.DP(
    start = V421_valve.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power V421_valve.W(start = 0, 
    nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy V421_valve.DH(
    start = V421_valve.h_out_0-V421_valve.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    V421_valve.DT(start = V421_valve.T_out_0-V421_valve.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    V421_valve.C_in.Q(start = V421_valve.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.C_in.P(start = 
    V421_valve.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction V421_valve.C_in.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    V421_valve.C_out.Q(start =  -V421_valve.Q_0, nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure V421_valve.C_out.P(start = 
    V421_valve.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.C_out.h_outflow
    (start = V421_valve.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction V421_valve.C_out.Xi_outflow[0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy V421_valve.h(
    start = V421_valve.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputCv V421_valve.Cv_max(
    start = 10000.0) "Maximum CV";
  MetroscopeModelingLibrary.Utilities.Units.Cv V421_valve.Cv(start = 10000.0) 
    "Cv";
  Modelica.Blocks.Interfaces.RealInput V421_valve.Opening(nominal = 0.5, unit = 
    "1", min = 0.0, max = 1.0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.Q(start = Q_recirculation_sensor.Q_0, nominal = 100.0)
     "Component mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_recirculation_sensor.Xi
    [0] "Component mass fractions";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.P(
    start = Q_recirculation_sensor.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.h
    (start = Q_recirculation_sensor.h_0) "Enthalpy of the fluid into the component";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.state.phase 
    "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.state.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.state.d(
    start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.state.T(
    start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.state.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFlowRate Q_recirculation_sensor.mass_flow_rate_bias
    (start = 0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.C_in.Q(start = Q_recirculation_sensor.Q_0, nominal = 
    100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.C_in.P
    (start = Q_recirculation_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.C_in.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_recirculation_sensor.C_out.Q(start =  -Q_recirculation_sensor.Q_0, 
    nominal = 100.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.C_out.P
    (start = Q_recirculation_sensor.P_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.C_out.h_outflow
    (start = 100000.0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h_in
    (start = Q_recirculation_sensor.flow_model.h_in_0) "Inlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h_out
    (start = Q_recirculation_sensor.flow_model.h_out_0) "Outlet specific enthalpy";
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.Q(start = Q_recirculation_sensor.flow_model.Q_0)
     "Inlet Mass flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_in
    (start = Q_recirculation_sensor.flow_model.P_in_0) "Inlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P_out
    (start = Q_recirculation_sensor.flow_model.P_out_0) "Outlet Pressure";
  MetroscopeModelingLibrary.Utilities.Units.MassFraction Q_recirculation_sensor.flow_model.Xi
    [0] "Species mass fraction";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_in
    (start = Q_recirculation_sensor.flow_model.rho_0) "Inlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho_out
    (start = Q_recirculation_sensor.flow_model.rho_0) "Outlet density";
  MetroscopeModelingLibrary.Utilities.Units.Density Q_recirculation_sensor.flow_model.rho
    (start = Q_recirculation_sensor.flow_model.rho_0) "Mean density";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv_in "Inlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.NegativeVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv_out "Outlet volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.PositiveVolumeFlowRate 
    Q_recirculation_sensor.flow_model.Qv "Mean volumetric flow rate";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T_in
    (start = Q_recirculation_sensor.flow_model.T_in_0) "Fluid temperature";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T_out
    (start = Q_recirculation_sensor.flow_model.T_out_0) "Fluid temperature";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.flow_model.state_in.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.flow_model.state_in.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.flow_model.state_in.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.flow_model.state_in.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.flow_model.state_in.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  Modelica.Media.Interfaces.Types.FixedPhase Q_recirculation_sensor.flow_model.state_out.phase
     "Phase of the fluid: 1 for 1-phase, 2 for two-phase, 0 for not known, e.g., interactive use";
  Modelica.Media.Interfaces.Types.SpecificEnthalpy Q_recirculation_sensor.flow_model.state_out.h
    (start = 100000.0, nominal = 500000.0) "Specific enthalpy";
  Modelica.Media.Interfaces.Types.Density Q_recirculation_sensor.flow_model.state_out.d
    (start = 150, nominal = 500.0) "Density";
  Modelica.Media.Interfaces.Types.Temperature Q_recirculation_sensor.flow_model.state_out.T
    (start = 500, nominal = 500.0, min = 273.15, max = 2273.15) "Temperature";
  Modelica.Media.Interfaces.Types.AbsolutePressure Q_recirculation_sensor.flow_model.state_out.p
    (start = 5000000.0, nominal = 1000000.0, min = 611.657) "Pressure";
  MetroscopeModelingLibrary.Utilities.Units.DifferentialPressure 
    Q_recirculation_sensor.flow_model.DP(start = Q_recirculation_sensor.flow_model.DP_0);
  MetroscopeModelingLibrary.Utilities.Units.Power Q_recirculation_sensor.flow_model.W
    (start = 0, nominal = 1000000.0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialEnthalpy 
    Q_recirculation_sensor.flow_model.DH(start = Q_recirculation_sensor.flow_model.h_out_0
    -Q_recirculation_sensor.flow_model.h_in_0);
  MetroscopeModelingLibrary.Utilities.Units.DifferentialTemperature 
    Q_recirculation_sensor.flow_model.DT(start = Q_recirculation_sensor.flow_model.T_out_0
    -Q_recirculation_sensor.flow_model.T_in_0);
  MetroscopeModelingLibrary.Utilities.Units.PositiveMassFlowRate 
    Q_recirculation_sensor.flow_model.C_in.Q(start = Q_recirculation_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.C_in.P
    (start = Q_recirculation_sensor.flow_model.P_in_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.C_in.h_outflow
    (start = 0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.flow_model.C_in.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.NegativeMassFlowRate 
    Q_recirculation_sensor.flow_model.C_out.Q(start =  -Q_recirculation_sensor.flow_model.Q_0,
     nominal = 500.0);
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.C_out.P
    (start = Q_recirculation_sensor.flow_model.P_out_0);
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.C_out.h_outflow
    (start = Q_recirculation_sensor.flow_model.h_out_0);
  Modelica.Media.Interfaces.Types.MassFraction Q_recirculation_sensor.flow_model.C_out.Xi_outflow
    [0];
  MetroscopeModelingLibrary.Utilities.Units.SpecificEnthalpy Q_recirculation_sensor.flow_model.h
    (start = Q_recirculation_sensor.flow_model.h_0) "Enthalpy of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Pressure Q_recirculation_sensor.flow_model.P
    (start = Q_recirculation_sensor.flow_model.P_0) "Pressure of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.Temperature Q_recirculation_sensor.flow_model.T
    (start = Q_recirculation_sensor.flow_model.T_0) "Temperature of the fluid into the component";
  MetroscopeModelingLibrary.Utilities.Units.VolumeFlowRate Q_recirculation_sensor.Qv
    (start = Q_recirculation_sensor.Qv_0);
  Real Q_recirculation_sensor.Q_lm(start = Q_recirculation_sensor.Qv_0*60000, 
    nominal = 6000.0);
  Real Q_recirculation_sensor.Q_th(start = Q_recirculation_sensor.Q_0*3.6, 
    nominal = 360.0);
  Real Q_recirculation_sensor.Q_lbs(start = Q_recirculation_sensor.Q_0*
    0.453592428, nominal = 45.3592428);
  Real Q_recirculation_sensor.Q_Mlbh(start = Q_recirculation_sensor.Q_0*
    0.0079366414387, nominal = 0.79366414387);
  MetroscopeModelingLibrary.Utilities.Units.Inputs.InputPercentage 
    CEC191_sensor.Opening_pc(start = CEC191_sensor.Opening_pc_0, nominal = 15.0,
     unit = "1");
  Modelica.Blocks.Interfaces.RealOutput CEC191_sensor.Opening(start = 
    CEC191_sensor.Opening_pc_0/100, nominal = 0.15, unit = "1", min = 0.0, 
    max = 1.0);

// Equations and algorithms

  // Component hot_sink
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      hot_sink.C_in.P = hot_sink.P_in;
      hot_sink.C_in.Q = hot_sink.Q_in;
      inStream(hot_sink.C_in.h_outflow) = hot_sink.h_in;
      inStream(hot_sink.C_in.Xi_outflow) = hot_sink.Xi_in;
      hot_sink.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (hot_sink.P_in, hot_sink.h_in, hot_sink.Xi_in, 0, 0);
      hot_sink.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        hot_sink.state_in);
      hot_sink.Qv_in = hot_sink.Q_in/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        hot_sink.state_in);
      hot_sink.C_in.h_outflow = 0;
      hot_sink.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component CoolingTower.water_inlet_flow
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.water_inlet_flow.h_in = inStream(CoolingTower.water_inlet_flow.C_in.h_outflow);
      CoolingTower.water_inlet_flow.h_out = CoolingTower.water_inlet_flow.C_out.h_outflow;
      CoolingTower.water_inlet_flow.Q = CoolingTower.water_inlet_flow.C_in.Q;
      CoolingTower.water_inlet_flow.P_in = CoolingTower.water_inlet_flow.C_in.P;
      CoolingTower.water_inlet_flow.P_out = CoolingTower.water_inlet_flow.C_out.P;
      CoolingTower.water_inlet_flow.Xi = inStream(CoolingTower.water_inlet_flow.C_in.Xi_outflow);
      CoolingTower.water_inlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.water_inlet_flow.C_in.Xi_outflow = zeros(0);
      CoolingTower.water_inlet_flow.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet_flow.P_in, CoolingTower.water_inlet_flow.h_in,
         CoolingTower.water_inlet_flow.Xi, 0, 0);
      CoolingTower.water_inlet_flow.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet_flow.P_out, CoolingTower.water_inlet_flow.h_out,
         CoolingTower.water_inlet_flow.Xi, 0, 0);
      CoolingTower.water_inlet_flow.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet_flow.state_in);
      CoolingTower.water_inlet_flow.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet_flow.state_out);
      CoolingTower.water_inlet_flow.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_inlet_flow.state_in);
      CoolingTower.water_inlet_flow.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_inlet_flow.state_out);
      CoolingTower.water_inlet_flow.rho = (CoolingTower.water_inlet_flow.rho_in+
        CoolingTower.water_inlet_flow.rho_out)/2;
      CoolingTower.water_inlet_flow.Qv_in = CoolingTower.water_inlet_flow.Q/
        CoolingTower.water_inlet_flow.rho_in;
      CoolingTower.water_inlet_flow.Qv_out =  -CoolingTower.water_inlet_flow.Q/
        CoolingTower.water_inlet_flow.rho_out;
      CoolingTower.water_inlet_flow.Qv = (CoolingTower.water_inlet_flow.Qv_in-
        CoolingTower.water_inlet_flow.Qv_out)/2;
      CoolingTower.water_inlet_flow.P_out-CoolingTower.water_inlet_flow.P_in = 
        CoolingTower.water_inlet_flow.DP;
      CoolingTower.water_inlet_flow.Q*(CoolingTower.water_inlet_flow.h_out-
        CoolingTower.water_inlet_flow.h_in) = CoolingTower.water_inlet_flow.W;
      CoolingTower.water_inlet_flow.h_out-CoolingTower.water_inlet_flow.h_in = 
        CoolingTower.water_inlet_flow.DH;
      CoolingTower.water_inlet_flow.T_out-CoolingTower.water_inlet_flow.T_in = 
        CoolingTower.water_inlet_flow.DT;
      CoolingTower.water_inlet_flow.C_in.Q+CoolingTower.water_inlet_flow.C_out.Q
         = 0;
      CoolingTower.water_inlet_flow.C_out.Xi_outflow = inStream(CoolingTower.water_inlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.water_inlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      CoolingTower.water_inlet_flow.h = CoolingTower.water_inlet_flow.h_in;
      CoolingTower.water_inlet_flow.DH = 0;
    // end of extends 
  equation
    CoolingTower.water_inlet_flow.DP = CoolingTower.water_inlet_flow.DP_input;

  // Component CoolingTower.water_outlet_flow
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.water_outlet_flow.h_in = inStream(CoolingTower.water_outlet_flow.C_in.h_outflow);
      CoolingTower.water_outlet_flow.h_out = CoolingTower.water_outlet_flow.C_out.h_outflow;
      CoolingTower.water_outlet_flow.Q = CoolingTower.water_outlet_flow.C_in.Q;
      CoolingTower.water_outlet_flow.P_in = CoolingTower.water_outlet_flow.C_in.P;
      CoolingTower.water_outlet_flow.P_out = CoolingTower.water_outlet_flow.C_out.P;
      CoolingTower.water_outlet_flow.Xi = inStream(CoolingTower.water_outlet_flow.C_in.Xi_outflow);
      CoolingTower.water_outlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.water_outlet_flow.C_in.Xi_outflow = zeros(0);
      CoolingTower.water_outlet_flow.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet_flow.P_in, CoolingTower.water_outlet_flow.h_in,
         CoolingTower.water_outlet_flow.Xi, 0, 0);
      CoolingTower.water_outlet_flow.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet_flow.P_out, CoolingTower.water_outlet_flow.h_out,
         CoolingTower.water_outlet_flow.Xi, 0, 0);
      CoolingTower.water_outlet_flow.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet_flow.state_in);
      CoolingTower.water_outlet_flow.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet_flow.state_out);
      CoolingTower.water_outlet_flow.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_outlet_flow.state_in);
      CoolingTower.water_outlet_flow.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CoolingTower.water_outlet_flow.state_out);
      CoolingTower.water_outlet_flow.rho = (CoolingTower.water_outlet_flow.rho_in
        +CoolingTower.water_outlet_flow.rho_out)/2;
      CoolingTower.water_outlet_flow.Qv_in = CoolingTower.water_outlet_flow.Q/
        CoolingTower.water_outlet_flow.rho_in;
      CoolingTower.water_outlet_flow.Qv_out =  -CoolingTower.water_outlet_flow.Q
        /CoolingTower.water_outlet_flow.rho_out;
      CoolingTower.water_outlet_flow.Qv = (CoolingTower.water_outlet_flow.Qv_in-
        CoolingTower.water_outlet_flow.Qv_out)/2;
      CoolingTower.water_outlet_flow.P_out-CoolingTower.water_outlet_flow.P_in
         = CoolingTower.water_outlet_flow.DP;
      CoolingTower.water_outlet_flow.Q*(CoolingTower.water_outlet_flow.h_out-
        CoolingTower.water_outlet_flow.h_in) = CoolingTower.water_outlet_flow.W;
      CoolingTower.water_outlet_flow.h_out-CoolingTower.water_outlet_flow.h_in
         = CoolingTower.water_outlet_flow.DH;
      CoolingTower.water_outlet_flow.T_out-CoolingTower.water_outlet_flow.T_in
         = CoolingTower.water_outlet_flow.DT;
      CoolingTower.water_outlet_flow.C_in.Q+CoolingTower.water_outlet_flow.C_out.Q
         = 0;
      CoolingTower.water_outlet_flow.C_out.Xi_outflow = inStream(
        CoolingTower.water_outlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.water_outlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.water_outlet_flow.P = CoolingTower.water_outlet_flow.P_in;
      CoolingTower.water_outlet_flow.h = CoolingTower.water_outlet_flow.h_in;
      CoolingTower.water_outlet_flow.T = CoolingTower.water_outlet_flow.T_in;
      CoolingTower.water_outlet_flow.DP = 0;
      CoolingTower.water_outlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower.water_outlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.water_outlet.C_out.P = CoolingTower.water_outlet.P_out;
      CoolingTower.water_outlet.C_out.Q = CoolingTower.water_outlet.Q_out;
      CoolingTower.water_outlet.C_out.h_outflow = CoolingTower.water_outlet.h_out;
      CoolingTower.water_outlet.C_out.Xi_outflow = CoolingTower.water_outlet.Xi_out;
      CoolingTower.water_outlet.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_outlet.P_out, CoolingTower.water_outlet.h_out, 
        CoolingTower.water_outlet.Xi_out, 0, 0);
      CoolingTower.water_outlet.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_outlet.state_out);
      CoolingTower.water_outlet.Qv_out = CoolingTower.water_outlet.Q_out/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.water_outlet.state_out);
    // end of extends 

  // Component CoolingTower.water_inlet
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.water_inlet.C_in.P = CoolingTower.water_inlet.P_in;
      CoolingTower.water_inlet.C_in.Q = CoolingTower.water_inlet.Q_in;
      inStream(CoolingTower.water_inlet.C_in.h_outflow) = CoolingTower.water_inlet.h_in;
      inStream(CoolingTower.water_inlet.C_in.Xi_outflow) = CoolingTower.water_inlet.Xi_in;
      CoolingTower.water_inlet.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CoolingTower.water_inlet.P_in, CoolingTower.water_inlet.h_in, 
        CoolingTower.water_inlet.Xi_in, 0, 0);
      CoolingTower.water_inlet.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CoolingTower.water_inlet.state_in);
      CoolingTower.water_inlet.Qv_in = CoolingTower.water_inlet.Q_in/
        Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        CoolingTower.water_inlet.state_in);
      CoolingTower.water_inlet.C_in.h_outflow = 0;
      CoolingTower.water_inlet.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component CoolingTower.air_inlet_flow
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.air_inlet_flow.h_in = inStream(CoolingTower.air_inlet_flow.C_in.h_outflow);
      CoolingTower.air_inlet_flow.h_out = CoolingTower.air_inlet_flow.C_out.h_outflow;
      CoolingTower.air_inlet_flow.Q = CoolingTower.air_inlet_flow.C_in.Q;
      CoolingTower.air_inlet_flow.P_in = CoolingTower.air_inlet_flow.C_in.P;
      CoolingTower.air_inlet_flow.P_out = CoolingTower.air_inlet_flow.C_out.P;
      CoolingTower.air_inlet_flow.Xi = inStream(CoolingTower.air_inlet_flow.C_in.Xi_outflow);
      CoolingTower.air_inlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.air_inlet_flow.C_in.Xi_outflow = zeros(1);
      CoolingTower.air_inlet_flow.state_in = setState_phX_Unique7(
        CoolingTower.air_inlet_flow.P_in, CoolingTower.air_inlet_flow.h_in, 
        CoolingTower.air_inlet_flow.Xi);
      CoolingTower.air_inlet_flow.state_out = setState_phX_Unique7(
        CoolingTower.air_inlet_flow.P_out, CoolingTower.air_inlet_flow.h_out, 
        CoolingTower.air_inlet_flow.Xi);
      CoolingTower.air_inlet_flow.T_in = temperature_Unique25(
        CoolingTower.air_inlet_flow.state_in);
      CoolingTower.air_inlet_flow.T_out = temperature_Unique25(
        CoolingTower.air_inlet_flow.state_out);
      CoolingTower.air_inlet_flow.rho_in = density_Unique26(
        CoolingTower.air_inlet_flow.state_in);
      CoolingTower.air_inlet_flow.rho_out = density_Unique26(
        CoolingTower.air_inlet_flow.state_out);
      CoolingTower.air_inlet_flow.rho = (CoolingTower.air_inlet_flow.rho_in+
        CoolingTower.air_inlet_flow.rho_out)/2;
      CoolingTower.air_inlet_flow.Qv_in = CoolingTower.air_inlet_flow.Q/
        CoolingTower.air_inlet_flow.rho_in;
      CoolingTower.air_inlet_flow.Qv_out =  -CoolingTower.air_inlet_flow.Q/
        CoolingTower.air_inlet_flow.rho_out;
      CoolingTower.air_inlet_flow.Qv = (CoolingTower.air_inlet_flow.Qv_in-
        CoolingTower.air_inlet_flow.Qv_out)/2;
      CoolingTower.air_inlet_flow.P_out-CoolingTower.air_inlet_flow.P_in = 
        CoolingTower.air_inlet_flow.DP;
      CoolingTower.air_inlet_flow.Q*(CoolingTower.air_inlet_flow.h_out-
        CoolingTower.air_inlet_flow.h_in) = CoolingTower.air_inlet_flow.W;
      CoolingTower.air_inlet_flow.h_out-CoolingTower.air_inlet_flow.h_in = 
        CoolingTower.air_inlet_flow.DH;
      CoolingTower.air_inlet_flow.T_out-CoolingTower.air_inlet_flow.T_in = 
        CoolingTower.air_inlet_flow.DT;
      CoolingTower.air_inlet_flow.C_in.Q+CoolingTower.air_inlet_flow.C_out.Q = 0;
      CoolingTower.air_inlet_flow.C_out.Xi_outflow = inStream(CoolingTower.air_inlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.air_inlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.air_inlet_flow.P = CoolingTower.air_inlet_flow.P_in;
      CoolingTower.air_inlet_flow.h = CoolingTower.air_inlet_flow.h_in;
      CoolingTower.air_inlet_flow.T = CoolingTower.air_inlet_flow.T_in;
      CoolingTower.air_inlet_flow.DP = 0;
      CoolingTower.air_inlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower.air_inlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      CoolingTower.air_inlet.C_in.P = CoolingTower.air_inlet.P_in;
      CoolingTower.air_inlet.C_in.Q = CoolingTower.air_inlet.Q_in;
      inStream(CoolingTower.air_inlet.C_in.h_outflow) = CoolingTower.air_inlet.h_in;
      inStream(CoolingTower.air_inlet.C_in.Xi_outflow) = CoolingTower.air_inlet.Xi_in;
      CoolingTower.air_inlet.state_in = setState_phX_Unique7(CoolingTower.air_inlet.P_in,
         CoolingTower.air_inlet.h_in, CoolingTower.air_inlet.Xi_in);
      CoolingTower.air_inlet.T_in = temperature_Unique25(
        CoolingTower.air_inlet.state_in);
      CoolingTower.air_inlet.Qv_in = CoolingTower.air_inlet.Q_in/
        density_Unique26(
        CoolingTower.air_inlet.state_in);
      CoolingTower.air_inlet.C_in.h_outflow = 0;
      CoolingTower.air_inlet.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    CoolingTower.air_inlet.Xi_in[1] = massFraction_pTphi_Unique28(
      CoolingTower.air_inlet.P_in, CoolingTower.air_inlet.T_in, CoolingTower.air_inlet.relative_humidity);

  // Component CoolingTower.air_outlet
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      CoolingTower.air_outlet.C_out.P = CoolingTower.air_outlet.P_out;
      CoolingTower.air_outlet.C_out.Q = CoolingTower.air_outlet.Q_out;
      CoolingTower.air_outlet.C_out.h_outflow = CoolingTower.air_outlet.h_out;
      CoolingTower.air_outlet.C_out.Xi_outflow = CoolingTower.air_outlet.Xi_out;
      CoolingTower.air_outlet.state_out = setState_phX_Unique7(CoolingTower.air_outlet.P_out,
         CoolingTower.air_outlet.h_out, CoolingTower.air_outlet.Xi_out);
      CoolingTower.air_outlet.T_out = temperature_Unique25(
        CoolingTower.air_outlet.state_out);
      CoolingTower.air_outlet.Qv_out = CoolingTower.air_outlet.Q_out/
        density_Unique26(
        CoolingTower.air_outlet.state_out);
    // end of extends 
  equation
    CoolingTower.air_outlet.Xi_out[1] = massFraction_pTphi_Unique28(
      CoolingTower.air_outlet.P_out, CoolingTower.air_outlet.T_out, 
      CoolingTower.air_outlet.relative_humidity);

  // Component CoolingTower.air_outlet_flow
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CoolingTower.air_outlet_flow.h_in = inStream(CoolingTower.air_outlet_flow.C_in.h_outflow);
      CoolingTower.air_outlet_flow.h_out = CoolingTower.air_outlet_flow.C_out.h_outflow;
      CoolingTower.air_outlet_flow.Q = CoolingTower.air_outlet_flow.C_in.Q;
      CoolingTower.air_outlet_flow.P_in = CoolingTower.air_outlet_flow.C_in.P;
      CoolingTower.air_outlet_flow.P_out = CoolingTower.air_outlet_flow.C_out.P;
      CoolingTower.air_outlet_flow.Xi = inStream(CoolingTower.air_outlet_flow.C_in.Xi_outflow);
      CoolingTower.air_outlet_flow.C_in.h_outflow = 1000000.0;
      CoolingTower.air_outlet_flow.C_in.Xi_outflow = zeros(1);
      CoolingTower.air_outlet_flow.state_in = setState_phX_Unique7(
        CoolingTower.air_outlet_flow.P_in, CoolingTower.air_outlet_flow.h_in, 
        CoolingTower.air_outlet_flow.Xi);
      CoolingTower.air_outlet_flow.state_out = setState_phX_Unique7(
        CoolingTower.air_outlet_flow.P_out, CoolingTower.air_outlet_flow.h_out, 
        CoolingTower.air_outlet_flow.Xi);
      CoolingTower.air_outlet_flow.T_in = temperature_Unique25(
        CoolingTower.air_outlet_flow.state_in);
      CoolingTower.air_outlet_flow.T_out = temperature_Unique25(
        CoolingTower.air_outlet_flow.state_out);
      CoolingTower.air_outlet_flow.rho_in = density_Unique26(
        CoolingTower.air_outlet_flow.state_in);
      CoolingTower.air_outlet_flow.rho_out = density_Unique26(
        CoolingTower.air_outlet_flow.state_out);
      CoolingTower.air_outlet_flow.rho = (CoolingTower.air_outlet_flow.rho_in+
        CoolingTower.air_outlet_flow.rho_out)/2;
      CoolingTower.air_outlet_flow.Qv_in = CoolingTower.air_outlet_flow.Q/
        CoolingTower.air_outlet_flow.rho_in;
      CoolingTower.air_outlet_flow.Qv_out =  -CoolingTower.air_outlet_flow.Q/
        CoolingTower.air_outlet_flow.rho_out;
      CoolingTower.air_outlet_flow.Qv = (CoolingTower.air_outlet_flow.Qv_in-
        CoolingTower.air_outlet_flow.Qv_out)/2;
      CoolingTower.air_outlet_flow.P_out-CoolingTower.air_outlet_flow.P_in = 
        CoolingTower.air_outlet_flow.DP;
      CoolingTower.air_outlet_flow.Q*(CoolingTower.air_outlet_flow.h_out-
        CoolingTower.air_outlet_flow.h_in) = CoolingTower.air_outlet_flow.W;
      CoolingTower.air_outlet_flow.h_out-CoolingTower.air_outlet_flow.h_in = 
        CoolingTower.air_outlet_flow.DH;
      CoolingTower.air_outlet_flow.T_out-CoolingTower.air_outlet_flow.T_in = 
        CoolingTower.air_outlet_flow.DT;
      CoolingTower.air_outlet_flow.C_in.Q+CoolingTower.air_outlet_flow.C_out.Q
         = 0;
      CoolingTower.air_outlet_flow.C_out.Xi_outflow = inStream(CoolingTower.air_outlet_flow.C_in.Xi_outflow);
      assert(CoolingTower.air_outlet_flow.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CoolingTower.air_outlet_flow.P = CoolingTower.air_outlet_flow.P_in;
      CoolingTower.air_outlet_flow.h = CoolingTower.air_outlet_flow.h_in;
      CoolingTower.air_outlet_flow.T = CoolingTower.air_outlet_flow.T_in;
      CoolingTower.air_outlet_flow.DP = 0;
      CoolingTower.air_outlet_flow.DH = 0;
    // end of extends 

  // Component CoolingTower
  // class MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe
  equation
    CoolingTower.air_inlet_flow.P_out = CoolingTower.Pin[1];
    CoolingTower.air_inlet_flow.Q = CoolingTower.Q_cold_in;
    CoolingTower.air_inlet_flow.h = CoolingTower.i_initial;
    CoolingTower.air_inlet.T_in = CoolingTower.T_cold_in;
    CoolingTower.w_in = CoolingTower.air_inlet.Xi_in[1];
    CoolingTower.air_outlet_flow.P_in = CoolingTower.Pin[CoolingTower.N_step];
    CoolingTower.air_outlet_flow.Q = CoolingTower.Q_cold_out;
    CoolingTower.air_outlet_flow.h = CoolingTower.i_final;
    CoolingTower.air_outlet.T_out = CoolingTower.T_cold_out;
    CoolingTower.w_out = CoolingTower.air_outlet.Xi_out[1];
    CoolingTower.water_inlet_flow.P_out = CoolingTower.Pin[CoolingTower.N_step];
    CoolingTower.water_inlet_flow.Q = CoolingTower.Q_hot_in;
    CoolingTower.water_inlet_flow.T_in = CoolingTower.T_hot_in;
    CoolingTower.water_outlet_flow.P_out = CoolingTower.Pin[1];
    CoolingTower.water_outlet_flow.Q = CoolingTower.Q_hot_out;
    CoolingTower.water_outlet_flow.T_in = CoolingTower.T_hot_out;
    CoolingTower.W_max = CoolingTower.Qw[10]*CoolingTower.cp[1]*(CoolingTower.Tw
      [CoolingTower.N_step]-CoolingTower.Tw[1]);
    CoolingTower.W_min = CoolingTower.Qw[1]*CoolingTower.cp[1]*(CoolingTower.Tw[
      CoolingTower.N_step]-CoolingTower.Tw[1]);
    CoolingTower.deltaTw = (CoolingTower.Tw[CoolingTower.N_step]-CoolingTower.Tw
      [1])/(CoolingTower.N_step-1);
    for n in (1:CoolingTower.N_step) loop
      CoolingTower.Tw[n] = CoolingTower.T_hot_out+(CoolingTower.T_hot_in-
        CoolingTower.T_hot_out)*(n-1)/(CoolingTower.N_step-1);
      CoolingTower.Ta[n] = T_phX_Unique37(CoolingTower.Pin[n], CoolingTower.i[n],
         {CoolingTower.w[n]});
      CoolingTower.w_sat[n] = xsaturation_pT_Unique45(CoolingTower.Pin[n], 
        CoolingTower.Ta[n]);
    end for;
    for n in (1:CoolingTower.N_step-1) loop
      if (CoolingTower.w[n] < CoolingTower.w_sat[n]) then 
        CoolingTower.w[n+1] = CoolingTower.w[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.f
          (CoolingTower.Tw[n], CoolingTower.w[n], CoolingTower.i[n], 
          CoolingTower.cp[n], CoolingTower.Qw[n], CoolingTower.Qa[n], 
          CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.i[n+1] = CoolingTower.i[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.g
          (CoolingTower.Tw[n], CoolingTower.w[n], CoolingTower.i[n], 
          CoolingTower.cp[n], CoolingTower.Qw[n], CoolingTower.Qa[n], 
          CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.M[n+1] = CoolingTower.M[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.h
          (CoolingTower.Tw[n+1], CoolingTower.w[n+1], CoolingTower.i[n+1], 
          CoolingTower.cp[n+1], CoolingTower.Pin[n+1], CoolingTower.Lef[n+1]);
        CoolingTower.Qw[n+1] = CoolingTower.Qw[n]+CoolingTower.Qa[n]*(
          CoolingTower.w[n+1]-CoolingTower.w[n]);
        CoolingTower.Qa[n+1] = CoolingTower.Qa[n]*(1+CoolingTower.w[n+1]-
          CoolingTower.w[n]);
        CoolingTower.Lef[n+1] = CoolingTower.Lef[n];
        CoolingTower.cp[n+1] = CoolingTower.cp[n];
        CoolingTower.Pin[n+1] = CoolingTower.Pin[n];
      else
        CoolingTower.w[n+1] = CoolingTower.w[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.j
          (CoolingTower.Tw[n], CoolingTower.Ta[n], CoolingTower.w[n], 
          CoolingTower.i[n], CoolingTower.cp[n], CoolingTower.Qw[n], 
          CoolingTower.Qa[n], CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.i[n+1] = CoolingTower.i[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.k
          (CoolingTower.Tw[n], CoolingTower.Ta[n], CoolingTower.w[n], 
          CoolingTower.i[n], CoolingTower.cp[n], CoolingTower.Qw[n], 
          CoolingTower.Qa[n], CoolingTower.Pin[n], CoolingTower.Lef[n]);
        CoolingTower.M[n+1] = CoolingTower.M[n]+CoolingTower.deltaTw*
          MetroscopeModelingLibrary.MultiFluid.HeatExchangers.CoolingTowerPoppe.m
          (CoolingTower.Tw[n+1], CoolingTower.Ta[n+1], CoolingTower.w[n+1], 
          CoolingTower.i[n+1], CoolingTower.cp[n+1], CoolingTower.Pin[n+1], 
          CoolingTower.Lef[n+1]);
        CoolingTower.Qw[n+1] = CoolingTower.Qw[n]+CoolingTower.Qa[n]*(
          CoolingTower.w[n+1]-CoolingTower.w[n]);
        CoolingTower.Qa[n+1] = CoolingTower.Qa[n]*(1+CoolingTower.w[n+1]-
          CoolingTower.w[n]);
        CoolingTower.Lef[n+1] = CoolingTower.Lef[n];
        CoolingTower.cp[n+1] = CoolingTower.cp[n];
        CoolingTower.Pin[n+1] = CoolingTower.Pin[n];
      end if;
    end for;
    CoolingTower.Me = CoolingTower.hd*CoolingTower.Afr/CoolingTower.Qw[1];
    CoolingTower.M[CoolingTower.N_step] = CoolingTower.Me;
    CoolingTower.M[1] = 0;
    CoolingTower.w[1] = CoolingTower.w_in;
    CoolingTower.w[CoolingTower.N_step] = CoolingTower.w_out;
    CoolingTower.i[1] = CoolingTower.i_initial;
    CoolingTower.i[CoolingTower.N_step] = CoolingTower.i_final;
    CoolingTower.Qw[1] = CoolingTower.Q_hot_out;
    CoolingTower.Qw[CoolingTower.N_step] = CoolingTower.Q_hot_in;
    CoolingTower.Qa[1] = CoolingTower.Q_cold_in;
    CoolingTower.Qa[CoolingTower.N_step] = CoolingTower.Q_cold_out;
    CoolingTower.Lef[1] = 0.9077990913*((xsaturation_pT_Unique45(
      CoolingTower.Pin[1], CoolingTower.T_cold_in)+0.622)/(CoolingTower.w[1]+
      0.622)-1)/log((xsaturation_pT_Unique45(CoolingTower.Pin[1], 
      CoolingTower.T_cold_in)+0.622)/(CoolingTower.w[1]+0.622));
    CoolingTower.cp[1] = Modelica.Media.Water.WaterIF97_ph.specificHeatCapacityCp_Unique46
      (
      CoolingTower.water_inlet_flow.state_in);
    CoolingTower.rho_air_inlet = CoolingTower.air_inlet_flow.rho_in;
    CoolingTower.rho_air_outlet = CoolingTower.air_outlet_flow.rho_out;
    0.25*(CoolingTower.rho_air_inlet+CoolingTower.rho_air_outlet)*
      CoolingTower.Cf*abs(CoolingTower.V_inlet)*CoolingTower.V_inlet = (
      CoolingTower.rho_air_inlet-CoolingTower.rho_air_outlet)*CoolingTower.gr*
      CoolingTower.Lfi;
    CoolingTower.Q_cold_in = CoolingTower.V_inlet*CoolingTower.Afr*
      CoolingTower.rho_air_inlet*(1-CoolingTower.air_inlet.Xi_in[1]);
    CoolingTower.air_inlet_flow.C_out.P = CoolingTower.air_inlet.C_in.P;
    CoolingTower.air_inlet.C_in.Q+CoolingTower.air_inlet_flow.C_out.Q = 0.0;
    CoolingTower.air_inlet_flow.C_in.P = CoolingTower.air_inlet_connector.P;
    CoolingTower.air_inlet_connector.Q-CoolingTower.air_inlet_flow.C_in.Q = 0.0;
    CoolingTower.air_outlet_flow.C_in.P = CoolingTower.air_outlet.C_out.P;
    CoolingTower.air_outlet.C_out.Q+CoolingTower.air_outlet_flow.C_in.Q = 0.0;
    CoolingTower.air_outlet_flow.C_out.P = CoolingTower.air_outlet_connector.P;
    CoolingTower.air_outlet_connector.Q-CoolingTower.air_outlet_flow.C_out.Q = 
      0.0;
    CoolingTower.water_inlet_flow.C_out.P = CoolingTower.water_inlet.C_in.P;
    CoolingTower.water_inlet.C_in.Q+CoolingTower.water_inlet_flow.C_out.Q = 0.0;
    CoolingTower.water_inlet_flow.C_in.P = CoolingTower.water_inlet_connector.P;
    CoolingTower.water_inlet_connector.Q-CoolingTower.water_inlet_flow.C_in.Q = 
      0.0;
    CoolingTower.water_outlet_flow.C_in.P = CoolingTower.water_outlet.C_out.P;
    CoolingTower.water_outlet.C_out.Q+CoolingTower.water_outlet_flow.C_in.Q = 
      0.0;
    CoolingTower.water_outlet_flow.C_out.P = CoolingTower.water_outlet_connector.P;
    CoolingTower.water_outlet_connector.Q-CoolingTower.water_outlet_flow.C_out.Q
       = 0.0;

  // Component cold_source
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      cold_source.C_out.P = cold_source.P_out;
      cold_source.C_out.Q = cold_source.Q_out;
      cold_source.C_out.h_outflow = cold_source.h_out;
      cold_source.C_out.Xi_outflow = cold_source.Xi_out;
      cold_source.state_out = setState_phX_Unique7(cold_source.P_out, 
        cold_source.h_out, cold_source.Xi_out);
      cold_source.T_out = temperature_Unique25(
        cold_source.state_out);
      cold_source.Qv_out = cold_source.Q_out/density_Unique26(
        cold_source.state_out);
    // end of extends 
  equation
    cold_source.Xi_out[1] = massFraction_pTphi_Unique28(cold_source.P_out, 
      cold_source.T_out, cold_source.relative_humidity);

  // Component cold_sink
  // class MetroscopeModelingLibrary.MoistAir.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      cold_sink.C_in.P = cold_sink.P_in;
      cold_sink.C_in.Q = cold_sink.Q_in;
      inStream(cold_sink.C_in.h_outflow) = cold_sink.h_in;
      inStream(cold_sink.C_in.Xi_outflow) = cold_sink.Xi_in;
      cold_sink.state_in = setState_phX_Unique7(cold_sink.P_in, cold_sink.h_in, 
        cold_sink.Xi_in);
      cold_sink.T_in = temperature_Unique25(
        cold_sink.state_in);
      cold_sink.Qv_in = cold_sink.Q_in/density_Unique26(
        cold_sink.state_in);
      cold_sink.C_in.h_outflow = 0;
      cold_sink.C_in.Xi_outflow = zeros(1);
    // end of extends 
  equation
    cold_sink.Xi_in[1] = massFraction_pTphi_Unique28(cold_sink.P_in, 
      cold_sink.T_in, cold_sink.relative_humidity);

  // Component waterInletPress_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      waterInletPress_sensor.flow_model.h_in = inStream(waterInletPress_sensor.flow_model.C_in.h_outflow);
      waterInletPress_sensor.flow_model.h_out = waterInletPress_sensor.flow_model.C_out.h_outflow;
      waterInletPress_sensor.flow_model.Q = waterInletPress_sensor.flow_model.C_in.Q;
      waterInletPress_sensor.flow_model.P_in = waterInletPress_sensor.flow_model.C_in.P;
      waterInletPress_sensor.flow_model.P_out = waterInletPress_sensor.flow_model.C_out.P;
      waterInletPress_sensor.flow_model.Xi = inStream(waterInletPress_sensor.flow_model.C_in.Xi_outflow);
      waterInletPress_sensor.flow_model.C_in.h_outflow = 1000000.0;
      waterInletPress_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      waterInletPress_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletPress_sensor.flow_model.P_in, waterInletPress_sensor.flow_model.h_in,
         waterInletPress_sensor.flow_model.Xi, 0, 0);
      waterInletPress_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletPress_sensor.flow_model.P_out, waterInletPress_sensor.flow_model.h_out,
         waterInletPress_sensor.flow_model.Xi, 0, 0);
      waterInletPress_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletPress_sensor.flow_model.state_in);
      waterInletPress_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletPress_sensor.flow_model.state_out);
      waterInletPress_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletPress_sensor.flow_model.state_in);
      waterInletPress_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletPress_sensor.flow_model.state_out);
      waterInletPress_sensor.flow_model.rho = (waterInletPress_sensor.flow_model.rho_in
        +waterInletPress_sensor.flow_model.rho_out)/2;
      waterInletPress_sensor.flow_model.Qv_in = waterInletPress_sensor.flow_model.Q
        /waterInletPress_sensor.flow_model.rho_in;
      waterInletPress_sensor.flow_model.Qv_out =  -waterInletPress_sensor.flow_model.Q
        /waterInletPress_sensor.flow_model.rho_out;
      waterInletPress_sensor.flow_model.Qv = (waterInletPress_sensor.flow_model.Qv_in
        -waterInletPress_sensor.flow_model.Qv_out)/2;
      waterInletPress_sensor.flow_model.P_out-waterInletPress_sensor.flow_model.P_in
         = waterInletPress_sensor.flow_model.DP;
      waterInletPress_sensor.flow_model.Q*(waterInletPress_sensor.flow_model.h_out
        -waterInletPress_sensor.flow_model.h_in) = waterInletPress_sensor.flow_model.W;
      waterInletPress_sensor.flow_model.h_out-waterInletPress_sensor.flow_model.h_in
         = waterInletPress_sensor.flow_model.DH;
      waterInletPress_sensor.flow_model.T_out-waterInletPress_sensor.flow_model.T_in
         = waterInletPress_sensor.flow_model.DT;
      waterInletPress_sensor.flow_model.C_in.Q+waterInletPress_sensor.flow_model.C_out.Q
         = 0;
      waterInletPress_sensor.flow_model.C_out.Xi_outflow = inStream(
        waterInletPress_sensor.flow_model.C_in.Xi_outflow);
      assert(waterInletPress_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      waterInletPress_sensor.flow_model.P = waterInletPress_sensor.flow_model.P_in;
      waterInletPress_sensor.flow_model.h = waterInletPress_sensor.flow_model.h_in;
      waterInletPress_sensor.flow_model.T = waterInletPress_sensor.flow_model.T_in;
      waterInletPress_sensor.flow_model.DP = 0;
      waterInletPress_sensor.flow_model.DH = 0;
    // end of extends 

  // Component waterInletPress_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not waterInletPress_sensor.faulty_flow_rate) then 
        waterInletPress_sensor.mass_flow_rate_bias = 0;
      end if;
      waterInletPress_sensor.P = waterInletPress_sensor.C_in.P;
      waterInletPress_sensor.Q = waterInletPress_sensor.C_in.Q+waterInletPress_sensor.mass_flow_rate_bias;
      waterInletPress_sensor.Xi = inStream(waterInletPress_sensor.C_in.Xi_outflow);
      waterInletPress_sensor.h = inStream(waterInletPress_sensor.C_in.h_outflow);
      waterInletPress_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletPress_sensor.P, waterInletPress_sensor.h, waterInletPress_sensor.Xi,
         0, 0);
      assert(waterInletPress_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      waterInletPress_sensor.P_barA = waterInletPress_sensor.P*1E-05;
      waterInletPress_sensor.P_psiA = waterInletPress_sensor.P*0.000145038;
      waterInletPress_sensor.P_MPaA = waterInletPress_sensor.P*1E-06;
      waterInletPress_sensor.P_kPaA = waterInletPress_sensor.P*0.001;
      waterInletPress_sensor.P_barG = waterInletPress_sensor.P_barA-1;
      waterInletPress_sensor.P_psiG = waterInletPress_sensor.P_psiA-14.50377377;
      waterInletPress_sensor.P_MPaG = waterInletPress_sensor.P_MPaA-0.1;
      waterInletPress_sensor.P_kPaG = waterInletPress_sensor.P_kPaA-100;
      waterInletPress_sensor.P_mbar = waterInletPress_sensor.P*0.01;
      waterInletPress_sensor.P_inHg = waterInletPress_sensor.P*0.0002953006;
    // end of extends 
  equation
    waterInletPress_sensor.flow_model.C_in.P = waterInletPress_sensor.C_in.P;
    waterInletPress_sensor.C_in.Q-waterInletPress_sensor.flow_model.C_in.Q = 0.0;
    waterInletPress_sensor.flow_model.C_out.P = waterInletPress_sensor.C_out.P;
    waterInletPress_sensor.C_out.Q-waterInletPress_sensor.flow_model.C_out.Q = 
      0.0;

  // Component AirInletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirInletTemp_sensor.flow_model.h_in = inStream(AirInletTemp_sensor.flow_model.C_in.h_outflow);
      AirInletTemp_sensor.flow_model.h_out = AirInletTemp_sensor.flow_model.C_out.h_outflow;
      AirInletTemp_sensor.flow_model.Q = AirInletTemp_sensor.flow_model.C_in.Q;
      AirInletTemp_sensor.flow_model.P_in = AirInletTemp_sensor.flow_model.C_in.P;
      AirInletTemp_sensor.flow_model.P_out = AirInletTemp_sensor.flow_model.C_out.P;
      AirInletTemp_sensor.flow_model.Xi = inStream(AirInletTemp_sensor.flow_model.C_in.Xi_outflow);
      AirInletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirInletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirInletTemp_sensor.flow_model.state_in = setState_phX_Unique7(
        AirInletTemp_sensor.flow_model.P_in, AirInletTemp_sensor.flow_model.h_in,
         AirInletTemp_sensor.flow_model.Xi);
      AirInletTemp_sensor.flow_model.state_out = setState_phX_Unique7(
        AirInletTemp_sensor.flow_model.P_out, AirInletTemp_sensor.flow_model.h_out,
         AirInletTemp_sensor.flow_model.Xi);
      AirInletTemp_sensor.flow_model.T_in = temperature_Unique25(
        AirInletTemp_sensor.flow_model.state_in);
      AirInletTemp_sensor.flow_model.T_out = temperature_Unique25(
        AirInletTemp_sensor.flow_model.state_out);
      AirInletTemp_sensor.flow_model.rho_in = density_Unique26(
        AirInletTemp_sensor.flow_model.state_in);
      AirInletTemp_sensor.flow_model.rho_out = density_Unique26(
        AirInletTemp_sensor.flow_model.state_out);
      AirInletTemp_sensor.flow_model.rho = (AirInletTemp_sensor.flow_model.rho_in
        +AirInletTemp_sensor.flow_model.rho_out)/2;
      AirInletTemp_sensor.flow_model.Qv_in = AirInletTemp_sensor.flow_model.Q/
        AirInletTemp_sensor.flow_model.rho_in;
      AirInletTemp_sensor.flow_model.Qv_out =  -AirInletTemp_sensor.flow_model.Q
        /AirInletTemp_sensor.flow_model.rho_out;
      AirInletTemp_sensor.flow_model.Qv = (AirInletTemp_sensor.flow_model.Qv_in-
        AirInletTemp_sensor.flow_model.Qv_out)/2;
      AirInletTemp_sensor.flow_model.P_out-AirInletTemp_sensor.flow_model.P_in
         = AirInletTemp_sensor.flow_model.DP;
      AirInletTemp_sensor.flow_model.Q*(AirInletTemp_sensor.flow_model.h_out-
        AirInletTemp_sensor.flow_model.h_in) = AirInletTemp_sensor.flow_model.W;
      AirInletTemp_sensor.flow_model.h_out-AirInletTemp_sensor.flow_model.h_in
         = AirInletTemp_sensor.flow_model.DH;
      AirInletTemp_sensor.flow_model.T_out-AirInletTemp_sensor.flow_model.T_in
         = AirInletTemp_sensor.flow_model.DT;
      AirInletTemp_sensor.flow_model.C_in.Q+AirInletTemp_sensor.flow_model.C_out.Q
         = 0;
      AirInletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirInletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(AirInletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirInletTemp_sensor.flow_model.P = AirInletTemp_sensor.flow_model.P_in;
      AirInletTemp_sensor.flow_model.h = AirInletTemp_sensor.flow_model.h_in;
      AirInletTemp_sensor.flow_model.T = AirInletTemp_sensor.flow_model.T_in;
      AirInletTemp_sensor.flow_model.DP = 0;
      AirInletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirInletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirInletTemp_sensor.faulty_flow_rate) then 
        AirInletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      AirInletTemp_sensor.P = AirInletTemp_sensor.C_in.P;
      AirInletTemp_sensor.Q = AirInletTemp_sensor.C_in.Q+AirInletTemp_sensor.mass_flow_rate_bias;
      AirInletTemp_sensor.Xi = inStream(AirInletTemp_sensor.C_in.Xi_outflow);
      AirInletTemp_sensor.h = inStream(AirInletTemp_sensor.C_in.h_outflow);
      AirInletTemp_sensor.state = setState_phX_Unique7(AirInletTemp_sensor.P, 
        AirInletTemp_sensor.h, AirInletTemp_sensor.Xi);
      assert(AirInletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      AirInletTemp_sensor.T = AirInletTemp_sensor.flow_model.T;
      AirInletTemp_sensor.T_degC+273.15 = AirInletTemp_sensor.T;
      AirInletTemp_sensor.T_degF = AirInletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    AirInletTemp_sensor.flow_model.C_in.P = AirInletTemp_sensor.C_in.P;
    AirInletTemp_sensor.C_in.Q-AirInletTemp_sensor.flow_model.C_in.Q = 0.0;
    AirInletTemp_sensor.flow_model.C_out.P = AirInletTemp_sensor.C_out.P;
    AirInletTemp_sensor.C_out.Q-AirInletTemp_sensor.flow_model.C_out.Q = 0.0;

  // Component waterInletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      waterInletTemp_sensor.flow_model.h_in = inStream(waterInletTemp_sensor.flow_model.C_in.h_outflow);
      waterInletTemp_sensor.flow_model.h_out = waterInletTemp_sensor.flow_model.C_out.h_outflow;
      waterInletTemp_sensor.flow_model.Q = waterInletTemp_sensor.flow_model.C_in.Q;
      waterInletTemp_sensor.flow_model.P_in = waterInletTemp_sensor.flow_model.C_in.P;
      waterInletTemp_sensor.flow_model.P_out = waterInletTemp_sensor.flow_model.C_out.P;
      waterInletTemp_sensor.flow_model.Xi = inStream(waterInletTemp_sensor.flow_model.C_in.Xi_outflow);
      waterInletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      waterInletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      waterInletTemp_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletTemp_sensor.flow_model.P_in, waterInletTemp_sensor.flow_model.h_in,
         waterInletTemp_sensor.flow_model.Xi, 0, 0);
      waterInletTemp_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletTemp_sensor.flow_model.P_out, waterInletTemp_sensor.flow_model.h_out,
         waterInletTemp_sensor.flow_model.Xi, 0, 0);
      waterInletTemp_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletTemp_sensor.flow_model.state_in);
      waterInletTemp_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterInletTemp_sensor.flow_model.state_out);
      waterInletTemp_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletTemp_sensor.flow_model.state_in);
      waterInletTemp_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterInletTemp_sensor.flow_model.state_out);
      waterInletTemp_sensor.flow_model.rho = (waterInletTemp_sensor.flow_model.rho_in
        +waterInletTemp_sensor.flow_model.rho_out)/2;
      waterInletTemp_sensor.flow_model.Qv_in = waterInletTemp_sensor.flow_model.Q
        /waterInletTemp_sensor.flow_model.rho_in;
      waterInletTemp_sensor.flow_model.Qv_out =  -waterInletTemp_sensor.flow_model.Q
        /waterInletTemp_sensor.flow_model.rho_out;
      waterInletTemp_sensor.flow_model.Qv = (waterInletTemp_sensor.flow_model.Qv_in
        -waterInletTemp_sensor.flow_model.Qv_out)/2;
      waterInletTemp_sensor.flow_model.P_out-waterInletTemp_sensor.flow_model.P_in
         = waterInletTemp_sensor.flow_model.DP;
      waterInletTemp_sensor.flow_model.Q*(waterInletTemp_sensor.flow_model.h_out
        -waterInletTemp_sensor.flow_model.h_in) = waterInletTemp_sensor.flow_model.W;
      waterInletTemp_sensor.flow_model.h_out-waterInletTemp_sensor.flow_model.h_in
         = waterInletTemp_sensor.flow_model.DH;
      waterInletTemp_sensor.flow_model.T_out-waterInletTemp_sensor.flow_model.T_in
         = waterInletTemp_sensor.flow_model.DT;
      waterInletTemp_sensor.flow_model.C_in.Q+waterInletTemp_sensor.flow_model.C_out.Q
         = 0;
      waterInletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        waterInletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(waterInletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      waterInletTemp_sensor.flow_model.P = waterInletTemp_sensor.flow_model.P_in;
      waterInletTemp_sensor.flow_model.h = waterInletTemp_sensor.flow_model.h_in;
      waterInletTemp_sensor.flow_model.T = waterInletTemp_sensor.flow_model.T_in;
      waterInletTemp_sensor.flow_model.DP = 0;
      waterInletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component waterInletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not waterInletTemp_sensor.faulty_flow_rate) then 
        waterInletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      waterInletTemp_sensor.P = waterInletTemp_sensor.C_in.P;
      waterInletTemp_sensor.Q = waterInletTemp_sensor.C_in.Q+waterInletTemp_sensor.mass_flow_rate_bias;
      waterInletTemp_sensor.Xi = inStream(waterInletTemp_sensor.C_in.Xi_outflow);
      waterInletTemp_sensor.h = inStream(waterInletTemp_sensor.C_in.h_outflow);
      waterInletTemp_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterInletTemp_sensor.P, waterInletTemp_sensor.h, waterInletTemp_sensor.Xi,
         0, 0);
      assert(waterInletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      waterInletTemp_sensor.T = waterInletTemp_sensor.flow_model.T;
      waterInletTemp_sensor.T_degC+273.15 = waterInletTemp_sensor.T;
      waterInletTemp_sensor.T_degF = waterInletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    waterInletTemp_sensor.flow_model.C_in.P = waterInletTemp_sensor.C_in.P;
    waterInletTemp_sensor.C_in.Q-waterInletTemp_sensor.flow_model.C_in.Q = 0.0;
    waterInletTemp_sensor.flow_model.C_out.P = waterInletTemp_sensor.C_out.P;
    waterInletTemp_sensor.C_out.Q-waterInletTemp_sensor.flow_model.C_out.Q = 0.0;

  // Component WaterOutletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      WaterOutletTemp_sensor.flow_model.h_in = inStream(WaterOutletTemp_sensor.flow_model.C_in.h_outflow);
      WaterOutletTemp_sensor.flow_model.h_out = WaterOutletTemp_sensor.flow_model.C_out.h_outflow;
      WaterOutletTemp_sensor.flow_model.Q = WaterOutletTemp_sensor.flow_model.C_in.Q;
      WaterOutletTemp_sensor.flow_model.P_in = WaterOutletTemp_sensor.flow_model.C_in.P;
      WaterOutletTemp_sensor.flow_model.P_out = WaterOutletTemp_sensor.flow_model.C_out.P;
      WaterOutletTemp_sensor.flow_model.Xi = inStream(WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      WaterOutletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      WaterOutletTemp_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (WaterOutletTemp_sensor.flow_model.P_in, WaterOutletTemp_sensor.flow_model.h_in,
         WaterOutletTemp_sensor.flow_model.Xi, 0, 0);
      WaterOutletTemp_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (WaterOutletTemp_sensor.flow_model.P_out, WaterOutletTemp_sensor.flow_model.h_out,
         WaterOutletTemp_sensor.flow_model.Xi, 0, 0);
      WaterOutletTemp_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        WaterOutletTemp_sensor.flow_model.state_in);
      WaterOutletTemp_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        WaterOutletTemp_sensor.flow_model.state_out);
      WaterOutletTemp_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        WaterOutletTemp_sensor.flow_model.state_in);
      WaterOutletTemp_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        WaterOutletTemp_sensor.flow_model.state_out);
      WaterOutletTemp_sensor.flow_model.rho = (WaterOutletTemp_sensor.flow_model.rho_in
        +WaterOutletTemp_sensor.flow_model.rho_out)/2;
      WaterOutletTemp_sensor.flow_model.Qv_in = WaterOutletTemp_sensor.flow_model.Q
        /WaterOutletTemp_sensor.flow_model.rho_in;
      WaterOutletTemp_sensor.flow_model.Qv_out =  -WaterOutletTemp_sensor.flow_model.Q
        /WaterOutletTemp_sensor.flow_model.rho_out;
      WaterOutletTemp_sensor.flow_model.Qv = (WaterOutletTemp_sensor.flow_model.Qv_in
        -WaterOutletTemp_sensor.flow_model.Qv_out)/2;
      WaterOutletTemp_sensor.flow_model.P_out-WaterOutletTemp_sensor.flow_model.P_in
         = WaterOutletTemp_sensor.flow_model.DP;
      WaterOutletTemp_sensor.flow_model.Q*(WaterOutletTemp_sensor.flow_model.h_out
        -WaterOutletTemp_sensor.flow_model.h_in) = WaterOutletTemp_sensor.flow_model.W;
      WaterOutletTemp_sensor.flow_model.h_out-WaterOutletTemp_sensor.flow_model.h_in
         = WaterOutletTemp_sensor.flow_model.DH;
      WaterOutletTemp_sensor.flow_model.T_out-WaterOutletTemp_sensor.flow_model.T_in
         = WaterOutletTemp_sensor.flow_model.DT;
      WaterOutletTemp_sensor.flow_model.C_in.Q+WaterOutletTemp_sensor.flow_model.C_out.Q
         = 0;
      WaterOutletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        WaterOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(WaterOutletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      WaterOutletTemp_sensor.flow_model.P = WaterOutletTemp_sensor.flow_model.P_in;
      WaterOutletTemp_sensor.flow_model.h = WaterOutletTemp_sensor.flow_model.h_in;
      WaterOutletTemp_sensor.flow_model.T = WaterOutletTemp_sensor.flow_model.T_in;
      WaterOutletTemp_sensor.flow_model.DP = 0;
      WaterOutletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component WaterOutletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not WaterOutletTemp_sensor.faulty_flow_rate) then 
        WaterOutletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      WaterOutletTemp_sensor.P = WaterOutletTemp_sensor.C_in.P;
      WaterOutletTemp_sensor.Q = WaterOutletTemp_sensor.C_in.Q+WaterOutletTemp_sensor.mass_flow_rate_bias;
      WaterOutletTemp_sensor.Xi = inStream(WaterOutletTemp_sensor.C_in.Xi_outflow);
      WaterOutletTemp_sensor.h = inStream(WaterOutletTemp_sensor.C_in.h_outflow);
      WaterOutletTemp_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (WaterOutletTemp_sensor.P, WaterOutletTemp_sensor.h, WaterOutletTemp_sensor.Xi,
         0, 0);
      assert(WaterOutletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      WaterOutletTemp_sensor.T = WaterOutletTemp_sensor.flow_model.T;
      WaterOutletTemp_sensor.T_degC+273.15 = WaterOutletTemp_sensor.T;
      WaterOutletTemp_sensor.T_degF = WaterOutletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    WaterOutletTemp_sensor.flow_model.C_in.P = WaterOutletTemp_sensor.C_in.P;
    WaterOutletTemp_sensor.C_in.Q-WaterOutletTemp_sensor.flow_model.C_in.Q = 0.0;
    WaterOutletTemp_sensor.flow_model.C_out.P = WaterOutletTemp_sensor.C_out.P;
    WaterOutletTemp_sensor.C_out.Q-WaterOutletTemp_sensor.flow_model.C_out.Q = 
      0.0;

  // Component waterFlow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      waterFlow_sensor.flow_model.h_in = inStream(waterFlow_sensor.flow_model.C_in.h_outflow);
      waterFlow_sensor.flow_model.h_out = waterFlow_sensor.flow_model.C_out.h_outflow;
      waterFlow_sensor.flow_model.Q = waterFlow_sensor.flow_model.C_in.Q;
      waterFlow_sensor.flow_model.P_in = waterFlow_sensor.flow_model.C_in.P;
      waterFlow_sensor.flow_model.P_out = waterFlow_sensor.flow_model.C_out.P;
      waterFlow_sensor.flow_model.Xi = inStream(waterFlow_sensor.flow_model.C_in.Xi_outflow);
      waterFlow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      waterFlow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      waterFlow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterFlow_sensor.flow_model.P_in, waterFlow_sensor.flow_model.h_in, 
        waterFlow_sensor.flow_model.Xi, 0, 0);
      waterFlow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterFlow_sensor.flow_model.P_out, waterFlow_sensor.flow_model.h_out, 
        waterFlow_sensor.flow_model.Xi, 0, 0);
      waterFlow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterFlow_sensor.flow_model.state_in);
      waterFlow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        waterFlow_sensor.flow_model.state_out);
      waterFlow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterFlow_sensor.flow_model.state_in);
      waterFlow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterFlow_sensor.flow_model.state_out);
      waterFlow_sensor.flow_model.rho = (waterFlow_sensor.flow_model.rho_in+
        waterFlow_sensor.flow_model.rho_out)/2;
      waterFlow_sensor.flow_model.Qv_in = waterFlow_sensor.flow_model.Q/
        waterFlow_sensor.flow_model.rho_in;
      waterFlow_sensor.flow_model.Qv_out =  -waterFlow_sensor.flow_model.Q/
        waterFlow_sensor.flow_model.rho_out;
      waterFlow_sensor.flow_model.Qv = (waterFlow_sensor.flow_model.Qv_in-
        waterFlow_sensor.flow_model.Qv_out)/2;
      waterFlow_sensor.flow_model.P_out-waterFlow_sensor.flow_model.P_in = 
        waterFlow_sensor.flow_model.DP;
      waterFlow_sensor.flow_model.Q*(waterFlow_sensor.flow_model.h_out-
        waterFlow_sensor.flow_model.h_in) = waterFlow_sensor.flow_model.W;
      waterFlow_sensor.flow_model.h_out-waterFlow_sensor.flow_model.h_in = 
        waterFlow_sensor.flow_model.DH;
      waterFlow_sensor.flow_model.T_out-waterFlow_sensor.flow_model.T_in = 
        waterFlow_sensor.flow_model.DT;
      waterFlow_sensor.flow_model.C_in.Q+waterFlow_sensor.flow_model.C_out.Q = 0;
      waterFlow_sensor.flow_model.C_out.Xi_outflow = inStream(waterFlow_sensor.flow_model.C_in.Xi_outflow);
      assert(waterFlow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      waterFlow_sensor.flow_model.P = waterFlow_sensor.flow_model.P_in;
      waterFlow_sensor.flow_model.h = waterFlow_sensor.flow_model.h_in;
      waterFlow_sensor.flow_model.T = waterFlow_sensor.flow_model.T_in;
      waterFlow_sensor.flow_model.DP = 0;
      waterFlow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component waterFlow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not waterFlow_sensor.faulty_flow_rate) then 
        waterFlow_sensor.mass_flow_rate_bias = 0;
      end if;
      waterFlow_sensor.P = waterFlow_sensor.C_in.P;
      waterFlow_sensor.Q = waterFlow_sensor.C_in.Q+waterFlow_sensor.mass_flow_rate_bias;
      waterFlow_sensor.Xi = inStream(waterFlow_sensor.C_in.Xi_outflow);
      waterFlow_sensor.h = inStream(waterFlow_sensor.C_in.h_outflow);
      waterFlow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (waterFlow_sensor.P, waterFlow_sensor.h, waterFlow_sensor.Xi, 0, 0);
      assert(waterFlow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      waterFlow_sensor.Qv = waterFlow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        waterFlow_sensor.state);
      waterFlow_sensor.Q_lm = waterFlow_sensor.Qv*60000;
      waterFlow_sensor.Q_th = waterFlow_sensor.Q*3.6;
      waterFlow_sensor.Q_lbs = waterFlow_sensor.Q*0.453592428;
      waterFlow_sensor.Q_Mlbh = waterFlow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    waterFlow_sensor.flow_model.C_in.P = waterFlow_sensor.C_in.P;
    waterFlow_sensor.C_in.Q-waterFlow_sensor.flow_model.C_in.Q = 0.0;
    waterFlow_sensor.flow_model.C_out.P = waterFlow_sensor.C_out.P;
    waterFlow_sensor.C_out.Q-waterFlow_sensor.flow_model.C_out.Q = 0.0;

  // Component AirOutletTemp_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      AirOutletTemp_sensor.flow_model.h_in = inStream(AirOutletTemp_sensor.flow_model.C_in.h_outflow);
      AirOutletTemp_sensor.flow_model.h_out = AirOutletTemp_sensor.flow_model.C_out.h_outflow;
      AirOutletTemp_sensor.flow_model.Q = AirOutletTemp_sensor.flow_model.C_in.Q;
      AirOutletTemp_sensor.flow_model.P_in = AirOutletTemp_sensor.flow_model.C_in.P;
      AirOutletTemp_sensor.flow_model.P_out = AirOutletTemp_sensor.flow_model.C_out.P;
      AirOutletTemp_sensor.flow_model.Xi = inStream(AirOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      AirOutletTemp_sensor.flow_model.C_in.h_outflow = 1000000.0;
      AirOutletTemp_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      AirOutletTemp_sensor.flow_model.state_in = setState_phX_Unique7(
        AirOutletTemp_sensor.flow_model.P_in, AirOutletTemp_sensor.flow_model.h_in,
         AirOutletTemp_sensor.flow_model.Xi);
      AirOutletTemp_sensor.flow_model.state_out = setState_phX_Unique7(
        AirOutletTemp_sensor.flow_model.P_out, AirOutletTemp_sensor.flow_model.h_out,
         AirOutletTemp_sensor.flow_model.Xi);
      AirOutletTemp_sensor.flow_model.T_in = temperature_Unique25(
        AirOutletTemp_sensor.flow_model.state_in);
      AirOutletTemp_sensor.flow_model.T_out = temperature_Unique25(
        AirOutletTemp_sensor.flow_model.state_out);
      AirOutletTemp_sensor.flow_model.rho_in = density_Unique26(
        AirOutletTemp_sensor.flow_model.state_in);
      AirOutletTemp_sensor.flow_model.rho_out = density_Unique26(
        AirOutletTemp_sensor.flow_model.state_out);
      AirOutletTemp_sensor.flow_model.rho = (AirOutletTemp_sensor.flow_model.rho_in
        +AirOutletTemp_sensor.flow_model.rho_out)/2;
      AirOutletTemp_sensor.flow_model.Qv_in = AirOutletTemp_sensor.flow_model.Q/
        AirOutletTemp_sensor.flow_model.rho_in;
      AirOutletTemp_sensor.flow_model.Qv_out =  -AirOutletTemp_sensor.flow_model.Q
        /AirOutletTemp_sensor.flow_model.rho_out;
      AirOutletTemp_sensor.flow_model.Qv = (AirOutletTemp_sensor.flow_model.Qv_in
        -AirOutletTemp_sensor.flow_model.Qv_out)/2;
      AirOutletTemp_sensor.flow_model.P_out-AirOutletTemp_sensor.flow_model.P_in
         = AirOutletTemp_sensor.flow_model.DP;
      AirOutletTemp_sensor.flow_model.Q*(AirOutletTemp_sensor.flow_model.h_out-
        AirOutletTemp_sensor.flow_model.h_in) = AirOutletTemp_sensor.flow_model.W;
      AirOutletTemp_sensor.flow_model.h_out-AirOutletTemp_sensor.flow_model.h_in
         = AirOutletTemp_sensor.flow_model.DH;
      AirOutletTemp_sensor.flow_model.T_out-AirOutletTemp_sensor.flow_model.T_in
         = AirOutletTemp_sensor.flow_model.DT;
      AirOutletTemp_sensor.flow_model.C_in.Q+AirOutletTemp_sensor.flow_model.C_out.Q
         = 0;
      AirOutletTemp_sensor.flow_model.C_out.Xi_outflow = inStream(
        AirOutletTemp_sensor.flow_model.C_in.Xi_outflow);
      assert(AirOutletTemp_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      AirOutletTemp_sensor.flow_model.P = AirOutletTemp_sensor.flow_model.P_in;
      AirOutletTemp_sensor.flow_model.h = AirOutletTemp_sensor.flow_model.h_in;
      AirOutletTemp_sensor.flow_model.T = AirOutletTemp_sensor.flow_model.T_in;
      AirOutletTemp_sensor.flow_model.DP = 0;
      AirOutletTemp_sensor.flow_model.DH = 0;
    // end of extends 

  // Component AirOutletTemp_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not AirOutletTemp_sensor.faulty_flow_rate) then 
        AirOutletTemp_sensor.mass_flow_rate_bias = 0;
      end if;
      AirOutletTemp_sensor.P = AirOutletTemp_sensor.C_in.P;
      AirOutletTemp_sensor.Q = AirOutletTemp_sensor.C_in.Q+AirOutletTemp_sensor.mass_flow_rate_bias;
      AirOutletTemp_sensor.Xi = inStream(AirOutletTemp_sensor.C_in.Xi_outflow);
      AirOutletTemp_sensor.h = inStream(AirOutletTemp_sensor.C_in.h_outflow);
      AirOutletTemp_sensor.state = setState_phX_Unique7(AirOutletTemp_sensor.P, 
        AirOutletTemp_sensor.h, AirOutletTemp_sensor.Xi);
      assert(AirOutletTemp_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      AirOutletTemp_sensor.T = AirOutletTemp_sensor.flow_model.T;
      AirOutletTemp_sensor.T_degC+273.15 = AirOutletTemp_sensor.T;
      AirOutletTemp_sensor.T_degF = AirOutletTemp_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    AirOutletTemp_sensor.flow_model.C_in.P = AirOutletTemp_sensor.C_in.P;
    AirOutletTemp_sensor.C_in.Q-AirOutletTemp_sensor.flow_model.C_in.Q = 0.0;
    AirOutletTemp_sensor.flow_model.C_out.P = AirOutletTemp_sensor.C_out.P;
    AirOutletTemp_sensor.C_out.Q-AirOutletTemp_sensor.flow_model.C_out.Q = 0.0;

  // Component airInletFlow_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      airInletFlow_sensor.flow_model.h_in = inStream(airInletFlow_sensor.flow_model.C_in.h_outflow);
      airInletFlow_sensor.flow_model.h_out = airInletFlow_sensor.flow_model.C_out.h_outflow;
      airInletFlow_sensor.flow_model.Q = airInletFlow_sensor.flow_model.C_in.Q;
      airInletFlow_sensor.flow_model.P_in = airInletFlow_sensor.flow_model.C_in.P;
      airInletFlow_sensor.flow_model.P_out = airInletFlow_sensor.flow_model.C_out.P;
      airInletFlow_sensor.flow_model.Xi = inStream(airInletFlow_sensor.flow_model.C_in.Xi_outflow);
      airInletFlow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      airInletFlow_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      airInletFlow_sensor.flow_model.state_in = setState_phX_Unique7(
        airInletFlow_sensor.flow_model.P_in, airInletFlow_sensor.flow_model.h_in,
         airInletFlow_sensor.flow_model.Xi);
      airInletFlow_sensor.flow_model.state_out = setState_phX_Unique7(
        airInletFlow_sensor.flow_model.P_out, airInletFlow_sensor.flow_model.h_out,
         airInletFlow_sensor.flow_model.Xi);
      airInletFlow_sensor.flow_model.T_in = temperature_Unique25(
        airInletFlow_sensor.flow_model.state_in);
      airInletFlow_sensor.flow_model.T_out = temperature_Unique25(
        airInletFlow_sensor.flow_model.state_out);
      airInletFlow_sensor.flow_model.rho_in = density_Unique26(
        airInletFlow_sensor.flow_model.state_in);
      airInletFlow_sensor.flow_model.rho_out = density_Unique26(
        airInletFlow_sensor.flow_model.state_out);
      airInletFlow_sensor.flow_model.rho = (airInletFlow_sensor.flow_model.rho_in
        +airInletFlow_sensor.flow_model.rho_out)/2;
      airInletFlow_sensor.flow_model.Qv_in = airInletFlow_sensor.flow_model.Q/
        airInletFlow_sensor.flow_model.rho_in;
      airInletFlow_sensor.flow_model.Qv_out =  -airInletFlow_sensor.flow_model.Q
        /airInletFlow_sensor.flow_model.rho_out;
      airInletFlow_sensor.flow_model.Qv = (airInletFlow_sensor.flow_model.Qv_in-
        airInletFlow_sensor.flow_model.Qv_out)/2;
      airInletFlow_sensor.flow_model.P_out-airInletFlow_sensor.flow_model.P_in
         = airInletFlow_sensor.flow_model.DP;
      airInletFlow_sensor.flow_model.Q*(airInletFlow_sensor.flow_model.h_out-
        airInletFlow_sensor.flow_model.h_in) = airInletFlow_sensor.flow_model.W;
      airInletFlow_sensor.flow_model.h_out-airInletFlow_sensor.flow_model.h_in
         = airInletFlow_sensor.flow_model.DH;
      airInletFlow_sensor.flow_model.T_out-airInletFlow_sensor.flow_model.T_in
         = airInletFlow_sensor.flow_model.DT;
      airInletFlow_sensor.flow_model.C_in.Q+airInletFlow_sensor.flow_model.C_out.Q
         = 0;
      airInletFlow_sensor.flow_model.C_out.Xi_outflow = inStream(
        airInletFlow_sensor.flow_model.C_in.Xi_outflow);
      assert(airInletFlow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      airInletFlow_sensor.flow_model.P = airInletFlow_sensor.flow_model.P_in;
      airInletFlow_sensor.flow_model.h = airInletFlow_sensor.flow_model.h_in;
      airInletFlow_sensor.flow_model.T = airInletFlow_sensor.flow_model.T_in;
      airInletFlow_sensor.flow_model.DP = 0;
      airInletFlow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component airInletFlow_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not airInletFlow_sensor.faulty_flow_rate) then 
        airInletFlow_sensor.mass_flow_rate_bias = 0;
      end if;
      airInletFlow_sensor.P = airInletFlow_sensor.C_in.P;
      airInletFlow_sensor.Q = airInletFlow_sensor.C_in.Q+airInletFlow_sensor.mass_flow_rate_bias;
      airInletFlow_sensor.Xi = inStream(airInletFlow_sensor.C_in.Xi_outflow);
      airInletFlow_sensor.h = inStream(airInletFlow_sensor.C_in.h_outflow);
      airInletFlow_sensor.state = setState_phX_Unique7(airInletFlow_sensor.P, 
        airInletFlow_sensor.h, airInletFlow_sensor.Xi);
      assert(airInletFlow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      airInletFlow_sensor.Qv = airInletFlow_sensor.Q/density_Unique26(
        airInletFlow_sensor.state);
      airInletFlow_sensor.Q_lm = airInletFlow_sensor.Qv*60000;
      airInletFlow_sensor.Q_th = airInletFlow_sensor.Q*3.6;
      airInletFlow_sensor.Q_lbs = airInletFlow_sensor.Q*0.453592428;
      airInletFlow_sensor.Q_Mlbh = airInletFlow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    airInletFlow_sensor.flow_model.C_in.P = airInletFlow_sensor.C_in.P;
    airInletFlow_sensor.C_in.Q-airInletFlow_sensor.flow_model.C_in.Q = 0.0;
    airInletFlow_sensor.flow_model.C_out.P = airInletFlow_sensor.C_out.P;
    airInletFlow_sensor.C_out.Q-airInletFlow_sensor.flow_model.C_out.Q = 0.0;

  // Component airInletPress_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      airInletPress_sensor.flow_model.h_in = inStream(airInletPress_sensor.flow_model.C_in.h_outflow);
      airInletPress_sensor.flow_model.h_out = airInletPress_sensor.flow_model.C_out.h_outflow;
      airInletPress_sensor.flow_model.Q = airInletPress_sensor.flow_model.C_in.Q;
      airInletPress_sensor.flow_model.P_in = airInletPress_sensor.flow_model.C_in.P;
      airInletPress_sensor.flow_model.P_out = airInletPress_sensor.flow_model.C_out.P;
      airInletPress_sensor.flow_model.Xi = inStream(airInletPress_sensor.flow_model.C_in.Xi_outflow);
      airInletPress_sensor.flow_model.C_in.h_outflow = 1000000.0;
      airInletPress_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      airInletPress_sensor.flow_model.state_in = setState_phX_Unique7(
        airInletPress_sensor.flow_model.P_in, airInletPress_sensor.flow_model.h_in,
         airInletPress_sensor.flow_model.Xi);
      airInletPress_sensor.flow_model.state_out = setState_phX_Unique7(
        airInletPress_sensor.flow_model.P_out, airInletPress_sensor.flow_model.h_out,
         airInletPress_sensor.flow_model.Xi);
      airInletPress_sensor.flow_model.T_in = temperature_Unique25(
        airInletPress_sensor.flow_model.state_in);
      airInletPress_sensor.flow_model.T_out = temperature_Unique25(
        airInletPress_sensor.flow_model.state_out);
      airInletPress_sensor.flow_model.rho_in = density_Unique26(
        airInletPress_sensor.flow_model.state_in);
      airInletPress_sensor.flow_model.rho_out = density_Unique26(
        airInletPress_sensor.flow_model.state_out);
      airInletPress_sensor.flow_model.rho = (airInletPress_sensor.flow_model.rho_in
        +airInletPress_sensor.flow_model.rho_out)/2;
      airInletPress_sensor.flow_model.Qv_in = airInletPress_sensor.flow_model.Q/
        airInletPress_sensor.flow_model.rho_in;
      airInletPress_sensor.flow_model.Qv_out =  -airInletPress_sensor.flow_model.Q
        /airInletPress_sensor.flow_model.rho_out;
      airInletPress_sensor.flow_model.Qv = (airInletPress_sensor.flow_model.Qv_in
        -airInletPress_sensor.flow_model.Qv_out)/2;
      airInletPress_sensor.flow_model.P_out-airInletPress_sensor.flow_model.P_in
         = airInletPress_sensor.flow_model.DP;
      airInletPress_sensor.flow_model.Q*(airInletPress_sensor.flow_model.h_out-
        airInletPress_sensor.flow_model.h_in) = airInletPress_sensor.flow_model.W;
      airInletPress_sensor.flow_model.h_out-airInletPress_sensor.flow_model.h_in
         = airInletPress_sensor.flow_model.DH;
      airInletPress_sensor.flow_model.T_out-airInletPress_sensor.flow_model.T_in
         = airInletPress_sensor.flow_model.DT;
      airInletPress_sensor.flow_model.C_in.Q+airInletPress_sensor.flow_model.C_out.Q
         = 0;
      airInletPress_sensor.flow_model.C_out.Xi_outflow = inStream(
        airInletPress_sensor.flow_model.C_in.Xi_outflow);
      assert(airInletPress_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      airInletPress_sensor.flow_model.P = airInletPress_sensor.flow_model.P_in;
      airInletPress_sensor.flow_model.h = airInletPress_sensor.flow_model.h_in;
      airInletPress_sensor.flow_model.T = airInletPress_sensor.flow_model.T_in;
      airInletPress_sensor.flow_model.DP = 0;
      airInletPress_sensor.flow_model.DH = 0;
    // end of extends 

  // Component airInletPress_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not airInletPress_sensor.faulty_flow_rate) then 
        airInletPress_sensor.mass_flow_rate_bias = 0;
      end if;
      airInletPress_sensor.P = airInletPress_sensor.C_in.P;
      airInletPress_sensor.Q = airInletPress_sensor.C_in.Q+airInletPress_sensor.mass_flow_rate_bias;
      airInletPress_sensor.Xi = inStream(airInletPress_sensor.C_in.Xi_outflow);
      airInletPress_sensor.h = inStream(airInletPress_sensor.C_in.h_outflow);
      airInletPress_sensor.state = setState_phX_Unique7(airInletPress_sensor.P, 
        airInletPress_sensor.h, airInletPress_sensor.Xi);
      assert(airInletPress_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      airInletPress_sensor.P_barA = airInletPress_sensor.P*1E-05;
      airInletPress_sensor.P_psiA = airInletPress_sensor.P*0.000145038;
      airInletPress_sensor.P_MPaA = airInletPress_sensor.P*1E-06;
      airInletPress_sensor.P_kPaA = airInletPress_sensor.P*0.001;
      airInletPress_sensor.P_barG = airInletPress_sensor.P_barA-1;
      airInletPress_sensor.P_psiG = airInletPress_sensor.P_psiA-14.50377377;
      airInletPress_sensor.P_MPaG = airInletPress_sensor.P_MPaA-0.1;
      airInletPress_sensor.P_kPaG = airInletPress_sensor.P_kPaA-100;
      airInletPress_sensor.P_mbar = airInletPress_sensor.P*0.01;
      airInletPress_sensor.P_inHg = airInletPress_sensor.P*0.0002953006;
    // end of extends 
  equation
    airInletPress_sensor.flow_model.C_in.P = airInletPress_sensor.C_in.P;
    airInletPress_sensor.C_in.Q-airInletPress_sensor.flow_model.C_in.Q = 0.0;
    airInletPress_sensor.flow_model.C_out.P = airInletPress_sensor.C_out.P;
    airInletPress_sensor.C_out.Q-airInletPress_sensor.flow_model.C_out.Q = 0.0;

  // Component airOutletPress_sensor.flow_model
  // class MetroscopeModelingLibrary.MoistAir.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      airOutletPress_sensor.flow_model.h_in = inStream(airOutletPress_sensor.flow_model.C_in.h_outflow);
      airOutletPress_sensor.flow_model.h_out = airOutletPress_sensor.flow_model.C_out.h_outflow;
      airOutletPress_sensor.flow_model.Q = airOutletPress_sensor.flow_model.C_in.Q;
      airOutletPress_sensor.flow_model.P_in = airOutletPress_sensor.flow_model.C_in.P;
      airOutletPress_sensor.flow_model.P_out = airOutletPress_sensor.flow_model.C_out.P;
      airOutletPress_sensor.flow_model.Xi = inStream(airOutletPress_sensor.flow_model.C_in.Xi_outflow);
      airOutletPress_sensor.flow_model.C_in.h_outflow = 1000000.0;
      airOutletPress_sensor.flow_model.C_in.Xi_outflow = zeros(1);
      airOutletPress_sensor.flow_model.state_in = setState_phX_Unique7(
        airOutletPress_sensor.flow_model.P_in, airOutletPress_sensor.flow_model.h_in,
         airOutletPress_sensor.flow_model.Xi);
      airOutletPress_sensor.flow_model.state_out = setState_phX_Unique7(
        airOutletPress_sensor.flow_model.P_out, airOutletPress_sensor.flow_model.h_out,
         airOutletPress_sensor.flow_model.Xi);
      airOutletPress_sensor.flow_model.T_in = temperature_Unique25(
        airOutletPress_sensor.flow_model.state_in);
      airOutletPress_sensor.flow_model.T_out = temperature_Unique25(
        airOutletPress_sensor.flow_model.state_out);
      airOutletPress_sensor.flow_model.rho_in = density_Unique26(
        airOutletPress_sensor.flow_model.state_in);
      airOutletPress_sensor.flow_model.rho_out = density_Unique26(
        airOutletPress_sensor.flow_model.state_out);
      airOutletPress_sensor.flow_model.rho = (airOutletPress_sensor.flow_model.rho_in
        +airOutletPress_sensor.flow_model.rho_out)/2;
      airOutletPress_sensor.flow_model.Qv_in = airOutletPress_sensor.flow_model.Q
        /airOutletPress_sensor.flow_model.rho_in;
      airOutletPress_sensor.flow_model.Qv_out =  -airOutletPress_sensor.flow_model.Q
        /airOutletPress_sensor.flow_model.rho_out;
      airOutletPress_sensor.flow_model.Qv = (airOutletPress_sensor.flow_model.Qv_in
        -airOutletPress_sensor.flow_model.Qv_out)/2;
      airOutletPress_sensor.flow_model.P_out-airOutletPress_sensor.flow_model.P_in
         = airOutletPress_sensor.flow_model.DP;
      airOutletPress_sensor.flow_model.Q*(airOutletPress_sensor.flow_model.h_out
        -airOutletPress_sensor.flow_model.h_in) = airOutletPress_sensor.flow_model.W;
      airOutletPress_sensor.flow_model.h_out-airOutletPress_sensor.flow_model.h_in
         = airOutletPress_sensor.flow_model.DH;
      airOutletPress_sensor.flow_model.T_out-airOutletPress_sensor.flow_model.T_in
         = airOutletPress_sensor.flow_model.DT;
      airOutletPress_sensor.flow_model.C_in.Q+airOutletPress_sensor.flow_model.C_out.Q
         = 0;
      airOutletPress_sensor.flow_model.C_out.Xi_outflow = inStream(
        airOutletPress_sensor.flow_model.C_in.Xi_outflow);
      assert(airOutletPress_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      airOutletPress_sensor.flow_model.P = airOutletPress_sensor.flow_model.P_in;
      airOutletPress_sensor.flow_model.h = airOutletPress_sensor.flow_model.h_in;
      airOutletPress_sensor.flow_model.T = airOutletPress_sensor.flow_model.T_in;
      airOutletPress_sensor.flow_model.DP = 0;
      airOutletPress_sensor.flow_model.DH = 0;
    // end of extends 

  // Component airOutletPress_sensor
  // class MetroscopeModelingLibrary.Sensors.MoistAir.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not airOutletPress_sensor.faulty_flow_rate) then 
        airOutletPress_sensor.mass_flow_rate_bias = 0;
      end if;
      airOutletPress_sensor.P = airOutletPress_sensor.C_in.P;
      airOutletPress_sensor.Q = airOutletPress_sensor.C_in.Q+airOutletPress_sensor.mass_flow_rate_bias;
      airOutletPress_sensor.Xi = inStream(airOutletPress_sensor.C_in.Xi_outflow);
      airOutletPress_sensor.h = inStream(airOutletPress_sensor.C_in.h_outflow);
      airOutletPress_sensor.state = setState_phX_Unique7(airOutletPress_sensor.P,
         airOutletPress_sensor.h, airOutletPress_sensor.Xi);
      assert(airOutletPress_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      airOutletPress_sensor.P_barA = airOutletPress_sensor.P*1E-05;
      airOutletPress_sensor.P_psiA = airOutletPress_sensor.P*0.000145038;
      airOutletPress_sensor.P_MPaA = airOutletPress_sensor.P*1E-06;
      airOutletPress_sensor.P_kPaA = airOutletPress_sensor.P*0.001;
      airOutletPress_sensor.P_barG = airOutletPress_sensor.P_barA-1;
      airOutletPress_sensor.P_psiG = airOutletPress_sensor.P_psiA-14.50377377;
      airOutletPress_sensor.P_MPaG = airOutletPress_sensor.P_MPaA-0.1;
      airOutletPress_sensor.P_kPaG = airOutletPress_sensor.P_kPaA-100;
      airOutletPress_sensor.P_mbar = airOutletPress_sensor.P*0.01;
      airOutletPress_sensor.P_inHg = airOutletPress_sensor.P*0.0002953006;
    // end of extends 
  equation
    airOutletPress_sensor.flow_model.C_in.P = airOutletPress_sensor.C_in.P;
    airOutletPress_sensor.C_in.Q-airOutletPress_sensor.flow_model.C_in.Q = 0.0;
    airOutletPress_sensor.flow_model.C_out.P = airOutletPress_sensor.C_out.P;
    airOutletPress_sensor.C_out.Q-airOutletPress_sensor.flow_model.C_out.Q = 0.0;

  // Component source
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      source.C_out.P = source.P_out;
      source.C_out.Q = source.Q_out;
      source.C_out.h_outflow = source.h_out;
      source.C_out.Xi_outflow = source.Xi_out;
      source.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        source.P_out, source.h_out, source.Xi_out, 0, 0);
      source.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        source.state_out);
      source.Qv_out = source.Q_out/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        source.state_out);
    // end of extends 

  // Component Condenser.cold_side_pipe
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.Pipe
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Condenser.cold_side_pipe.h_in = inStream(Condenser.cold_side_pipe.C_in.h_outflow);
      Condenser.cold_side_pipe.h_out = Condenser.cold_side_pipe.C_out.h_outflow;
      Condenser.cold_side_pipe.Q = Condenser.cold_side_pipe.C_in.Q;
      Condenser.cold_side_pipe.P_in = Condenser.cold_side_pipe.C_in.P;
      Condenser.cold_side_pipe.P_out = Condenser.cold_side_pipe.C_out.P;
      Condenser.cold_side_pipe.Xi = inStream(Condenser.cold_side_pipe.C_in.Xi_outflow);
      Condenser.cold_side_pipe.C_in.h_outflow = 1000000.0;
      Condenser.cold_side_pipe.C_in.Xi_outflow = zeros(0);
      Condenser.cold_side_pipe.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.cold_side_pipe.P_in, Condenser.cold_side_pipe.h_in, 
        Condenser.cold_side_pipe.Xi, 0, 0);
      Condenser.cold_side_pipe.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.cold_side_pipe.P_out, Condenser.cold_side_pipe.h_out, 
        Condenser.cold_side_pipe.Xi, 0, 0);
      Condenser.cold_side_pipe.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.cold_side_pipe.state_in);
      Condenser.cold_side_pipe.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.cold_side_pipe.state_out);
      Condenser.cold_side_pipe.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.cold_side_pipe.state_in);
      Condenser.cold_side_pipe.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.cold_side_pipe.state_out);
      Condenser.cold_side_pipe.rho = (Condenser.cold_side_pipe.rho_in+
        Condenser.cold_side_pipe.rho_out)/2;
      Condenser.cold_side_pipe.Qv_in = Condenser.cold_side_pipe.Q/
        Condenser.cold_side_pipe.rho_in;
      Condenser.cold_side_pipe.Qv_out =  -Condenser.cold_side_pipe.Q/
        Condenser.cold_side_pipe.rho_out;
      Condenser.cold_side_pipe.Qv = (Condenser.cold_side_pipe.Qv_in-
        Condenser.cold_side_pipe.Qv_out)/2;
      Condenser.cold_side_pipe.P_out-Condenser.cold_side_pipe.P_in = 
        Condenser.cold_side_pipe.DP;
      Condenser.cold_side_pipe.Q*(Condenser.cold_side_pipe.h_out-
        Condenser.cold_side_pipe.h_in) = Condenser.cold_side_pipe.W;
      Condenser.cold_side_pipe.h_out-Condenser.cold_side_pipe.h_in = 
        Condenser.cold_side_pipe.DH;
      Condenser.cold_side_pipe.T_out-Condenser.cold_side_pipe.T_in = 
        Condenser.cold_side_pipe.DT;
      Condenser.cold_side_pipe.C_in.Q+Condenser.cold_side_pipe.C_out.Q = 0;
      Condenser.cold_side_pipe.C_out.Xi_outflow = inStream(Condenser.cold_side_pipe.C_in.Xi_outflow);
      assert(Condenser.cold_side_pipe.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      Condenser.cold_side_pipe.h = Condenser.cold_side_pipe.h_in;
      Condenser.cold_side_pipe.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.Pipe
    equation
      if ( not Condenser.cold_side_pipe.faulty) then 
        Condenser.cold_side_pipe.fouling = 0;
      end if;
      Condenser.cold_side_pipe.DP_f =  -(1+Condenser.cold_side_pipe.fouling/100)
        *Condenser.cold_side_pipe.Kfr*Condenser.cold_side_pipe.Q*abs(
        Condenser.cold_side_pipe.Q)/Condenser.cold_side_pipe.rho_in;
      Condenser.cold_side_pipe.DP_z =  -Condenser.cold_side_pipe.rho_in*9.80665*
        Condenser.cold_side_pipe.delta_z;
      Condenser.cold_side_pipe.DP = Condenser.cold_side_pipe.DP_f+
        Condenser.cold_side_pipe.DP_z;
    // end of extends 

  // Component Condenser.hot_side
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Condenser.hot_side.h_in = inStream(Condenser.hot_side.C_in.h_outflow);
      Condenser.hot_side.h_out = Condenser.hot_side.C_out.h_outflow;
      Condenser.hot_side.Q = Condenser.hot_side.C_in.Q;
      Condenser.hot_side.P_in = Condenser.hot_side.C_in.P;
      Condenser.hot_side.P_out = Condenser.hot_side.C_out.P;
      Condenser.hot_side.Xi = inStream(Condenser.hot_side.C_in.Xi_outflow);
      Condenser.hot_side.C_in.h_outflow = 1000000.0;
      Condenser.hot_side.C_in.Xi_outflow = zeros(0);
      Condenser.hot_side.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.hot_side.P_in, Condenser.hot_side.h_in, Condenser.hot_side.Xi,
         0, 0);
      Condenser.hot_side.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.hot_side.P_out, Condenser.hot_side.h_out, Condenser.hot_side.Xi,
         0, 0);
      Condenser.hot_side.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.hot_side.state_in);
      Condenser.hot_side.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.hot_side.state_out);
      Condenser.hot_side.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.hot_side.state_in);
      Condenser.hot_side.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.hot_side.state_out);
      Condenser.hot_side.rho = (Condenser.hot_side.rho_in+Condenser.hot_side.rho_out)
        /2;
      Condenser.hot_side.Qv_in = Condenser.hot_side.Q/Condenser.hot_side.rho_in;
      Condenser.hot_side.Qv_out =  -Condenser.hot_side.Q/Condenser.hot_side.rho_out;
      Condenser.hot_side.Qv = (Condenser.hot_side.Qv_in-Condenser.hot_side.Qv_out)
        /2;
      Condenser.hot_side.P_out-Condenser.hot_side.P_in = Condenser.hot_side.DP;
      Condenser.hot_side.Q*(Condenser.hot_side.h_out-Condenser.hot_side.h_in) = 
        Condenser.hot_side.W;
      Condenser.hot_side.h_out-Condenser.hot_side.h_in = Condenser.hot_side.DH;
      Condenser.hot_side.T_out-Condenser.hot_side.T_in = Condenser.hot_side.DT;
      Condenser.hot_side.C_in.Q+Condenser.hot_side.C_out.Q = 0;
      Condenser.hot_side.C_out.Xi_outflow = inStream(Condenser.hot_side.C_in.Xi_outflow);
      assert(Condenser.hot_side.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPFlowModel
    equation
      Condenser.hot_side.P = Condenser.hot_side.P_in;
      Condenser.hot_side.DP = 0;
    // end of extends 
  equation
    Condenser.hot_side.W = Condenser.hot_side.W_input;

  // Component Condenser.cold_side
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Condenser.cold_side.h_in = inStream(Condenser.cold_side.C_in.h_outflow);
      Condenser.cold_side.h_out = Condenser.cold_side.C_out.h_outflow;
      Condenser.cold_side.Q = Condenser.cold_side.C_in.Q;
      Condenser.cold_side.P_in = Condenser.cold_side.C_in.P;
      Condenser.cold_side.P_out = Condenser.cold_side.C_out.P;
      Condenser.cold_side.Xi = inStream(Condenser.cold_side.C_in.Xi_outflow);
      Condenser.cold_side.C_in.h_outflow = 1000000.0;
      Condenser.cold_side.C_in.Xi_outflow = zeros(0);
      Condenser.cold_side.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.cold_side.P_in, Condenser.cold_side.h_in, Condenser.cold_side.Xi,
         0, 0);
      Condenser.cold_side.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.cold_side.P_out, Condenser.cold_side.h_out, Condenser.cold_side.Xi,
         0, 0);
      Condenser.cold_side.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.cold_side.state_in);
      Condenser.cold_side.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.cold_side.state_out);
      Condenser.cold_side.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.cold_side.state_in);
      Condenser.cold_side.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.cold_side.state_out);
      Condenser.cold_side.rho = (Condenser.cold_side.rho_in+Condenser.cold_side.rho_out)
        /2;
      Condenser.cold_side.Qv_in = Condenser.cold_side.Q/Condenser.cold_side.rho_in;
      Condenser.cold_side.Qv_out =  -Condenser.cold_side.Q/Condenser.cold_side.rho_out;
      Condenser.cold_side.Qv = (Condenser.cold_side.Qv_in-Condenser.cold_side.Qv_out)
        /2;
      Condenser.cold_side.P_out-Condenser.cold_side.P_in = Condenser.cold_side.DP;
      Condenser.cold_side.Q*(Condenser.cold_side.h_out-Condenser.cold_side.h_in)
         = Condenser.cold_side.W;
      Condenser.cold_side.h_out-Condenser.cold_side.h_in = Condenser.cold_side.DH;
      Condenser.cold_side.T_out-Condenser.cold_side.T_in = Condenser.cold_side.DT;
      Condenser.cold_side.C_in.Q+Condenser.cold_side.C_out.Q = 0;
      Condenser.cold_side.C_out.Xi_outflow = inStream(Condenser.cold_side.C_in.Xi_outflow);
      assert(Condenser.cold_side.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPFlowModel
    equation
      Condenser.cold_side.P = Condenser.cold_side.P_in;
      Condenser.cold_side.DP = 0;
    // end of extends 
  equation
    Condenser.cold_side.W = Condenser.cold_side.W_input;

  // Component Condenser.water_height_pipe
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.Pipe
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Condenser.water_height_pipe.h_in = inStream(Condenser.water_height_pipe.C_in.h_outflow);
      Condenser.water_height_pipe.h_out = Condenser.water_height_pipe.C_out.h_outflow;
      Condenser.water_height_pipe.Q = Condenser.water_height_pipe.C_in.Q;
      Condenser.water_height_pipe.P_in = Condenser.water_height_pipe.C_in.P;
      Condenser.water_height_pipe.P_out = Condenser.water_height_pipe.C_out.P;
      Condenser.water_height_pipe.Xi = inStream(Condenser.water_height_pipe.C_in.Xi_outflow);
      Condenser.water_height_pipe.C_in.h_outflow = 1000000.0;
      Condenser.water_height_pipe.C_in.Xi_outflow = zeros(0);
      Condenser.water_height_pipe.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.water_height_pipe.P_in, Condenser.water_height_pipe.h_in, 
        Condenser.water_height_pipe.Xi, 0, 0);
      Condenser.water_height_pipe.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.water_height_pipe.P_out, Condenser.water_height_pipe.h_out, 
        Condenser.water_height_pipe.Xi, 0, 0);
      Condenser.water_height_pipe.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.water_height_pipe.state_in);
      Condenser.water_height_pipe.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.water_height_pipe.state_out);
      Condenser.water_height_pipe.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.water_height_pipe.state_in);
      Condenser.water_height_pipe.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.water_height_pipe.state_out);
      Condenser.water_height_pipe.rho = (Condenser.water_height_pipe.rho_in+
        Condenser.water_height_pipe.rho_out)/2;
      Condenser.water_height_pipe.Qv_in = Condenser.water_height_pipe.Q/
        Condenser.water_height_pipe.rho_in;
      Condenser.water_height_pipe.Qv_out =  -Condenser.water_height_pipe.Q/
        Condenser.water_height_pipe.rho_out;
      Condenser.water_height_pipe.Qv = (Condenser.water_height_pipe.Qv_in-
        Condenser.water_height_pipe.Qv_out)/2;
      Condenser.water_height_pipe.P_out-Condenser.water_height_pipe.P_in = 
        Condenser.water_height_pipe.DP;
      Condenser.water_height_pipe.Q*(Condenser.water_height_pipe.h_out-
        Condenser.water_height_pipe.h_in) = Condenser.water_height_pipe.W;
      Condenser.water_height_pipe.h_out-Condenser.water_height_pipe.h_in = 
        Condenser.water_height_pipe.DH;
      Condenser.water_height_pipe.T_out-Condenser.water_height_pipe.T_in = 
        Condenser.water_height_pipe.DT;
      Condenser.water_height_pipe.C_in.Q+Condenser.water_height_pipe.C_out.Q = 0;
      Condenser.water_height_pipe.C_out.Xi_outflow = inStream(Condenser.water_height_pipe.C_in.Xi_outflow);
      assert(Condenser.water_height_pipe.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      Condenser.water_height_pipe.h = Condenser.water_height_pipe.h_in;
      Condenser.water_height_pipe.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.Pipe
    equation
      if ( not Condenser.water_height_pipe.faulty) then 
        Condenser.water_height_pipe.fouling = 0;
      end if;
      Condenser.water_height_pipe.DP_f =  -(1+Condenser.water_height_pipe.fouling
        /100)*Condenser.water_height_pipe.Kfr*Condenser.water_height_pipe.Q*abs(
        Condenser.water_height_pipe.Q)/Condenser.water_height_pipe.rho_in;
      Condenser.water_height_pipe.DP_z =  -Condenser.water_height_pipe.rho_in*
        9.80665*Condenser.water_height_pipe.delta_z;
      Condenser.water_height_pipe.DP = Condenser.water_height_pipe.DP_f+
        Condenser.water_height_pipe.DP_z;
    // end of extends 

  // Component Condenser.incondensables_in
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Condenser.incondensables_in.h_in = inStream(Condenser.incondensables_in.C_in.h_outflow);
      Condenser.incondensables_in.h_out = Condenser.incondensables_in.C_out.h_outflow;
      Condenser.incondensables_in.Q = Condenser.incondensables_in.C_in.Q;
      Condenser.incondensables_in.P_in = Condenser.incondensables_in.C_in.P;
      Condenser.incondensables_in.P_out = Condenser.incondensables_in.C_out.P;
      Condenser.incondensables_in.Xi = inStream(Condenser.incondensables_in.C_in.Xi_outflow);
      Condenser.incondensables_in.C_in.h_outflow = 1000000.0;
      Condenser.incondensables_in.C_in.Xi_outflow = zeros(0);
      Condenser.incondensables_in.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.incondensables_in.P_in, Condenser.incondensables_in.h_in, 
        Condenser.incondensables_in.Xi, 0, 0);
      Condenser.incondensables_in.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.incondensables_in.P_out, Condenser.incondensables_in.h_out, 
        Condenser.incondensables_in.Xi, 0, 0);
      Condenser.incondensables_in.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.incondensables_in.state_in);
      Condenser.incondensables_in.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.incondensables_in.state_out);
      Condenser.incondensables_in.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.incondensables_in.state_in);
      Condenser.incondensables_in.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.incondensables_in.state_out);
      Condenser.incondensables_in.rho = (Condenser.incondensables_in.rho_in+
        Condenser.incondensables_in.rho_out)/2;
      Condenser.incondensables_in.Qv_in = Condenser.incondensables_in.Q/
        Condenser.incondensables_in.rho_in;
      Condenser.incondensables_in.Qv_out =  -Condenser.incondensables_in.Q/
        Condenser.incondensables_in.rho_out;
      Condenser.incondensables_in.Qv = (Condenser.incondensables_in.Qv_in-
        Condenser.incondensables_in.Qv_out)/2;
      Condenser.incondensables_in.P_out-Condenser.incondensables_in.P_in = 
        Condenser.incondensables_in.DP;
      Condenser.incondensables_in.Q*(Condenser.incondensables_in.h_out-
        Condenser.incondensables_in.h_in) = Condenser.incondensables_in.W;
      Condenser.incondensables_in.h_out-Condenser.incondensables_in.h_in = 
        Condenser.incondensables_in.DH;
      Condenser.incondensables_in.T_out-Condenser.incondensables_in.T_in = 
        Condenser.incondensables_in.DT;
      Condenser.incondensables_in.C_in.Q+Condenser.incondensables_in.C_out.Q = 0;
      Condenser.incondensables_in.C_out.Xi_outflow = inStream(Condenser.incondensables_in.C_in.Xi_outflow);
      assert(Condenser.incondensables_in.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      Condenser.incondensables_in.h = Condenser.incondensables_in.h_in;
      Condenser.incondensables_in.DH = 0;
    // end of extends 
  equation
    Condenser.incondensables_in.DP = Condenser.incondensables_in.DP_input;

  // Component Condenser.incondensables_out
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Condenser.incondensables_out.h_in = inStream(Condenser.incondensables_out.C_in.h_outflow);
      Condenser.incondensables_out.h_out = Condenser.incondensables_out.C_out.h_outflow;
      Condenser.incondensables_out.Q = Condenser.incondensables_out.C_in.Q;
      Condenser.incondensables_out.P_in = Condenser.incondensables_out.C_in.P;
      Condenser.incondensables_out.P_out = Condenser.incondensables_out.C_out.P;
      Condenser.incondensables_out.Xi = inStream(Condenser.incondensables_out.C_in.Xi_outflow);
      Condenser.incondensables_out.C_in.h_outflow = 1000000.0;
      Condenser.incondensables_out.C_in.Xi_outflow = zeros(0);
      Condenser.incondensables_out.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.incondensables_out.P_in, Condenser.incondensables_out.h_in, 
        Condenser.incondensables_out.Xi, 0, 0);
      Condenser.incondensables_out.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Condenser.incondensables_out.P_out, Condenser.incondensables_out.h_out,
         Condenser.incondensables_out.Xi, 0, 0);
      Condenser.incondensables_out.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.incondensables_out.state_in);
      Condenser.incondensables_out.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Condenser.incondensables_out.state_out);
      Condenser.incondensables_out.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.incondensables_out.state_in);
      Condenser.incondensables_out.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Condenser.incondensables_out.state_out);
      Condenser.incondensables_out.rho = (Condenser.incondensables_out.rho_in+
        Condenser.incondensables_out.rho_out)/2;
      Condenser.incondensables_out.Qv_in = Condenser.incondensables_out.Q/
        Condenser.incondensables_out.rho_in;
      Condenser.incondensables_out.Qv_out =  -Condenser.incondensables_out.Q/
        Condenser.incondensables_out.rho_out;
      Condenser.incondensables_out.Qv = (Condenser.incondensables_out.Qv_in-
        Condenser.incondensables_out.Qv_out)/2;
      Condenser.incondensables_out.P_out-Condenser.incondensables_out.P_in = 
        Condenser.incondensables_out.DP;
      Condenser.incondensables_out.Q*(Condenser.incondensables_out.h_out-
        Condenser.incondensables_out.h_in) = Condenser.incondensables_out.W;
      Condenser.incondensables_out.h_out-Condenser.incondensables_out.h_in = 
        Condenser.incondensables_out.DH;
      Condenser.incondensables_out.T_out-Condenser.incondensables_out.T_in = 
        Condenser.incondensables_out.DT;
      Condenser.incondensables_out.C_in.Q+Condenser.incondensables_out.C_out.Q
         = 0;
      Condenser.incondensables_out.C_out.Xi_outflow = inStream(Condenser.incondensables_out.C_in.Xi_outflow);
      assert(Condenser.incondensables_out.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      Condenser.incondensables_out.h = Condenser.incondensables_out.h_in;
      Condenser.incondensables_out.DH = 0;
    // end of extends 
  equation
    Condenser.incondensables_out.DP = Condenser.incondensables_out.DP_input;

  // Component Condenser
  // class MetroscopeModelingLibrary.WaterSteam.HeatExchangers.Condenser
  equation
    if ( not Condenser.faulty) then 
      Condenser.fouling = 0;
      Condenser.air_intake = 0;
      Condenser.Qv_cold_in_decrease = 0;
    end if;
    Condenser.Q_cold = Condenser.cold_side.Q;
    Condenser.T_cold_in = Condenser.cold_side.T_in;
    Condenser.T_cold_out = Condenser.cold_side.T_out;
    Condenser.cold_side.Qv = Condenser.Qv_cold_in*(1-Condenser.Qv_cold_in_decrease
      /100);
    Condenser.Q_hot = Condenser.hot_side.Q;
    Condenser.T_hot_in = Condenser.hot_side.T_in;
    Condenser.T_hot_out = Condenser.hot_side.T_out;
    Condenser.cold_side.W = Condenser.W;
    Condenser.P_tot = Condenser.incondensables_in.P_in;
    Condenser.hot_side.W+Condenser.cold_side.W = 0;
    Condenser.cold_side_pipe.delta_z = 0;
    Condenser.cold_side_pipe.Kfr = Condenser.Kfr_cold;
    Condenser.water_height_pipe.delta_z =  -Condenser.water_height;
    Condenser.water_height_pipe.Kfr = 0;
    Condenser.water_height_pipe.DP = Condenser.water_height_DP;
    Condenser.P_incond = Condenser.P_offset+Condenser.R*(Condenser.C_incond+
      Condenser.air_intake)*Condenser.Tsat;
    Condenser.incondensables_in.DP =  -Condenser.P_incond;
    Condenser.incondensables_out.DP = Condenser.P_incond;
    assert(Condenser.T_hot_in-Condenser.Tsat < 0.1, "The steam admitted in the condenser in superheated",
       AssertionLevel.warning);
    Condenser.Psat = Condenser.hot_side.P_in;
    Condenser.Tsat = Modelica.Media.Water.WaterIF97_ph.saturationTemperature_Unique49
      (Condenser.Psat);
    Condenser.hot_side.h_out = Modelica.Media.Water.WaterIF97_ph.bubbleEnthalpy_Unique47
      (
      Modelica.Media.Water.WaterIF97_ph.setSat_p_Unique48(Condenser.Psat));
    0 = Condenser.Tsat-Condenser.T_cold_out-(Condenser.Tsat-Condenser.T_cold_in)
      *exp(Condenser.Kth*(1-Condenser.fouling/100)*Condenser.S*((
      Condenser.T_cold_in-Condenser.T_cold_out)/Condenser.W));
    Condenser.cold_side_pipe.C_in.P = Condenser.C_cold_in.P;
    Condenser.C_cold_in.Q-Condenser.cold_side_pipe.C_in.Q = 0.0;
    Condenser.cold_side.C_out.P = Condenser.C_cold_out.P;
    Condenser.C_cold_out.Q-Condenser.cold_side.C_out.Q = 0.0;
    Condenser.incondensables_in.C_in.P = Condenser.C_hot_in.P;
    Condenser.C_hot_in.Q-Condenser.incondensables_in.C_in.Q = 0.0;
    Condenser.water_height_pipe.C_out.P = Condenser.C_hot_out.P;
    Condenser.C_hot_out.Q-Condenser.water_height_pipe.C_out.Q = 0.0;
    Condenser.cold_side_pipe.C_out.P = Condenser.cold_side.C_in.P;
    Condenser.cold_side.C_in.Q+Condenser.cold_side_pipe.C_out.Q = 0.0;
    Condenser.incondensables_in.C_out.P = Condenser.hot_side.C_in.P;
    Condenser.hot_side.C_in.Q+Condenser.incondensables_in.C_out.Q = 0.0;
    Condenser.incondensables_out.C_in.P = Condenser.hot_side.C_out.P;
    Condenser.hot_side.C_out.Q+Condenser.incondensables_out.C_in.Q = 0.0;
    Condenser.water_height_pipe.C_in.P = Condenser.incondensables_out.C_out.P;
    Condenser.incondensables_out.C_out.Q+Condenser.water_height_pipe.C_in.Q = 
      0.0;

  // Component source2
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Source
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSource
    equation
      source2.C_out.P = source2.P_out;
      source2.C_out.Q = source2.Q_out;
      source2.C_out.h_outflow = source2.h_out;
      source2.C_out.Xi_outflow = source2.Xi_out;
      source2.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (source2.P_out, source2.h_out, source2.Xi_out, 0, 0);
      source2.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        source2.state_out);
      source2.Qv_out = source2.Q_out/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        source2.state_out);
    // end of extends 

  // Component sink
  // class MetroscopeModelingLibrary.WaterSteam.BoundaryConditions.Sink
    // extends MetroscopeModelingLibrary.Partial.BoundaryConditions.FluidSink
    equation
      sink.C_in.P = sink.P_in;
      sink.C_in.Q = sink.Q_in;
      inStream(sink.C_in.h_outflow) = sink.h_in;
      inStream(sink.C_in.Xi_outflow) = sink.Xi_in;
      sink.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        sink.P_in, sink.h_in, sink.Xi_in, 0, 0);
      sink.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        sink.state_in);
      sink.Qv_in = sink.Q_in/Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        sink.state_in);
      sink.C_in.h_outflow = 0;
      sink.C_in.Xi_outflow = zeros(0);
    // end of extends 

  // Component Temp2_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Temp2_sensor.flow_model.h_in = inStream(Temp2_sensor.flow_model.C_in.h_outflow);
      Temp2_sensor.flow_model.h_out = Temp2_sensor.flow_model.C_out.h_outflow;
      Temp2_sensor.flow_model.Q = Temp2_sensor.flow_model.C_in.Q;
      Temp2_sensor.flow_model.P_in = Temp2_sensor.flow_model.C_in.P;
      Temp2_sensor.flow_model.P_out = Temp2_sensor.flow_model.C_out.P;
      Temp2_sensor.flow_model.Xi = inStream(Temp2_sensor.flow_model.C_in.Xi_outflow);
      Temp2_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Temp2_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Temp2_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Temp2_sensor.flow_model.P_in, Temp2_sensor.flow_model.h_in, 
        Temp2_sensor.flow_model.Xi, 0, 0);
      Temp2_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Temp2_sensor.flow_model.P_out, Temp2_sensor.flow_model.h_out, 
        Temp2_sensor.flow_model.Xi, 0, 0);
      Temp2_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Temp2_sensor.flow_model.state_in);
      Temp2_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Temp2_sensor.flow_model.state_out);
      Temp2_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Temp2_sensor.flow_model.state_in);
      Temp2_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Temp2_sensor.flow_model.state_out);
      Temp2_sensor.flow_model.rho = (Temp2_sensor.flow_model.rho_in+
        Temp2_sensor.flow_model.rho_out)/2;
      Temp2_sensor.flow_model.Qv_in = Temp2_sensor.flow_model.Q/Temp2_sensor.flow_model.rho_in;
      Temp2_sensor.flow_model.Qv_out =  -Temp2_sensor.flow_model.Q/
        Temp2_sensor.flow_model.rho_out;
      Temp2_sensor.flow_model.Qv = (Temp2_sensor.flow_model.Qv_in-
        Temp2_sensor.flow_model.Qv_out)/2;
      Temp2_sensor.flow_model.P_out-Temp2_sensor.flow_model.P_in = 
        Temp2_sensor.flow_model.DP;
      Temp2_sensor.flow_model.Q*(Temp2_sensor.flow_model.h_out-Temp2_sensor.flow_model.h_in)
         = Temp2_sensor.flow_model.W;
      Temp2_sensor.flow_model.h_out-Temp2_sensor.flow_model.h_in = 
        Temp2_sensor.flow_model.DH;
      Temp2_sensor.flow_model.T_out-Temp2_sensor.flow_model.T_in = 
        Temp2_sensor.flow_model.DT;
      Temp2_sensor.flow_model.C_in.Q+Temp2_sensor.flow_model.C_out.Q = 0;
      Temp2_sensor.flow_model.C_out.Xi_outflow = inStream(Temp2_sensor.flow_model.C_in.Xi_outflow);
      assert(Temp2_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Temp2_sensor.flow_model.P = Temp2_sensor.flow_model.P_in;
      Temp2_sensor.flow_model.h = Temp2_sensor.flow_model.h_in;
      Temp2_sensor.flow_model.T = Temp2_sensor.flow_model.T_in;
      Temp2_sensor.flow_model.DP = 0;
      Temp2_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Temp2_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Temp2_sensor.faulty_flow_rate) then 
        Temp2_sensor.mass_flow_rate_bias = 0;
      end if;
      Temp2_sensor.P = Temp2_sensor.C_in.P;
      Temp2_sensor.Q = Temp2_sensor.C_in.Q+Temp2_sensor.mass_flow_rate_bias;
      Temp2_sensor.Xi = inStream(Temp2_sensor.C_in.Xi_outflow);
      Temp2_sensor.h = inStream(Temp2_sensor.C_in.h_outflow);
      Temp2_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Temp2_sensor.P, Temp2_sensor.h, Temp2_sensor.Xi, 0, 0);
      assert(Temp2_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      Temp2_sensor.T = Temp2_sensor.flow_model.T;
      Temp2_sensor.T_degC+273.15 = Temp2_sensor.T;
      Temp2_sensor.T_degF = Temp2_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    Temp2_sensor.flow_model.C_in.P = Temp2_sensor.C_in.P;
    Temp2_sensor.C_in.Q-Temp2_sensor.flow_model.C_in.Q = 0.0;
    Temp2_sensor.flow_model.C_out.P = Temp2_sensor.C_out.P;
    Temp2_sensor.C_out.Q-Temp2_sensor.flow_model.C_out.Q = 0.0;

  // Component Press2_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Press2_sensor.flow_model.h_in = inStream(Press2_sensor.flow_model.C_in.h_outflow);
      Press2_sensor.flow_model.h_out = Press2_sensor.flow_model.C_out.h_outflow;
      Press2_sensor.flow_model.Q = Press2_sensor.flow_model.C_in.Q;
      Press2_sensor.flow_model.P_in = Press2_sensor.flow_model.C_in.P;
      Press2_sensor.flow_model.P_out = Press2_sensor.flow_model.C_out.P;
      Press2_sensor.flow_model.Xi = inStream(Press2_sensor.flow_model.C_in.Xi_outflow);
      Press2_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Press2_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Press2_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press2_sensor.flow_model.P_in, Press2_sensor.flow_model.h_in, 
        Press2_sensor.flow_model.Xi, 0, 0);
      Press2_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press2_sensor.flow_model.P_out, Press2_sensor.flow_model.h_out, 
        Press2_sensor.flow_model.Xi, 0, 0);
      Press2_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press2_sensor.flow_model.state_in);
      Press2_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press2_sensor.flow_model.state_out);
      Press2_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press2_sensor.flow_model.state_in);
      Press2_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press2_sensor.flow_model.state_out);
      Press2_sensor.flow_model.rho = (Press2_sensor.flow_model.rho_in+
        Press2_sensor.flow_model.rho_out)/2;
      Press2_sensor.flow_model.Qv_in = Press2_sensor.flow_model.Q/
        Press2_sensor.flow_model.rho_in;
      Press2_sensor.flow_model.Qv_out =  -Press2_sensor.flow_model.Q/
        Press2_sensor.flow_model.rho_out;
      Press2_sensor.flow_model.Qv = (Press2_sensor.flow_model.Qv_in-
        Press2_sensor.flow_model.Qv_out)/2;
      Press2_sensor.flow_model.P_out-Press2_sensor.flow_model.P_in = 
        Press2_sensor.flow_model.DP;
      Press2_sensor.flow_model.Q*(Press2_sensor.flow_model.h_out-
        Press2_sensor.flow_model.h_in) = Press2_sensor.flow_model.W;
      Press2_sensor.flow_model.h_out-Press2_sensor.flow_model.h_in = 
        Press2_sensor.flow_model.DH;
      Press2_sensor.flow_model.T_out-Press2_sensor.flow_model.T_in = 
        Press2_sensor.flow_model.DT;
      Press2_sensor.flow_model.C_in.Q+Press2_sensor.flow_model.C_out.Q = 0;
      Press2_sensor.flow_model.C_out.Xi_outflow = inStream(Press2_sensor.flow_model.C_in.Xi_outflow);
      assert(Press2_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Press2_sensor.flow_model.P = Press2_sensor.flow_model.P_in;
      Press2_sensor.flow_model.h = Press2_sensor.flow_model.h_in;
      Press2_sensor.flow_model.T = Press2_sensor.flow_model.T_in;
      Press2_sensor.flow_model.DP = 0;
      Press2_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Press2_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Press2_sensor.faulty_flow_rate) then 
        Press2_sensor.mass_flow_rate_bias = 0;
      end if;
      Press2_sensor.P = Press2_sensor.C_in.P;
      Press2_sensor.Q = Press2_sensor.C_in.Q+Press2_sensor.mass_flow_rate_bias;
      Press2_sensor.Xi = inStream(Press2_sensor.C_in.Xi_outflow);
      Press2_sensor.h = inStream(Press2_sensor.C_in.h_outflow);
      Press2_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press2_sensor.P, Press2_sensor.h, Press2_sensor.Xi, 0, 0);
      assert(Press2_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Press2_sensor.P_barA = Press2_sensor.P*1E-05;
      Press2_sensor.P_psiA = Press2_sensor.P*0.000145038;
      Press2_sensor.P_MPaA = Press2_sensor.P*1E-06;
      Press2_sensor.P_kPaA = Press2_sensor.P*0.001;
      Press2_sensor.P_barG = Press2_sensor.P_barA-1;
      Press2_sensor.P_psiG = Press2_sensor.P_psiA-14.50377377;
      Press2_sensor.P_MPaG = Press2_sensor.P_MPaA-0.1;
      Press2_sensor.P_kPaG = Press2_sensor.P_kPaA-100;
      Press2_sensor.P_mbar = Press2_sensor.P*0.01;
      Press2_sensor.P_inHg = Press2_sensor.P*0.0002953006;
    // end of extends 
  equation
    Press2_sensor.flow_model.C_in.P = Press2_sensor.C_in.P;
    Press2_sensor.C_in.Q-Press2_sensor.flow_model.C_in.Q = 0.0;
    Press2_sensor.flow_model.C_out.P = Press2_sensor.C_out.P;
    Press2_sensor.C_out.Q-Press2_sensor.flow_model.C_out.Q = 0.0;

  // Component Flow2_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Flow2_sensor.flow_model.h_in = inStream(Flow2_sensor.flow_model.C_in.h_outflow);
      Flow2_sensor.flow_model.h_out = Flow2_sensor.flow_model.C_out.h_outflow;
      Flow2_sensor.flow_model.Q = Flow2_sensor.flow_model.C_in.Q;
      Flow2_sensor.flow_model.P_in = Flow2_sensor.flow_model.C_in.P;
      Flow2_sensor.flow_model.P_out = Flow2_sensor.flow_model.C_out.P;
      Flow2_sensor.flow_model.Xi = inStream(Flow2_sensor.flow_model.C_in.Xi_outflow);
      Flow2_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Flow2_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Flow2_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Flow2_sensor.flow_model.P_in, Flow2_sensor.flow_model.h_in, 
        Flow2_sensor.flow_model.Xi, 0, 0);
      Flow2_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Flow2_sensor.flow_model.P_out, Flow2_sensor.flow_model.h_out, 
        Flow2_sensor.flow_model.Xi, 0, 0);
      Flow2_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Flow2_sensor.flow_model.state_in);
      Flow2_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Flow2_sensor.flow_model.state_out);
      Flow2_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Flow2_sensor.flow_model.state_in);
      Flow2_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Flow2_sensor.flow_model.state_out);
      Flow2_sensor.flow_model.rho = (Flow2_sensor.flow_model.rho_in+
        Flow2_sensor.flow_model.rho_out)/2;
      Flow2_sensor.flow_model.Qv_in = Flow2_sensor.flow_model.Q/Flow2_sensor.flow_model.rho_in;
      Flow2_sensor.flow_model.Qv_out =  -Flow2_sensor.flow_model.Q/
        Flow2_sensor.flow_model.rho_out;
      Flow2_sensor.flow_model.Qv = (Flow2_sensor.flow_model.Qv_in-
        Flow2_sensor.flow_model.Qv_out)/2;
      Flow2_sensor.flow_model.P_out-Flow2_sensor.flow_model.P_in = 
        Flow2_sensor.flow_model.DP;
      Flow2_sensor.flow_model.Q*(Flow2_sensor.flow_model.h_out-Flow2_sensor.flow_model.h_in)
         = Flow2_sensor.flow_model.W;
      Flow2_sensor.flow_model.h_out-Flow2_sensor.flow_model.h_in = 
        Flow2_sensor.flow_model.DH;
      Flow2_sensor.flow_model.T_out-Flow2_sensor.flow_model.T_in = 
        Flow2_sensor.flow_model.DT;
      Flow2_sensor.flow_model.C_in.Q+Flow2_sensor.flow_model.C_out.Q = 0;
      Flow2_sensor.flow_model.C_out.Xi_outflow = inStream(Flow2_sensor.flow_model.C_in.Xi_outflow);
      assert(Flow2_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Flow2_sensor.flow_model.P = Flow2_sensor.flow_model.P_in;
      Flow2_sensor.flow_model.h = Flow2_sensor.flow_model.h_in;
      Flow2_sensor.flow_model.T = Flow2_sensor.flow_model.T_in;
      Flow2_sensor.flow_model.DP = 0;
      Flow2_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Flow2_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Flow2_sensor.faulty_flow_rate) then 
        Flow2_sensor.mass_flow_rate_bias = 0;
      end if;
      Flow2_sensor.P = Flow2_sensor.C_in.P;
      Flow2_sensor.Q = Flow2_sensor.C_in.Q+Flow2_sensor.mass_flow_rate_bias;
      Flow2_sensor.Xi = inStream(Flow2_sensor.C_in.Xi_outflow);
      Flow2_sensor.h = inStream(Flow2_sensor.C_in.h_outflow);
      Flow2_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Flow2_sensor.P, Flow2_sensor.h, Flow2_sensor.Xi, 0, 0);
      assert(Flow2_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Flow2_sensor.Qv = Flow2_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Flow2_sensor.state);
      Flow2_sensor.Q_lm = Flow2_sensor.Qv*60000;
      Flow2_sensor.Q_th = Flow2_sensor.Q*3.6;
      Flow2_sensor.Q_lbs = Flow2_sensor.Q*0.453592428;
      Flow2_sensor.Q_Mlbh = Flow2_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Flow2_sensor.flow_model.C_in.P = Flow2_sensor.C_in.P;
    Flow2_sensor.C_in.Q-Flow2_sensor.flow_model.C_in.Q = 0.0;
    Flow2_sensor.flow_model.C_out.P = Flow2_sensor.C_out.P;
    Flow2_sensor.C_out.Q-Flow2_sensor.flow_model.C_out.Q = 0.0;

  // Component Flow1_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Flow1_sensor.flow_model.h_in = inStream(Flow1_sensor.flow_model.C_in.h_outflow);
      Flow1_sensor.flow_model.h_out = Flow1_sensor.flow_model.C_out.h_outflow;
      Flow1_sensor.flow_model.Q = Flow1_sensor.flow_model.C_in.Q;
      Flow1_sensor.flow_model.P_in = Flow1_sensor.flow_model.C_in.P;
      Flow1_sensor.flow_model.P_out = Flow1_sensor.flow_model.C_out.P;
      Flow1_sensor.flow_model.Xi = inStream(Flow1_sensor.flow_model.C_in.Xi_outflow);
      Flow1_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Flow1_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Flow1_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Flow1_sensor.flow_model.P_in, Flow1_sensor.flow_model.h_in, 
        Flow1_sensor.flow_model.Xi, 0, 0);
      Flow1_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Flow1_sensor.flow_model.P_out, Flow1_sensor.flow_model.h_out, 
        Flow1_sensor.flow_model.Xi, 0, 0);
      Flow1_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Flow1_sensor.flow_model.state_in);
      Flow1_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Flow1_sensor.flow_model.state_out);
      Flow1_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Flow1_sensor.flow_model.state_in);
      Flow1_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Flow1_sensor.flow_model.state_out);
      Flow1_sensor.flow_model.rho = (Flow1_sensor.flow_model.rho_in+
        Flow1_sensor.flow_model.rho_out)/2;
      Flow1_sensor.flow_model.Qv_in = Flow1_sensor.flow_model.Q/Flow1_sensor.flow_model.rho_in;
      Flow1_sensor.flow_model.Qv_out =  -Flow1_sensor.flow_model.Q/
        Flow1_sensor.flow_model.rho_out;
      Flow1_sensor.flow_model.Qv = (Flow1_sensor.flow_model.Qv_in-
        Flow1_sensor.flow_model.Qv_out)/2;
      Flow1_sensor.flow_model.P_out-Flow1_sensor.flow_model.P_in = 
        Flow1_sensor.flow_model.DP;
      Flow1_sensor.flow_model.Q*(Flow1_sensor.flow_model.h_out-Flow1_sensor.flow_model.h_in)
         = Flow1_sensor.flow_model.W;
      Flow1_sensor.flow_model.h_out-Flow1_sensor.flow_model.h_in = 
        Flow1_sensor.flow_model.DH;
      Flow1_sensor.flow_model.T_out-Flow1_sensor.flow_model.T_in = 
        Flow1_sensor.flow_model.DT;
      Flow1_sensor.flow_model.C_in.Q+Flow1_sensor.flow_model.C_out.Q = 0;
      Flow1_sensor.flow_model.C_out.Xi_outflow = inStream(Flow1_sensor.flow_model.C_in.Xi_outflow);
      assert(Flow1_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Flow1_sensor.flow_model.P = Flow1_sensor.flow_model.P_in;
      Flow1_sensor.flow_model.h = Flow1_sensor.flow_model.h_in;
      Flow1_sensor.flow_model.T = Flow1_sensor.flow_model.T_in;
      Flow1_sensor.flow_model.DP = 0;
      Flow1_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Flow1_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Flow1_sensor.faulty_flow_rate) then 
        Flow1_sensor.mass_flow_rate_bias = 0;
      end if;
      Flow1_sensor.P = Flow1_sensor.C_in.P;
      Flow1_sensor.Q = Flow1_sensor.C_in.Q+Flow1_sensor.mass_flow_rate_bias;
      Flow1_sensor.Xi = inStream(Flow1_sensor.C_in.Xi_outflow);
      Flow1_sensor.h = inStream(Flow1_sensor.C_in.h_outflow);
      Flow1_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Flow1_sensor.P, Flow1_sensor.h, Flow1_sensor.Xi, 0, 0);
      assert(Flow1_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Flow1_sensor.Qv = Flow1_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Flow1_sensor.state);
      Flow1_sensor.Q_lm = Flow1_sensor.Qv*60000;
      Flow1_sensor.Q_th = Flow1_sensor.Q*3.6;
      Flow1_sensor.Q_lbs = Flow1_sensor.Q*0.453592428;
      Flow1_sensor.Q_Mlbh = Flow1_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Flow1_sensor.flow_model.C_in.P = Flow1_sensor.C_in.P;
    Flow1_sensor.C_in.Q-Flow1_sensor.flow_model.C_in.Q = 0.0;
    Flow1_sensor.flow_model.C_out.P = Flow1_sensor.C_out.P;
    Flow1_sensor.C_out.Q-Flow1_sensor.flow_model.C_out.Q = 0.0;

  // Component V422_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V422_valve.h_in = inStream(V422_valve.C_in.h_outflow);
      V422_valve.h_out = V422_valve.C_out.h_outflow;
      V422_valve.Q = V422_valve.C_in.Q;
      V422_valve.P_in = V422_valve.C_in.P;
      V422_valve.P_out = V422_valve.C_out.P;
      V422_valve.Xi = inStream(V422_valve.C_in.Xi_outflow);
      V422_valve.C_in.h_outflow = 1000000.0;
      V422_valve.C_in.Xi_outflow = zeros(0);
      V422_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_valve.P_in, V422_valve.h_in, V422_valve.Xi, 0, 0);
      V422_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_valve.P_out, V422_valve.h_out, V422_valve.Xi, 0, 0);
      V422_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V422_valve.state_in);
      V422_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V422_valve.state_out);
      V422_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V422_valve.state_in);
      V422_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V422_valve.state_out);
      V422_valve.rho = (V422_valve.rho_in+V422_valve.rho_out)/2;
      V422_valve.Qv_in = V422_valve.Q/V422_valve.rho_in;
      V422_valve.Qv_out =  -V422_valve.Q/V422_valve.rho_out;
      V422_valve.Qv = (V422_valve.Qv_in-V422_valve.Qv_out)/2;
      V422_valve.P_out-V422_valve.P_in = V422_valve.DP;
      V422_valve.Q*(V422_valve.h_out-V422_valve.h_in) = V422_valve.W;
      V422_valve.h_out-V422_valve.h_in = V422_valve.DH;
      V422_valve.T_out-V422_valve.T_in = V422_valve.DT;
      V422_valve.C_in.Q+V422_valve.C_out.Q = 0;
      V422_valve.C_out.Xi_outflow = inStream(V422_valve.C_in.Xi_outflow);
      assert(V422_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V422_valve.h = V422_valve.h_in;
      V422_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V422_valve.DP*V422_valve.Cv*abs(V422_valve.Cv) =  -1733000000000.0*abs(
        V422_valve.Q)*V422_valve.Q/V422_valve.rho_in^2;
      V422_valve.Cv = V422_valve.Opening*V422_valve.Cv_max;
    // end of extends 

  // Component V423_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V423_valve.h_in = inStream(V423_valve.C_in.h_outflow);
      V423_valve.h_out = V423_valve.C_out.h_outflow;
      V423_valve.Q = V423_valve.C_in.Q;
      V423_valve.P_in = V423_valve.C_in.P;
      V423_valve.P_out = V423_valve.C_out.P;
      V423_valve.Xi = inStream(V423_valve.C_in.Xi_outflow);
      V423_valve.C_in.h_outflow = 1000000.0;
      V423_valve.C_in.Xi_outflow = zeros(0);
      V423_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V423_valve.P_in, V423_valve.h_in, V423_valve.Xi, 0, 0);
      V423_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V423_valve.P_out, V423_valve.h_out, V423_valve.Xi, 0, 0);
      V423_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V423_valve.state_in);
      V423_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V423_valve.state_out);
      V423_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V423_valve.state_in);
      V423_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V423_valve.state_out);
      V423_valve.rho = (V423_valve.rho_in+V423_valve.rho_out)/2;
      V423_valve.Qv_in = V423_valve.Q/V423_valve.rho_in;
      V423_valve.Qv_out =  -V423_valve.Q/V423_valve.rho_out;
      V423_valve.Qv = (V423_valve.Qv_in-V423_valve.Qv_out)/2;
      V423_valve.P_out-V423_valve.P_in = V423_valve.DP;
      V423_valve.Q*(V423_valve.h_out-V423_valve.h_in) = V423_valve.W;
      V423_valve.h_out-V423_valve.h_in = V423_valve.DH;
      V423_valve.T_out-V423_valve.T_in = V423_valve.DT;
      V423_valve.C_in.Q+V423_valve.C_out.Q = 0;
      V423_valve.C_out.Xi_outflow = inStream(V423_valve.C_in.Xi_outflow);
      assert(V423_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V423_valve.h = V423_valve.h_in;
      V423_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V423_valve.DP*V423_valve.Cv*abs(V423_valve.Cv) =  -1733000000000.0*abs(
        V423_valve.Q)*V423_valve.Q/V423_valve.rho_in^2;
      V423_valve.Cv = V423_valve.Opening*V423_valve.Cv_max;
    // end of extends 

  // Component CEC197_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC197_sensor.flow_model.h_in = inStream(CEC197_sensor.flow_model.C_in.h_outflow);
      CEC197_sensor.flow_model.h_out = CEC197_sensor.flow_model.C_out.h_outflow;
      CEC197_sensor.flow_model.Q = CEC197_sensor.flow_model.C_in.Q;
      CEC197_sensor.flow_model.P_in = CEC197_sensor.flow_model.C_in.P;
      CEC197_sensor.flow_model.P_out = CEC197_sensor.flow_model.C_out.P;
      CEC197_sensor.flow_model.Xi = inStream(CEC197_sensor.flow_model.C_in.Xi_outflow);
      CEC197_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC197_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC197_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.flow_model.P_in, CEC197_sensor.flow_model.h_in, 
        CEC197_sensor.flow_model.Xi, 0, 0);
      CEC197_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.flow_model.P_out, CEC197_sensor.flow_model.h_out, 
        CEC197_sensor.flow_model.Xi, 0, 0);
      CEC197_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC197_sensor.flow_model.state_in);
      CEC197_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC197_sensor.flow_model.state_out);
      CEC197_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.flow_model.state_in);
      CEC197_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.flow_model.state_out);
      CEC197_sensor.flow_model.rho = (CEC197_sensor.flow_model.rho_in+
        CEC197_sensor.flow_model.rho_out)/2;
      CEC197_sensor.flow_model.Qv_in = CEC197_sensor.flow_model.Q/
        CEC197_sensor.flow_model.rho_in;
      CEC197_sensor.flow_model.Qv_out =  -CEC197_sensor.flow_model.Q/
        CEC197_sensor.flow_model.rho_out;
      CEC197_sensor.flow_model.Qv = (CEC197_sensor.flow_model.Qv_in-
        CEC197_sensor.flow_model.Qv_out)/2;
      CEC197_sensor.flow_model.P_out-CEC197_sensor.flow_model.P_in = 
        CEC197_sensor.flow_model.DP;
      CEC197_sensor.flow_model.Q*(CEC197_sensor.flow_model.h_out-
        CEC197_sensor.flow_model.h_in) = CEC197_sensor.flow_model.W;
      CEC197_sensor.flow_model.h_out-CEC197_sensor.flow_model.h_in = 
        CEC197_sensor.flow_model.DH;
      CEC197_sensor.flow_model.T_out-CEC197_sensor.flow_model.T_in = 
        CEC197_sensor.flow_model.DT;
      CEC197_sensor.flow_model.C_in.Q+CEC197_sensor.flow_model.C_out.Q = 0;
      CEC197_sensor.flow_model.C_out.Xi_outflow = inStream(CEC197_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC197_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC197_sensor.flow_model.P = CEC197_sensor.flow_model.P_in;
      CEC197_sensor.flow_model.h = CEC197_sensor.flow_model.h_in;
      CEC197_sensor.flow_model.T = CEC197_sensor.flow_model.T_in;
      CEC197_sensor.flow_model.DP = 0;
      CEC197_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC197_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC197_sensor.faulty_flow_rate) then 
        CEC197_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC197_sensor.P = CEC197_sensor.C_in.P;
      CEC197_sensor.Q = CEC197_sensor.C_in.Q+CEC197_sensor.mass_flow_rate_bias;
      CEC197_sensor.Xi = inStream(CEC197_sensor.C_in.Xi_outflow);
      CEC197_sensor.h = inStream(CEC197_sensor.C_in.h_outflow);
      CEC197_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC197_sensor.P, CEC197_sensor.h, CEC197_sensor.Xi, 0, 0);
      assert(CEC197_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      CEC197_sensor.Qv = CEC197_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC197_sensor.state);
      CEC197_sensor.Q_lm = CEC197_sensor.Qv*60000;
      CEC197_sensor.Q_th = CEC197_sensor.Q*3.6;
      CEC197_sensor.Q_lbs = CEC197_sensor.Q*0.453592428;
      CEC197_sensor.Q_Mlbh = CEC197_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    CEC197_sensor.flow_model.C_in.P = CEC197_sensor.C_in.P;
    CEC197_sensor.C_in.Q-CEC197_sensor.flow_model.C_in.Q = 0.0;
    CEC197_sensor.flow_model.C_out.P = CEC197_sensor.C_out.P;
    CEC197_sensor.C_out.Q-CEC197_sensor.flow_model.C_out.Q = 0.0;

  // Component V422_Flow_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V422_Flow_sensor.flow_model.h_in = inStream(V422_Flow_sensor.flow_model.C_in.h_outflow);
      V422_Flow_sensor.flow_model.h_out = V422_Flow_sensor.flow_model.C_out.h_outflow;
      V422_Flow_sensor.flow_model.Q = V422_Flow_sensor.flow_model.C_in.Q;
      V422_Flow_sensor.flow_model.P_in = V422_Flow_sensor.flow_model.C_in.P;
      V422_Flow_sensor.flow_model.P_out = V422_Flow_sensor.flow_model.C_out.P;
      V422_Flow_sensor.flow_model.Xi = inStream(V422_Flow_sensor.flow_model.C_in.Xi_outflow);
      V422_Flow_sensor.flow_model.C_in.h_outflow = 1000000.0;
      V422_Flow_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      V422_Flow_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_Flow_sensor.flow_model.P_in, V422_Flow_sensor.flow_model.h_in, 
        V422_Flow_sensor.flow_model.Xi, 0, 0);
      V422_Flow_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_Flow_sensor.flow_model.P_out, V422_Flow_sensor.flow_model.h_out, 
        V422_Flow_sensor.flow_model.Xi, 0, 0);
      V422_Flow_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        V422_Flow_sensor.flow_model.state_in);
      V422_Flow_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        V422_Flow_sensor.flow_model.state_out);
      V422_Flow_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        V422_Flow_sensor.flow_model.state_in);
      V422_Flow_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        V422_Flow_sensor.flow_model.state_out);
      V422_Flow_sensor.flow_model.rho = (V422_Flow_sensor.flow_model.rho_in+
        V422_Flow_sensor.flow_model.rho_out)/2;
      V422_Flow_sensor.flow_model.Qv_in = V422_Flow_sensor.flow_model.Q/
        V422_Flow_sensor.flow_model.rho_in;
      V422_Flow_sensor.flow_model.Qv_out =  -V422_Flow_sensor.flow_model.Q/
        V422_Flow_sensor.flow_model.rho_out;
      V422_Flow_sensor.flow_model.Qv = (V422_Flow_sensor.flow_model.Qv_in-
        V422_Flow_sensor.flow_model.Qv_out)/2;
      V422_Flow_sensor.flow_model.P_out-V422_Flow_sensor.flow_model.P_in = 
        V422_Flow_sensor.flow_model.DP;
      V422_Flow_sensor.flow_model.Q*(V422_Flow_sensor.flow_model.h_out-
        V422_Flow_sensor.flow_model.h_in) = V422_Flow_sensor.flow_model.W;
      V422_Flow_sensor.flow_model.h_out-V422_Flow_sensor.flow_model.h_in = 
        V422_Flow_sensor.flow_model.DH;
      V422_Flow_sensor.flow_model.T_out-V422_Flow_sensor.flow_model.T_in = 
        V422_Flow_sensor.flow_model.DT;
      V422_Flow_sensor.flow_model.C_in.Q+V422_Flow_sensor.flow_model.C_out.Q = 0;
      V422_Flow_sensor.flow_model.C_out.Xi_outflow = inStream(V422_Flow_sensor.flow_model.C_in.Xi_outflow);
      assert(V422_Flow_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      V422_Flow_sensor.flow_model.P = V422_Flow_sensor.flow_model.P_in;
      V422_Flow_sensor.flow_model.h = V422_Flow_sensor.flow_model.h_in;
      V422_Flow_sensor.flow_model.T = V422_Flow_sensor.flow_model.T_in;
      V422_Flow_sensor.flow_model.DP = 0;
      V422_Flow_sensor.flow_model.DH = 0;
    // end of extends 

  // Component V422_Flow_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not V422_Flow_sensor.faulty_flow_rate) then 
        V422_Flow_sensor.mass_flow_rate_bias = 0;
      end if;
      V422_Flow_sensor.P = V422_Flow_sensor.C_in.P;
      V422_Flow_sensor.Q = V422_Flow_sensor.C_in.Q+V422_Flow_sensor.mass_flow_rate_bias;
      V422_Flow_sensor.Xi = inStream(V422_Flow_sensor.C_in.Xi_outflow);
      V422_Flow_sensor.h = inStream(V422_Flow_sensor.C_in.h_outflow);
      V422_Flow_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V422_Flow_sensor.P, V422_Flow_sensor.h, V422_Flow_sensor.Xi, 0, 0);
      assert(V422_Flow_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      V422_Flow_sensor.Qv = V422_Flow_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        V422_Flow_sensor.state);
      V422_Flow_sensor.Q_lm = V422_Flow_sensor.Qv*60000;
      V422_Flow_sensor.Q_th = V422_Flow_sensor.Q*3.6;
      V422_Flow_sensor.Q_lbs = V422_Flow_sensor.Q*0.453592428;
      V422_Flow_sensor.Q_Mlbh = V422_Flow_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    V422_Flow_sensor.flow_model.C_in.P = V422_Flow_sensor.C_in.P;
    V422_Flow_sensor.C_in.Q-V422_Flow_sensor.flow_model.C_in.Q = 0.0;
    V422_Flow_sensor.flow_model.C_out.P = V422_Flow_sensor.C_out.P;
    V422_Flow_sensor.C_out.Q-V422_Flow_sensor.flow_model.C_out.Q = 0.0;

  // Component Q_reject_press_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_reject_press_sensor.flow_model.h_in = inStream(Q_reject_press_sensor.flow_model.C_in.h_outflow);
      Q_reject_press_sensor.flow_model.h_out = Q_reject_press_sensor.flow_model.C_out.h_outflow;
      Q_reject_press_sensor.flow_model.Q = Q_reject_press_sensor.flow_model.C_in.Q;
      Q_reject_press_sensor.flow_model.P_in = Q_reject_press_sensor.flow_model.C_in.P;
      Q_reject_press_sensor.flow_model.P_out = Q_reject_press_sensor.flow_model.C_out.P;
      Q_reject_press_sensor.flow_model.Xi = inStream(Q_reject_press_sensor.flow_model.C_in.Xi_outflow);
      Q_reject_press_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_reject_press_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_reject_press_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.flow_model.P_in, Q_reject_press_sensor.flow_model.h_in,
         Q_reject_press_sensor.flow_model.Xi, 0, 0);
      Q_reject_press_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.flow_model.P_out, Q_reject_press_sensor.flow_model.h_out,
         Q_reject_press_sensor.flow_model.Xi, 0, 0);
      Q_reject_press_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_press_sensor.flow_model.state_in);
      Q_reject_press_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_reject_press_sensor.flow_model.state_out);
      Q_reject_press_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_press_sensor.flow_model.state_in);
      Q_reject_press_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_reject_press_sensor.flow_model.state_out);
      Q_reject_press_sensor.flow_model.rho = (Q_reject_press_sensor.flow_model.rho_in
        +Q_reject_press_sensor.flow_model.rho_out)/2;
      Q_reject_press_sensor.flow_model.Qv_in = Q_reject_press_sensor.flow_model.Q
        /Q_reject_press_sensor.flow_model.rho_in;
      Q_reject_press_sensor.flow_model.Qv_out =  -Q_reject_press_sensor.flow_model.Q
        /Q_reject_press_sensor.flow_model.rho_out;
      Q_reject_press_sensor.flow_model.Qv = (Q_reject_press_sensor.flow_model.Qv_in
        -Q_reject_press_sensor.flow_model.Qv_out)/2;
      Q_reject_press_sensor.flow_model.P_out-Q_reject_press_sensor.flow_model.P_in
         = Q_reject_press_sensor.flow_model.DP;
      Q_reject_press_sensor.flow_model.Q*(Q_reject_press_sensor.flow_model.h_out
        -Q_reject_press_sensor.flow_model.h_in) = Q_reject_press_sensor.flow_model.W;
      Q_reject_press_sensor.flow_model.h_out-Q_reject_press_sensor.flow_model.h_in
         = Q_reject_press_sensor.flow_model.DH;
      Q_reject_press_sensor.flow_model.T_out-Q_reject_press_sensor.flow_model.T_in
         = Q_reject_press_sensor.flow_model.DT;
      Q_reject_press_sensor.flow_model.C_in.Q+Q_reject_press_sensor.flow_model.C_out.Q
         = 0;
      Q_reject_press_sensor.flow_model.C_out.Xi_outflow = inStream(
        Q_reject_press_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_reject_press_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_reject_press_sensor.flow_model.P = Q_reject_press_sensor.flow_model.P_in;
      Q_reject_press_sensor.flow_model.h = Q_reject_press_sensor.flow_model.h_in;
      Q_reject_press_sensor.flow_model.T = Q_reject_press_sensor.flow_model.T_in;
      Q_reject_press_sensor.flow_model.DP = 0;
      Q_reject_press_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_reject_press_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_reject_press_sensor.faulty_flow_rate) then 
        Q_reject_press_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_reject_press_sensor.P = Q_reject_press_sensor.C_in.P;
      Q_reject_press_sensor.Q = Q_reject_press_sensor.C_in.Q+Q_reject_press_sensor.mass_flow_rate_bias;
      Q_reject_press_sensor.Xi = inStream(Q_reject_press_sensor.C_in.Xi_outflow);
      Q_reject_press_sensor.h = inStream(Q_reject_press_sensor.C_in.h_outflow);
      Q_reject_press_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_reject_press_sensor.P, Q_reject_press_sensor.h, Q_reject_press_sensor.Xi,
         0, 0);
      assert(Q_reject_press_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Q_reject_press_sensor.P_barA = Q_reject_press_sensor.P*1E-05;
      Q_reject_press_sensor.P_psiA = Q_reject_press_sensor.P*0.000145038;
      Q_reject_press_sensor.P_MPaA = Q_reject_press_sensor.P*1E-06;
      Q_reject_press_sensor.P_kPaA = Q_reject_press_sensor.P*0.001;
      Q_reject_press_sensor.P_barG = Q_reject_press_sensor.P_barA-1;
      Q_reject_press_sensor.P_psiG = Q_reject_press_sensor.P_psiA-14.50377377;
      Q_reject_press_sensor.P_MPaG = Q_reject_press_sensor.P_MPaA-0.1;
      Q_reject_press_sensor.P_kPaG = Q_reject_press_sensor.P_kPaA-100;
      Q_reject_press_sensor.P_mbar = Q_reject_press_sensor.P*0.01;
      Q_reject_press_sensor.P_inHg = Q_reject_press_sensor.P*0.0002953006;
    // end of extends 
  equation
    Q_reject_press_sensor.flow_model.C_in.P = Q_reject_press_sensor.C_in.P;
    Q_reject_press_sensor.C_in.Q-Q_reject_press_sensor.flow_model.C_in.Q = 0.0;
    Q_reject_press_sensor.flow_model.C_out.P = Q_reject_press_sensor.C_out.P;
    Q_reject_press_sensor.C_out.Q-Q_reject_press_sensor.flow_model.C_out.Q = 0.0;

  // Component SP189_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    SP189_sensor.Opening_pc = SP189_sensor.Opening*100;

  // Component CEC195_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    CEC195_sensor.Opening_pc = CEC195_sensor.Opening*100;

  // Component Temp1_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Temp1_sensor.flow_model.h_in = inStream(Temp1_sensor.flow_model.C_in.h_outflow);
      Temp1_sensor.flow_model.h_out = Temp1_sensor.flow_model.C_out.h_outflow;
      Temp1_sensor.flow_model.Q = Temp1_sensor.flow_model.C_in.Q;
      Temp1_sensor.flow_model.P_in = Temp1_sensor.flow_model.C_in.P;
      Temp1_sensor.flow_model.P_out = Temp1_sensor.flow_model.C_out.P;
      Temp1_sensor.flow_model.Xi = inStream(Temp1_sensor.flow_model.C_in.Xi_outflow);
      Temp1_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Temp1_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Temp1_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Temp1_sensor.flow_model.P_in, Temp1_sensor.flow_model.h_in, 
        Temp1_sensor.flow_model.Xi, 0, 0);
      Temp1_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Temp1_sensor.flow_model.P_out, Temp1_sensor.flow_model.h_out, 
        Temp1_sensor.flow_model.Xi, 0, 0);
      Temp1_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Temp1_sensor.flow_model.state_in);
      Temp1_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Temp1_sensor.flow_model.state_out);
      Temp1_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Temp1_sensor.flow_model.state_in);
      Temp1_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Temp1_sensor.flow_model.state_out);
      Temp1_sensor.flow_model.rho = (Temp1_sensor.flow_model.rho_in+
        Temp1_sensor.flow_model.rho_out)/2;
      Temp1_sensor.flow_model.Qv_in = Temp1_sensor.flow_model.Q/Temp1_sensor.flow_model.rho_in;
      Temp1_sensor.flow_model.Qv_out =  -Temp1_sensor.flow_model.Q/
        Temp1_sensor.flow_model.rho_out;
      Temp1_sensor.flow_model.Qv = (Temp1_sensor.flow_model.Qv_in-
        Temp1_sensor.flow_model.Qv_out)/2;
      Temp1_sensor.flow_model.P_out-Temp1_sensor.flow_model.P_in = 
        Temp1_sensor.flow_model.DP;
      Temp1_sensor.flow_model.Q*(Temp1_sensor.flow_model.h_out-Temp1_sensor.flow_model.h_in)
         = Temp1_sensor.flow_model.W;
      Temp1_sensor.flow_model.h_out-Temp1_sensor.flow_model.h_in = 
        Temp1_sensor.flow_model.DH;
      Temp1_sensor.flow_model.T_out-Temp1_sensor.flow_model.T_in = 
        Temp1_sensor.flow_model.DT;
      Temp1_sensor.flow_model.C_in.Q+Temp1_sensor.flow_model.C_out.Q = 0;
      Temp1_sensor.flow_model.C_out.Xi_outflow = inStream(Temp1_sensor.flow_model.C_in.Xi_outflow);
      assert(Temp1_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Temp1_sensor.flow_model.P = Temp1_sensor.flow_model.P_in;
      Temp1_sensor.flow_model.h = Temp1_sensor.flow_model.h_in;
      Temp1_sensor.flow_model.T = Temp1_sensor.flow_model.T_in;
      Temp1_sensor.flow_model.DP = 0;
      Temp1_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Temp1_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Temp1_sensor.faulty_flow_rate) then 
        Temp1_sensor.mass_flow_rate_bias = 0;
      end if;
      Temp1_sensor.P = Temp1_sensor.C_in.P;
      Temp1_sensor.Q = Temp1_sensor.C_in.Q+Temp1_sensor.mass_flow_rate_bias;
      Temp1_sensor.Xi = inStream(Temp1_sensor.C_in.Xi_outflow);
      Temp1_sensor.h = inStream(Temp1_sensor.C_in.h_outflow);
      Temp1_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Temp1_sensor.P, Temp1_sensor.h, Temp1_sensor.Xi, 0, 0);
      assert(Temp1_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      Temp1_sensor.T = Temp1_sensor.flow_model.T;
      Temp1_sensor.T_degC+273.15 = Temp1_sensor.T;
      Temp1_sensor.T_degF = Temp1_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    Temp1_sensor.flow_model.C_in.P = Temp1_sensor.C_in.P;
    Temp1_sensor.C_in.Q-Temp1_sensor.flow_model.C_in.Q = 0.0;
    Temp1_sensor.flow_model.C_out.P = Temp1_sensor.C_out.P;
    Temp1_sensor.C_out.Q-Temp1_sensor.flow_model.C_out.Q = 0.0;

  // Component Press1_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Press1_sensor.flow_model.h_in = inStream(Press1_sensor.flow_model.C_in.h_outflow);
      Press1_sensor.flow_model.h_out = Press1_sensor.flow_model.C_out.h_outflow;
      Press1_sensor.flow_model.Q = Press1_sensor.flow_model.C_in.Q;
      Press1_sensor.flow_model.P_in = Press1_sensor.flow_model.C_in.P;
      Press1_sensor.flow_model.P_out = Press1_sensor.flow_model.C_out.P;
      Press1_sensor.flow_model.Xi = inStream(Press1_sensor.flow_model.C_in.Xi_outflow);
      Press1_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Press1_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Press1_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.flow_model.P_in, Press1_sensor.flow_model.h_in, 
        Press1_sensor.flow_model.Xi, 0, 0);
      Press1_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.flow_model.P_out, Press1_sensor.flow_model.h_out, 
        Press1_sensor.flow_model.Xi, 0, 0);
      Press1_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press1_sensor.flow_model.state_in);
      Press1_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press1_sensor.flow_model.state_out);
      Press1_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press1_sensor.flow_model.state_in);
      Press1_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press1_sensor.flow_model.state_out);
      Press1_sensor.flow_model.rho = (Press1_sensor.flow_model.rho_in+
        Press1_sensor.flow_model.rho_out)/2;
      Press1_sensor.flow_model.Qv_in = Press1_sensor.flow_model.Q/
        Press1_sensor.flow_model.rho_in;
      Press1_sensor.flow_model.Qv_out =  -Press1_sensor.flow_model.Q/
        Press1_sensor.flow_model.rho_out;
      Press1_sensor.flow_model.Qv = (Press1_sensor.flow_model.Qv_in-
        Press1_sensor.flow_model.Qv_out)/2;
      Press1_sensor.flow_model.P_out-Press1_sensor.flow_model.P_in = 
        Press1_sensor.flow_model.DP;
      Press1_sensor.flow_model.Q*(Press1_sensor.flow_model.h_out-
        Press1_sensor.flow_model.h_in) = Press1_sensor.flow_model.W;
      Press1_sensor.flow_model.h_out-Press1_sensor.flow_model.h_in = 
        Press1_sensor.flow_model.DH;
      Press1_sensor.flow_model.T_out-Press1_sensor.flow_model.T_in = 
        Press1_sensor.flow_model.DT;
      Press1_sensor.flow_model.C_in.Q+Press1_sensor.flow_model.C_out.Q = 0;
      Press1_sensor.flow_model.C_out.Xi_outflow = inStream(Press1_sensor.flow_model.C_in.Xi_outflow);
      assert(Press1_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Press1_sensor.flow_model.P = Press1_sensor.flow_model.P_in;
      Press1_sensor.flow_model.h = Press1_sensor.flow_model.h_in;
      Press1_sensor.flow_model.T = Press1_sensor.flow_model.T_in;
      Press1_sensor.flow_model.DP = 0;
      Press1_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Press1_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Press1_sensor.faulty_flow_rate) then 
        Press1_sensor.mass_flow_rate_bias = 0;
      end if;
      Press1_sensor.P = Press1_sensor.C_in.P;
      Press1_sensor.Q = Press1_sensor.C_in.Q+Press1_sensor.mass_flow_rate_bias;
      Press1_sensor.Xi = inStream(Press1_sensor.C_in.Xi_outflow);
      Press1_sensor.h = inStream(Press1_sensor.C_in.h_outflow);
      Press1_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press1_sensor.P, Press1_sensor.h, Press1_sensor.Xi, 0, 0);
      assert(Press1_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Press1_sensor.P_barA = Press1_sensor.P*1E-05;
      Press1_sensor.P_psiA = Press1_sensor.P*0.000145038;
      Press1_sensor.P_MPaA = Press1_sensor.P*1E-06;
      Press1_sensor.P_kPaA = Press1_sensor.P*0.001;
      Press1_sensor.P_barG = Press1_sensor.P_barA-1;
      Press1_sensor.P_psiG = Press1_sensor.P_psiA-14.50377377;
      Press1_sensor.P_MPaG = Press1_sensor.P_MPaA-0.1;
      Press1_sensor.P_kPaG = Press1_sensor.P_kPaA-100;
      Press1_sensor.P_mbar = Press1_sensor.P*0.01;
      Press1_sensor.P_inHg = Press1_sensor.P*0.0002953006;
    // end of extends 
  equation
    Press1_sensor.flow_model.C_in.P = Press1_sensor.C_in.P;
    Press1_sensor.C_in.Q-Press1_sensor.flow_model.C_in.Q = 0.0;
    Press1_sensor.flow_model.C_out.P = Press1_sensor.C_out.P;
    Press1_sensor.C_out.Q-Press1_sensor.flow_model.C_out.Q = 0.0;

  // Component Pump
  // class MetroscopeModelingLibrary.WaterSteam.Machines.Pump
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Pump.h_in = inStream(Pump.C_in.h_outflow);
      Pump.h_out = Pump.C_out.h_outflow;
      Pump.Q = Pump.C_in.Q;
      Pump.P_in = Pump.C_in.P;
      Pump.P_out = Pump.C_out.P;
      Pump.Xi = inStream(Pump.C_in.Xi_outflow);
      Pump.C_in.h_outflow = 1000000.0;
      Pump.C_in.Xi_outflow = zeros(0);
      Pump.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        Pump.P_in, Pump.h_in, Pump.Xi, 0, 0);
      Pump.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1(
        Pump.P_out, Pump.h_out, Pump.Xi, 0, 0);
      Pump.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        Pump.state_in);
      Pump.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        Pump.state_out);
      Pump.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        Pump.state_in);
      Pump.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        Pump.state_out);
      Pump.rho = (Pump.rho_in+Pump.rho_out)/2;
      Pump.Qv_in = Pump.Q/Pump.rho_in;
      Pump.Qv_out =  -Pump.Q/Pump.rho_out;
      Pump.Qv = (Pump.Qv_in-Pump.Qv_out)/2;
      Pump.P_out-Pump.P_in = Pump.DP;
      Pump.Q*(Pump.h_out-Pump.h_in) = Pump.W;
      Pump.h_out-Pump.h_in = Pump.DH;
      Pump.T_out-Pump.T_in = Pump.DT;
      Pump.C_in.Q+Pump.C_out.Q = 0;
      Pump.C_out.Xi_outflow = inStream(Pump.C_in.Xi_outflow);
      assert(Pump.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Machines.Pump
    equation
      Pump.R = Pump.VRot/Pump.VRotn;
      Pump.hn = Pump.a1*Pump.Qv^2+Pump.a2*Pump.Qv*Pump.R+Pump.a3*Pump.R^2;
      Pump.rh = noEvent(max((if Pump.R > 1E-05 then Pump.b1*Pump.Qv^2/Pump.R^2+
        Pump.b2*Pump.Qv/Pump.R+Pump.b3 else Pump.b3), Pump.rh_min));
      Pump.DP = Pump.rho*9.80665*Pump.hn;
      Pump.DH = 9.80665*Pump.hn/Pump.rh;
      Pump.Wm = Pump.C_power.W;
      Pump.Wm = Pump.W/Pump.rm;
      Pump.Wh = Pump.Qv*Pump.DP/Pump.rh;
    // end of extends 

  // Component source1
  // class MetroscopeModelingLibrary.Power.BoundaryConditions.Source
  equation
    source1.W_out = source1.C_out.W;

  // Component Press3_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Press3_sensor.flow_model.h_in = inStream(Press3_sensor.flow_model.C_in.h_outflow);
      Press3_sensor.flow_model.h_out = Press3_sensor.flow_model.C_out.h_outflow;
      Press3_sensor.flow_model.Q = Press3_sensor.flow_model.C_in.Q;
      Press3_sensor.flow_model.P_in = Press3_sensor.flow_model.C_in.P;
      Press3_sensor.flow_model.P_out = Press3_sensor.flow_model.C_out.P;
      Press3_sensor.flow_model.Xi = inStream(Press3_sensor.flow_model.C_in.Xi_outflow);
      Press3_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Press3_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Press3_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press3_sensor.flow_model.P_in, Press3_sensor.flow_model.h_in, 
        Press3_sensor.flow_model.Xi, 0, 0);
      Press3_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press3_sensor.flow_model.P_out, Press3_sensor.flow_model.h_out, 
        Press3_sensor.flow_model.Xi, 0, 0);
      Press3_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press3_sensor.flow_model.state_in);
      Press3_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Press3_sensor.flow_model.state_out);
      Press3_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press3_sensor.flow_model.state_in);
      Press3_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Press3_sensor.flow_model.state_out);
      Press3_sensor.flow_model.rho = (Press3_sensor.flow_model.rho_in+
        Press3_sensor.flow_model.rho_out)/2;
      Press3_sensor.flow_model.Qv_in = Press3_sensor.flow_model.Q/
        Press3_sensor.flow_model.rho_in;
      Press3_sensor.flow_model.Qv_out =  -Press3_sensor.flow_model.Q/
        Press3_sensor.flow_model.rho_out;
      Press3_sensor.flow_model.Qv = (Press3_sensor.flow_model.Qv_in-
        Press3_sensor.flow_model.Qv_out)/2;
      Press3_sensor.flow_model.P_out-Press3_sensor.flow_model.P_in = 
        Press3_sensor.flow_model.DP;
      Press3_sensor.flow_model.Q*(Press3_sensor.flow_model.h_out-
        Press3_sensor.flow_model.h_in) = Press3_sensor.flow_model.W;
      Press3_sensor.flow_model.h_out-Press3_sensor.flow_model.h_in = 
        Press3_sensor.flow_model.DH;
      Press3_sensor.flow_model.T_out-Press3_sensor.flow_model.T_in = 
        Press3_sensor.flow_model.DT;
      Press3_sensor.flow_model.C_in.Q+Press3_sensor.flow_model.C_out.Q = 0;
      Press3_sensor.flow_model.C_out.Xi_outflow = inStream(Press3_sensor.flow_model.C_in.Xi_outflow);
      assert(Press3_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Press3_sensor.flow_model.P = Press3_sensor.flow_model.P_in;
      Press3_sensor.flow_model.h = Press3_sensor.flow_model.h_in;
      Press3_sensor.flow_model.T = Press3_sensor.flow_model.T_in;
      Press3_sensor.flow_model.DP = 0;
      Press3_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Press3_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.PressureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Press3_sensor.faulty_flow_rate) then 
        Press3_sensor.mass_flow_rate_bias = 0;
      end if;
      Press3_sensor.P = Press3_sensor.C_in.P;
      Press3_sensor.Q = Press3_sensor.C_in.Q+Press3_sensor.mass_flow_rate_bias;
      Press3_sensor.Xi = inStream(Press3_sensor.C_in.Xi_outflow);
      Press3_sensor.h = inStream(Press3_sensor.C_in.h_outflow);
      Press3_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Press3_sensor.P, Press3_sensor.h, Press3_sensor.Xi, 0, 0);
      assert(Press3_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.PressureSensor
    equation
      Press3_sensor.P_barA = Press3_sensor.P*1E-05;
      Press3_sensor.P_psiA = Press3_sensor.P*0.000145038;
      Press3_sensor.P_MPaA = Press3_sensor.P*1E-06;
      Press3_sensor.P_kPaA = Press3_sensor.P*0.001;
      Press3_sensor.P_barG = Press3_sensor.P_barA-1;
      Press3_sensor.P_psiG = Press3_sensor.P_psiA-14.50377377;
      Press3_sensor.P_MPaG = Press3_sensor.P_MPaA-0.1;
      Press3_sensor.P_kPaG = Press3_sensor.P_kPaA-100;
      Press3_sensor.P_mbar = Press3_sensor.P*0.01;
      Press3_sensor.P_inHg = Press3_sensor.P*0.0002953006;
    // end of extends 
  equation
    Press3_sensor.flow_model.C_in.P = Press3_sensor.C_in.P;
    Press3_sensor.C_in.Q-Press3_sensor.flow_model.C_in.Q = 0.0;
    Press3_sensor.flow_model.C_out.P = Press3_sensor.C_out.P;
    Press3_sensor.C_out.Q-Press3_sensor.flow_model.C_out.Q = 0.0;

  // Component CEC809_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      CEC809_sensor.flow_model.h_in = inStream(CEC809_sensor.flow_model.C_in.h_outflow);
      CEC809_sensor.flow_model.h_out = CEC809_sensor.flow_model.C_out.h_outflow;
      CEC809_sensor.flow_model.Q = CEC809_sensor.flow_model.C_in.Q;
      CEC809_sensor.flow_model.P_in = CEC809_sensor.flow_model.C_in.P;
      CEC809_sensor.flow_model.P_out = CEC809_sensor.flow_model.C_out.P;
      CEC809_sensor.flow_model.Xi = inStream(CEC809_sensor.flow_model.C_in.Xi_outflow);
      CEC809_sensor.flow_model.C_in.h_outflow = 1000000.0;
      CEC809_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      CEC809_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC809_sensor.flow_model.P_in, CEC809_sensor.flow_model.h_in, 
        CEC809_sensor.flow_model.Xi, 0, 0);
      CEC809_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC809_sensor.flow_model.P_out, CEC809_sensor.flow_model.h_out, 
        CEC809_sensor.flow_model.Xi, 0, 0);
      CEC809_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC809_sensor.flow_model.state_in);
      CEC809_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        CEC809_sensor.flow_model.state_out);
      CEC809_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC809_sensor.flow_model.state_in);
      CEC809_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        CEC809_sensor.flow_model.state_out);
      CEC809_sensor.flow_model.rho = (CEC809_sensor.flow_model.rho_in+
        CEC809_sensor.flow_model.rho_out)/2;
      CEC809_sensor.flow_model.Qv_in = CEC809_sensor.flow_model.Q/
        CEC809_sensor.flow_model.rho_in;
      CEC809_sensor.flow_model.Qv_out =  -CEC809_sensor.flow_model.Q/
        CEC809_sensor.flow_model.rho_out;
      CEC809_sensor.flow_model.Qv = (CEC809_sensor.flow_model.Qv_in-
        CEC809_sensor.flow_model.Qv_out)/2;
      CEC809_sensor.flow_model.P_out-CEC809_sensor.flow_model.P_in = 
        CEC809_sensor.flow_model.DP;
      CEC809_sensor.flow_model.Q*(CEC809_sensor.flow_model.h_out-
        CEC809_sensor.flow_model.h_in) = CEC809_sensor.flow_model.W;
      CEC809_sensor.flow_model.h_out-CEC809_sensor.flow_model.h_in = 
        CEC809_sensor.flow_model.DH;
      CEC809_sensor.flow_model.T_out-CEC809_sensor.flow_model.T_in = 
        CEC809_sensor.flow_model.DT;
      CEC809_sensor.flow_model.C_in.Q+CEC809_sensor.flow_model.C_out.Q = 0;
      CEC809_sensor.flow_model.C_out.Xi_outflow = inStream(CEC809_sensor.flow_model.C_in.Xi_outflow);
      assert(CEC809_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      CEC809_sensor.flow_model.P = CEC809_sensor.flow_model.P_in;
      CEC809_sensor.flow_model.h = CEC809_sensor.flow_model.h_in;
      CEC809_sensor.flow_model.T = CEC809_sensor.flow_model.T_in;
      CEC809_sensor.flow_model.DP = 0;
      CEC809_sensor.flow_model.DH = 0;
    // end of extends 

  // Component CEC809_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.TemperatureSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not CEC809_sensor.faulty_flow_rate) then 
        CEC809_sensor.mass_flow_rate_bias = 0;
      end if;
      CEC809_sensor.P = CEC809_sensor.C_in.P;
      CEC809_sensor.Q = CEC809_sensor.C_in.Q+CEC809_sensor.mass_flow_rate_bias;
      CEC809_sensor.Xi = inStream(CEC809_sensor.C_in.Xi_outflow);
      CEC809_sensor.h = inStream(CEC809_sensor.C_in.h_outflow);
      CEC809_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (CEC809_sensor.P, CEC809_sensor.h, CEC809_sensor.Xi, 0, 0);
      assert(CEC809_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.TemperatureSensor
    equation
      CEC809_sensor.T = CEC809_sensor.flow_model.T;
      CEC809_sensor.T_degC+273.15 = CEC809_sensor.T;
      CEC809_sensor.T_degF = CEC809_sensor.T_degC*1.8+32;
    // end of extends 
  equation
    CEC809_sensor.flow_model.C_in.P = CEC809_sensor.C_in.P;
    CEC809_sensor.C_in.Q-CEC809_sensor.flow_model.C_in.Q = 0.0;
    CEC809_sensor.flow_model.C_out.P = CEC809_sensor.C_out.P;
    CEC809_sensor.C_out.Q-CEC809_sensor.flow_model.C_out.Q = 0.0;

  // Component V421_valve
  // class MetroscopeModelingLibrary.WaterSteam.Pipes.ControlValve
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      V421_valve.h_in = inStream(V421_valve.C_in.h_outflow);
      V421_valve.h_out = V421_valve.C_out.h_outflow;
      V421_valve.Q = V421_valve.C_in.Q;
      V421_valve.P_in = V421_valve.C_in.P;
      V421_valve.P_out = V421_valve.C_out.P;
      V421_valve.Xi = inStream(V421_valve.C_in.Xi_outflow);
      V421_valve.C_in.h_outflow = 1000000.0;
      V421_valve.C_in.Xi_outflow = zeros(0);
      V421_valve.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V421_valve.P_in, V421_valve.h_in, V421_valve.Xi, 0, 0);
      V421_valve.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (V421_valve.P_out, V421_valve.h_out, V421_valve.Xi, 0, 0);
      V421_valve.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V421_valve.state_in);
      V421_valve.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5(
        V421_valve.state_out);
      V421_valve.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V421_valve.state_in);
      V421_valve.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6(
        V421_valve.state_out);
      V421_valve.rho = (V421_valve.rho_in+V421_valve.rho_out)/2;
      V421_valve.Qv_in = V421_valve.Q/V421_valve.rho_in;
      V421_valve.Qv_out =  -V421_valve.Q/V421_valve.rho_out;
      V421_valve.Qv = (V421_valve.Qv_in-V421_valve.Qv_out)/2;
      V421_valve.P_out-V421_valve.P_in = V421_valve.DP;
      V421_valve.Q*(V421_valve.h_out-V421_valve.h_in) = V421_valve.W;
      V421_valve.h_out-V421_valve.h_in = V421_valve.DH;
      V421_valve.T_out-V421_valve.T_in = V421_valve.DT;
      V421_valve.C_in.Q+V421_valve.C_out.Q = 0;
      V421_valve.C_out.Xi_outflow = inStream(V421_valve.C_in.Xi_outflow);
      assert(V421_valve.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoHFlowModel
    equation
      V421_valve.h = V421_valve.h_in;
      V421_valve.DH = 0;
    // extends MetroscopeModelingLibrary.Partial.Pipes.ControlValve
    equation
      V421_valve.DP*V421_valve.Cv*abs(V421_valve.Cv) =  -1733000000000.0*abs(
        V421_valve.Q)*V421_valve.Q/V421_valve.rho_in^2;
      V421_valve.Cv = V421_valve.Opening*V421_valve.Cv_max;
    // end of extends 

  // Component Q_recirculation_sensor.flow_model
  // class MetroscopeModelingLibrary.WaterSteam.BaseClasses.IsoPHFlowModel
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.FlowModel
    equation
      Q_recirculation_sensor.flow_model.h_in = inStream(Q_recirculation_sensor.flow_model.C_in.h_outflow);
      Q_recirculation_sensor.flow_model.h_out = Q_recirculation_sensor.flow_model.C_out.h_outflow;
      Q_recirculation_sensor.flow_model.Q = Q_recirculation_sensor.flow_model.C_in.Q;
      Q_recirculation_sensor.flow_model.P_in = Q_recirculation_sensor.flow_model.C_in.P;
      Q_recirculation_sensor.flow_model.P_out = Q_recirculation_sensor.flow_model.C_out.P;
      Q_recirculation_sensor.flow_model.Xi = inStream(Q_recirculation_sensor.flow_model.C_in.Xi_outflow);
      Q_recirculation_sensor.flow_model.C_in.h_outflow = 1000000.0;
      Q_recirculation_sensor.flow_model.C_in.Xi_outflow = zeros(0);
      Q_recirculation_sensor.flow_model.state_in = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.flow_model.P_in, Q_recirculation_sensor.flow_model.h_in,
         Q_recirculation_sensor.flow_model.Xi, 0, 0);
      Q_recirculation_sensor.flow_model.state_out = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.flow_model.P_out, Q_recirculation_sensor.flow_model.h_out,
         Q_recirculation_sensor.flow_model.Xi, 0, 0);
      Q_recirculation_sensor.flow_model.T_in = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_recirculation_sensor.flow_model.state_in);
      Q_recirculation_sensor.flow_model.T_out = Modelica.Media.Water.WaterIF97_ph.temperature_Unique5
        (
        Q_recirculation_sensor.flow_model.state_out);
      Q_recirculation_sensor.flow_model.rho_in = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.flow_model.state_in);
      Q_recirculation_sensor.flow_model.rho_out = Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.flow_model.state_out);
      Q_recirculation_sensor.flow_model.rho = (Q_recirculation_sensor.flow_model.rho_in
        +Q_recirculation_sensor.flow_model.rho_out)/2;
      Q_recirculation_sensor.flow_model.Qv_in = Q_recirculation_sensor.flow_model.Q
        /Q_recirculation_sensor.flow_model.rho_in;
      Q_recirculation_sensor.flow_model.Qv_out =  -Q_recirculation_sensor.flow_model.Q
        /Q_recirculation_sensor.flow_model.rho_out;
      Q_recirculation_sensor.flow_model.Qv = (Q_recirculation_sensor.flow_model.Qv_in
        -Q_recirculation_sensor.flow_model.Qv_out)/2;
      Q_recirculation_sensor.flow_model.P_out-Q_recirculation_sensor.flow_model.P_in
         = Q_recirculation_sensor.flow_model.DP;
      Q_recirculation_sensor.flow_model.Q*(Q_recirculation_sensor.flow_model.h_out
        -Q_recirculation_sensor.flow_model.h_in) = Q_recirculation_sensor.flow_model.W;
      Q_recirculation_sensor.flow_model.h_out-Q_recirculation_sensor.flow_model.h_in
         = Q_recirculation_sensor.flow_model.DH;
      Q_recirculation_sensor.flow_model.T_out-Q_recirculation_sensor.flow_model.T_in
         = Q_recirculation_sensor.flow_model.DT;
      Q_recirculation_sensor.flow_model.C_in.Q+Q_recirculation_sensor.flow_model.C_out.Q
         = 0;
      Q_recirculation_sensor.flow_model.C_out.Xi_outflow = inStream(
        Q_recirculation_sensor.flow_model.C_in.Xi_outflow);
      assert(Q_recirculation_sensor.flow_model.Q > 0, "Wrong flow sign. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.BaseClasses.IsoPHFlowModel
    equation
      Q_recirculation_sensor.flow_model.P = Q_recirculation_sensor.flow_model.P_in;
      Q_recirculation_sensor.flow_model.h = Q_recirculation_sensor.flow_model.h_in;
      Q_recirculation_sensor.flow_model.T = Q_recirculation_sensor.flow_model.T_in;
      Q_recirculation_sensor.flow_model.DP = 0;
      Q_recirculation_sensor.flow_model.DH = 0;
    // end of extends 

  // Component Q_recirculation_sensor
  // class MetroscopeModelingLibrary.Sensors.WaterSteam.FlowSensor
    // extends MetroscopeModelingLibrary.Partial.Sensors.BaseSensor
    equation
      if ( not Q_recirculation_sensor.faulty_flow_rate) then 
        Q_recirculation_sensor.mass_flow_rate_bias = 0;
      end if;
      Q_recirculation_sensor.P = Q_recirculation_sensor.C_in.P;
      Q_recirculation_sensor.Q = Q_recirculation_sensor.C_in.Q+Q_recirculation_sensor.mass_flow_rate_bias;
      Q_recirculation_sensor.Xi = inStream(Q_recirculation_sensor.C_in.Xi_outflow);
      Q_recirculation_sensor.h = inStream(Q_recirculation_sensor.C_in.h_outflow);
      Q_recirculation_sensor.state = Modelica.Media.Water.WaterIF97_ph.setState_phX_Unique1
        (Q_recirculation_sensor.P, Q_recirculation_sensor.h, Q_recirculation_sensor.Xi,
         0, 0);
      assert(Q_recirculation_sensor.Q > 0, "Wrong flow sign in inline sensor. Common causes : outlet connected as if it was inlet and vice versa, or Positive/NegativeMassflowrate misuse. Recall : inlet flow is positive, outlet is negatve",
         AssertionLevel.warning);
    // extends MetroscopeModelingLibrary.Partial.Sensors.FlowSensor
    equation
      Q_recirculation_sensor.Qv = Q_recirculation_sensor.Q/Modelica.Media.Water.WaterIF97_ph.density_Unique6
        (
        Q_recirculation_sensor.state);
      Q_recirculation_sensor.Q_lm = Q_recirculation_sensor.Qv*60000;
      Q_recirculation_sensor.Q_th = Q_recirculation_sensor.Q*3.6;
      Q_recirculation_sensor.Q_lbs = Q_recirculation_sensor.Q*0.453592428;
      Q_recirculation_sensor.Q_Mlbh = Q_recirculation_sensor.Q*0.0079366414387;
    // end of extends 
  equation
    Q_recirculation_sensor.flow_model.C_in.P = Q_recirculation_sensor.C_in.P;
    Q_recirculation_sensor.C_in.Q-Q_recirculation_sensor.flow_model.C_in.Q = 0.0;
    Q_recirculation_sensor.flow_model.C_out.P = Q_recirculation_sensor.C_out.P;
    Q_recirculation_sensor.C_out.Q-Q_recirculation_sensor.flow_model.C_out.Q = 
      0.0;

  // Component CEC191_sensor
  // class MetroscopeModelingLibrary.Sensors.Outline.OpeningSensor
  equation
    CEC191_sensor.Opening_pc = CEC191_sensor.Opening*100;

  // This model
  // class TIH3_CoolingLoop_Poppe.Poppe_Rev5
  equation
    waterInletTemp_sensor.T_degC = waterInletTemp;
    waterInletPress_sensor.P_barA = waterInletPress;
    airInletPress_sensor.P_barA = airInletPress;
    cold_source.relative_humidity = cold_source_relative_humidity;
    AirInletTemp_sensor.T_degC = AirInletTemp;
    CoolingTower.hd = hd;
    CoolingTower.Cf = Cf;
    CoolingTower.Afr = Afr;
    CoolingTower.Lfi = Lfi;
    CoolingTower.V_inlet = V_inlet;
    WaterOutletTemp_sensor.T_degC = WaterOutletTemp;
    Press2_sensor.P_barA = Press2;
    Temp2_sensor.T_degC = Temp2;
    Flow1_sensor.Qv = Flow1;
    Temp1_sensor.T_degC = Temp1;
    Press1_sensor.P_barA = Press1;
    Condenser.S = 100;
    Condenser.water_height = 1;
    Condenser.C_incond = 0;
    Condenser.P_offset = 0;
    Condenser.Kfr_cold = 0;
    Condenser.Kth = 1829028;
    SP189_sensor.Opening_pc = V423_opening;
    CEC195_sensor.Opening_pc = V422_opening;
    CEC197_sensor.Qv = CEC197;
    V422_Flow_sensor.Qv = ( -2E-05*V422_opening*V422_opening*V422_opening)+
      0.0071*V422_opening*V422_opening+0.0085*V422_opening-0.0432;
    V423_valve.Cv_max = Cvmax_V423;
    V422_valve.Cv_max = Cvmax_V422;
    Q_reject_press_sensor.P_barA = Q_reject_press;
    CEC809_sensor.T_degC = CEC809;
    Press3_sensor.P_barA = Press3;
    Pump.hn = Pump_hn;
    Pump.rh = Pump_rh;
    Pump.Qv = Pump_Qv;
    Pump.VRotn = 4000;
    Pump.VRot = 4000;
    Pump.rm = 0.85;
    Pump.a1 = 0;
    Pump.a2 = 0;
    Pump.b1 = 0;
    Pump.b2 = 0;
    Pump.rh_min = 0.2;
    CEC191_sensor.Opening_pc = V421_opening;
    V421_valve.Cv_max = Cvmax_V421;
    cold_source.C_out.P = AirInletTemp_sensor.C_in.P;
    AirInletTemp_sensor.C_in.Q+cold_source.C_out.Q = 0.0;
    airInletFlow_sensor.C_in.P = AirInletTemp_sensor.C_out.P;
    AirInletTemp_sensor.C_out.Q+airInletFlow_sensor.C_in.Q = 0.0;
    airOutletPress_sensor.C_out.P = AirOutletTemp_sensor.C_in.P;
    AirOutletTemp_sensor.C_in.Q+airOutletPress_sensor.C_out.Q = 0.0;
    cold_sink.C_in.P = AirOutletTemp_sensor.C_out.P;
    AirOutletTemp_sensor.C_out.Q+cold_sink.C_in.Q = 0.0;
    V421_valve.Opening = CEC191_sensor.Opening;
    V422_valve.Opening = CEC195_sensor.Opening;
    V423_valve.C_out.P = CEC197_sensor.C_in.P;
    CEC197_sensor.C_in.Q+V423_valve.C_out.Q = 0.0;
    Q_reject_press_sensor.C_in.P = CEC197_sensor.C_out.P;
    V422_Flow_sensor.C_out.P = CEC197_sensor.C_out.P;
    CEC197_sensor.C_out.Q+Q_reject_press_sensor.C_in.Q+V422_Flow_sensor.C_out.Q
       = 0.0;
    source.C_out.P = CEC809_sensor.C_in.P;
    CEC809_sensor.C_in.Q+source.C_out.Q = 0.0;
    Press3_sensor.C_in.P = CEC809_sensor.C_out.P;
    CEC809_sensor.C_out.Q+Press3_sensor.C_in.Q = 0.0;
    Flow1_sensor.C_out.P = Condenser.C_cold_in.P;
    Condenser.C_cold_in.Q+Flow1_sensor.C_out.Q = 0.0;
    waterFlow_sensor.C_in.P = Condenser.C_cold_out.P;
    Condenser.C_cold_out.Q+waterFlow_sensor.C_in.Q = 0.0;
    Flow2_sensor.C_out.P = Condenser.C_hot_in.P;
    Condenser.C_hot_in.Q+Flow2_sensor.C_out.Q = 0.0;
    sink.C_in.P = Condenser.C_hot_out.P;
    Condenser.C_hot_out.Q+sink.C_in.Q = 0.0;
    airInletPress_sensor.C_out.P = CoolingTower.air_inlet_connector.P;
    CoolingTower.air_inlet_connector.Q+airInletPress_sensor.C_out.Q = 0.0;
    airOutletPress_sensor.C_in.P = CoolingTower.air_outlet_connector.P;
    CoolingTower.air_outlet_connector.Q+airOutletPress_sensor.C_in.Q = 0.0;
    waterInletPress_sensor.C_out.P = CoolingTower.water_inlet_connector.P;
    CoolingTower.water_inlet_connector.Q+waterInletPress_sensor.C_out.Q = 0.0;
    WaterOutletTemp_sensor.C_in.P = CoolingTower.water_outlet_connector.P;
    CoolingTower.water_outlet_connector.Q+WaterOutletTemp_sensor.C_in.Q = 0.0;
    Press1_sensor.C_out.P = Flow1_sensor.C_in.P;
    Flow1_sensor.C_in.Q+Press1_sensor.C_out.Q = 0.0;
    Press2_sensor.C_out.P = Flow2_sensor.C_in.P;
    Flow2_sensor.C_in.Q+Press2_sensor.C_out.Q = 0.0;
    Temp1_sensor.C_out.P = Press1_sensor.C_in.P;
    Press1_sensor.C_in.Q+Temp1_sensor.C_out.Q = 0.0;
    Temp2_sensor.C_out.P = Press2_sensor.C_in.P;
    Press2_sensor.C_in.Q+Temp2_sensor.C_out.Q = 0.0;
    Pump.C_in.P = Press3_sensor.C_out.P;
    Q_recirculation_sensor.C_out.P = Press3_sensor.C_out.P;
    Press3_sensor.C_out.Q+Pump.C_in.Q+Q_recirculation_sensor.C_out.Q = 0.0;
    Temp1_sensor.C_in.P = Pump.C_out.P;
    Pump.C_out.Q+Temp1_sensor.C_in.Q = 0.0;
    Pump.C_power.W+source1.C_out.W = 0.0;
    V421_valve.C_out.P = Q_recirculation_sensor.C_in.P;
    Q_recirculation_sensor.C_in.Q+V421_valve.C_out.Q = 0.0;
    hot_sink.C_in.P = Q_reject_press_sensor.C_out.P;
    Q_reject_press_sensor.C_out.Q+hot_sink.C_in.Q = 0.0;
    V423_valve.Opening = SP189_sensor.Opening;
    source2.C_out.P = Temp2_sensor.C_in.P;
    Temp2_sensor.C_in.Q+source2.C_out.Q = 0.0;
    V422_valve.C_in.P = V421_valve.C_in.P;
    V423_valve.C_in.P = V421_valve.C_in.P;
    WaterOutletTemp_sensor.C_out.P = V421_valve.C_in.P;
    V421_valve.C_in.Q+V422_valve.C_in.Q+V423_valve.C_in.Q+WaterOutletTemp_sensor.C_out.Q
       = 0.0;
    V422_valve.C_out.P = V422_Flow_sensor.C_in.P;
    V422_Flow_sensor.C_in.Q+V422_valve.C_out.Q = 0.0;
    airInletPress_sensor.C_in.P = airInletFlow_sensor.C_out.P;
    airInletFlow_sensor.C_out.Q+airInletPress_sensor.C_in.Q = 0.0;
    waterInletTemp_sensor.C_in.P = waterFlow_sensor.C_out.P;
    waterFlow_sensor.C_out.Q+waterInletTemp_sensor.C_in.Q = 0.0;
    waterInletTemp_sensor.C_out.P = waterInletPress_sensor.C_in.P;
    waterInletPress_sensor.C_in.Q+waterInletTemp_sensor.C_out.Q = 0.0;

end Poppe_Rev5;
